{
  "version": 3,
  "file": "ngx-auth.umd.min.js",
  "sources": [
    "ng://ngx-auth/out/auth.service.ts",
    "ng://ngx-auth/out/rxjs.util.ts",
    "ng://ngx-auth/out/tokens.ts",
    "ng://ngx-auth/out/public.guard.ts",
    "ng://ngx-auth/out/protected.guard.ts",
    "ng://ngx-auth/out/auth.interceptor.ts",
    "ng://ngx-auth/out/auth.module.ts"
  ],
  "sourcesContent": [
    "import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * Essential service for authentication\n * @export\n */\nexport abstract class AuthService {\n\n  /**\n   * Check, if user already authorized.\n   *\n   * Should return Observable with true or false values\n   */\n  public abstract isAuthorized(): Observable<boolean>;\n\n  /**\n   * Get access token\n   *\n   * Should return access token in Observable from e.g.\n   * localStorage\n   */\n  public abstract getAccessToken(): Observable<string>;\n\n  /**\n   * Function, that should perform refresh token verifyTokenRequest\n   *\n   * Should be successfully completed so interceptor\n   * can execute pending requests or retry original one\n   */\n  public abstract refreshToken(): Observable<any>;\n\n  /**\n   * Function, checks response of failed request to determine,\n   * whether token be refreshed or not.\n   *\n   * Essentially checks status\n   */\n  public abstract refreshShouldHappen(response: HttpErrorResponse): boolean;\n\n  /**\n   * Verify that outgoing request is refresh-token,\n   * so interceptor won't intercept this request\n   */\n  public abstract verifyTokenRequest(url: string): boolean;\n\n  /**\n   * Add token to headers, dependent on server\n   * set-up, by default adds a bearer token.\n   * Called by interceptor.\n   *\n   * To change behavior, override this method.\n   */\n  public abstract getHeaders?(token: string): { [name: string]: string | string[] };\n}\n",
    "import { Observable } from 'rxjs/Observable';\nimport { first as _first } from 'rxjs/operator/first';\nimport { switchMap as _switchMap } from 'rxjs/operator/switchMap';\nimport { map as _map } from 'rxjs/operator/map';\nimport { _catch as __catch } from 'rxjs/operator/catch';\n\nexport function first<T>(obs: Observable<T>): Observable<T> {\n  return _first.call(obs);\n}\n\nexport function switchMap<T, R>(\n  obs: Observable<T>,\n  project: (value: T, index: number) => Observable<R>\n): Observable<R> {\n  return _switchMap.call(obs, project);\n}\n\nexport function map<T, R>(\n  obs: Observable<T>,\n  project: (value: T, index: number) => R\n): Observable<R> {\n  return _map.call(obs, project);\n}\n\nexport function _catch<T, R>(\n  obs: Observable<T>,\n  selector: (err: any, caught: Observable<T>) => Observable<R>\n): Observable<T | R> {\n  return __catch.call(obs, selector);\n}\n\nexport { _throw } from 'rxjs/observable/throw';\n",
    "import { InjectionToken } from '@angular/core';\n\nexport const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');\nexport const PUBLIC_FALLBACK_PAGE_URI = new InjectionToken('PUBLIC_FALLBACK_PAGE_URI');\nexport const PROTECTED_FALLBACK_PAGE_URI = new InjectionToken('PROTECTED_FALLBACK_PAGE_URI');\n",
    "import { Injectable, Inject } from '@angular/core';\nimport {\n  CanActivate,\n  CanActivateChild,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { map } from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PROTECTED_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n *\n * usage: { path: 'test', component: TestComponent, canActivate: [ PublicGuard ] }\n *\n * @export\n */\n@Injectable()\nexport class PublicGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    @Inject(PROTECTED_FALLBACK_PAGE_URI) private protectedFallbackPageUri: string,\n    private router: Router\n  ) {}\n\n  /**\n   * CanActivate handler\n   */\n  public canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return map(\n      this.authService.isAuthorized(),\n      (isAuthorized: boolean) => {\n\n        if (isAuthorized && !this.isProtectedPage(state)) {\n          this.navigate(this.protectedFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * CanActivateChild handler\n   */\n  public canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  /**\n   * Check, if current page is protected fallback page\n   */\n  private isProtectedPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.protectedFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      window.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport {\n  Router,\n  CanActivate,\n  CanActivateChild,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { map } from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n *\n * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }\n *\n * @export\n */\n@Injectable()\nexport class ProtectedGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    @Inject(AUTH_SERVICE)private authService: AuthService,\n    @Inject(PUBLIC_FALLBACK_PAGE_URI) private publicFallbackPageUri: string,\n    private router: Router\n  ) {}\n\n  /**\n   * CanActivate handler\n   */\n  public canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return map(\n      this.authService .isAuthorized(),\n      (isAuthorized: boolean) => {\n\n        if (!isAuthorized && !this.isPublicPage(state)) {\n          this.navigate(this.publicFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * CanActivateChild handler\n   */\n  public canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  /**\n   * Check, if current page is public fallback page\n   */\n  private isPublicPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.publicFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      window.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n\n}\n",
    "import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport {\n  map,\n  first,\n  switchMap,\n  _throw,\n  _catch\n} from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './tokens';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  /**\n   * Is refresh token is being executed\n   */\n  private refreshInProgress = false;\n\n  /**\n   * Notify all outstanding requests through this subject\n   */\n  private refreshSubject: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private injector: Injector) {}\n\n  /**\n   * Intercept an outgoing `HttpRequest`\n   */\n  public intercept(\n    req: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n\n    if (authService.verifyTokenRequest(req.url)) {\n      return delegate.handle(req);\n    }\n\n    return this.processIntercept(req, delegate);\n  }\n\n  /**\n   * Process all the requests via custom interceptors.\n   */\n  private processIntercept(\n    original: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const clone: HttpRequest<any> = original.clone();\n\n    return _catch(\n      switchMap(\n        this.request(clone),\n        (req: HttpRequest<any>) => delegate.handle(req)\n      ),\n      (res: HttpErrorResponse) => this.responseError(clone, res)\n    );\n  }\n\n  /**\n   * Request interceptor. Delays request if refresh is in progress\n   * otherwise adds token to the headers\n   */\n  private request(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    if (this.refreshInProgress) {\n      return this.delayRequest(req);\n    }\n\n    return this.addToken(req);\n  }\n\n  /**\n   * Failed request interceptor, check if it has to be processed with refresh\n   */\n  private responseError(\n    req: HttpRequest<any>,\n    res: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n    const refreshShouldHappen: boolean =\n      authService.refreshShouldHappen(res);\n\n    if (refreshShouldHappen && !this.refreshInProgress) {\n      this.refreshInProgress = true;\n\n      authService\n        .refreshToken()\n        .subscribe(\n          () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(true);\n          },\n          () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(false);\n          }\n        );\n    }\n\n    if (refreshShouldHappen && this.refreshInProgress) {\n      return this.retryRequest(req, res);\n    }\n\n    return _throw(res);\n  }\n\n  /**\n   * Add access token to headers or the request\n   */\n  private addToken(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n\n    return first(map(\n      authService.getAccessToken(),\n      (token: string) => {\n        if (token) {\n          let setHeaders: { [name: string]: string | string[] };\n\n          if (typeof authService.getHeaders === 'function') {\n            setHeaders = authService.getHeaders(token);\n          } else {\n            setHeaders = { Authorization: `Bearer ${token}` };\n          }\n\n          return req.clone({ setHeaders });\n        }\n\n        return req;\n      }\n    ));\n  }\n\n  /**\n   * Delay request, by subscribing on refresh event, once it finished, process it\n   * otherwise throw error\n   */\n  private delayRequest(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    return switchMap(\n      first(this.refreshSubject),\n      (status: boolean) => status ? this.addToken(req) : _throw(req)\n    );\n  }\n\n  /**\n   * Retry request, by subscribing on refresh event, once it finished, process it\n   * otherwise throw error\n   */\n  private retryRequest(\n    req: HttpRequest<any>,\n    res: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const http: HttpClient =\n      this.injector.get<HttpClient>(HttpClient);\n\n    return switchMap(\n      first(this.refreshSubject),\n      (status: boolean) => status ? http.request(req) : _throw(res || req)\n    );\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { PublicGuard } from './public.guard';\nimport { ProtectedGuard } from './protected.guard';\nimport { AuthInterceptor } from './auth.interceptor';\n\n@NgModule({\n  providers: [\n    PublicGuard,\n    ProtectedGuard,\n    AuthInterceptor,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true,\n    }\n  ]\n})\nexport class AuthModule {\n}\n"
  ],
  "names": [
    "AuthService",
    "first$1",
    "obs",
    "_first",
    "call",
    "switchMap$1",
    "project",
    "_switchMap",
    "map$1",
    "_map",
    "AUTH_SERVICE",
    "InjectionToken",
    "PUBLIC_FALLBACK_PAGE_URI",
    "PROTECTED_FALLBACK_PAGE_URI",
    "PublicGuard",
    "authService",
    "protectedFallbackPageUri",
    "router",
    "this",
    "prototype",
    "canActivate",
    "_route",
    "state",
    "_this",
    "map",
    "isAuthorized",
    "isProtectedPage",
    "navigate",
    "canActivateChild",
    "route",
    "url",
    "startsWith",
    "window",
    "location",
    "href",
    "navigateByUrl",
    "type",
    "Injectable",
    "decorators",
    "Inject",
    "args",
    "undefined",
    "Router",
    "ProtectedGuard",
    "publicFallbackPageUri",
    "isPublicPage",
    "AuthInterceptor",
    "injector",
    "refreshInProgress",
    "refreshSubject",
    "Subject",
    "intercept",
    "req",
    "delegate",
    "get",
    "verifyTokenRequest",
    "handle",
    "processIntercept",
    "original",
    "selector",
    "clone",
    "switchMap",
    "request",
    "res",
    "responseError",
    "__catch",
    "delayRequest",
    "addToken",
    "refreshShouldHappen",
    "refreshToken",
    "subscribe",
    "next",
    "retryRequest",
    "_throw",
    "first",
    "getAccessToken",
    "token",
    "setHeaders",
    "getHeaders",
    "Authorization",
    "status",
    "http",
    "HttpClient",
    "Injector",
    "AuthModule",
    "NgModule",
    "providers",
    "provide",
    "HTTP_INTERCEPTORS",
    "useClass",
    "multi"
  ],
  "mappings": "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"
}
