{
  "version": 3,
  "file": "ngx-auth.umd.js",
  "sources": [
    "ng://ngx-auth/out/auth.module.ts",
    "ng://ngx-auth/out/auth.interceptor.ts",
    "ng://ngx-auth/out/protected.guard.ts",
    "ng://ngx-auth/out/public.guard.ts",
    "ng://ngx-auth/out/tokens.ts",
    "ng://ngx-auth/out/rxjs.util.ts",
    "ng://ngx-auth/out/auth.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { PublicGuard } from './public.guard';\nimport { ProtectedGuard } from './protected.guard';\nimport { AuthInterceptor } from './auth.interceptor';\n\n@NgModule({\n  providers: [\n    PublicGuard,\n    ProtectedGuard,\n    AuthInterceptor,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true,\n    }\n  ]\n})\nexport class AuthModule {\n}\n",
    "import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport {\n  map,\n  first,\n  switchMap,\n  _throw,\n  _catch\n} from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './tokens';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  /**\n   * Is refresh token is being executed\n   */\n  private refreshInProgress = false;\n\n  /**\n   * Notify all outstanding requests through this subject\n   */\n  private refreshSubject: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private injector: Injector) {}\n\n  /**\n   * Intercept an outgoing `HttpRequest`\n   */\n  public intercept(\n    req: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n\n    if (authService.verifyTokenRequest(req.url)) {\n      return delegate.handle(req);\n    }\n\n    return this.processIntercept(req, delegate);\n  }\n\n  /**\n   * Process all the requests via custom interceptors.\n   */\n  private processIntercept(\n    original: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const clone: HttpRequest<any> = original.clone();\n\n    return _catch(\n      switchMap(\n        this.request(clone),\n        (req: HttpRequest<any>) => delegate.handle(req)\n      ),\n      (res: HttpErrorResponse) => this.responseError(clone, res)\n    );\n  }\n\n  /**\n   * Request interceptor. Delays request if refresh is in progress\n   * otherwise adds token to the headers\n   */\n  private request(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    if (this.refreshInProgress) {\n      return this.delayRequest(req);\n    }\n\n    return this.addToken(req);\n  }\n\n  /**\n   * Failed request interceptor, check if it has to be processed with refresh\n   */\n  private responseError(\n    req: HttpRequest<any>,\n    res: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n    const refreshShouldHappen: boolean =\n      authService.refreshShouldHappen(res);\n\n    if (refreshShouldHappen && !this.refreshInProgress) {\n      this.refreshInProgress = true;\n\n      authService\n        .refreshToken()\n        .subscribe(\n          () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(true);\n          },\n          () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(false);\n          }\n        );\n    }\n\n    if (refreshShouldHappen && this.refreshInProgress) {\n      return this.retryRequest(req, res);\n    }\n\n    return _throw(res);\n  }\n\n  /**\n   * Add access token to headers or the request\n   */\n  private addToken(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n\n    return first(map(\n      authService.getAccessToken(),\n      (token: string) => {\n        if (token) {\n          let setHeaders: { [name: string]: string | string[] };\n\n          if (typeof authService.getHeaders === 'function') {\n            setHeaders = authService.getHeaders(token);\n          } else {\n            setHeaders = { Authorization: `Bearer ${token}` };\n          }\n\n          return req.clone({ setHeaders });\n        }\n\n        return req;\n      }\n    ));\n  }\n\n  /**\n   * Delay request, by subscribing on refresh event, once it finished, process it\n   * otherwise throw error\n   */\n  private delayRequest(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    return switchMap(\n      first(this.refreshSubject),\n      (status: boolean) => status ? this.addToken(req) : _throw(req)\n    );\n  }\n\n  /**\n   * Retry request, by subscribing on refresh event, once it finished, process it\n   * otherwise throw error\n   */\n  private retryRequest(\n    req: HttpRequest<any>,\n    res: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const http: HttpClient =\n      this.injector.get<HttpClient>(HttpClient);\n\n    return switchMap(\n      first(this.refreshSubject),\n      (status: boolean) => status ? http.request(req) : _throw(res || req)\n    );\n  }\n\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport {\n  Router,\n  CanActivate,\n  CanActivateChild,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { map } from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n *\n * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }\n *\n * @export\n */\n@Injectable()\nexport class ProtectedGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    @Inject(AUTH_SERVICE)private authService: AuthService,\n    @Inject(PUBLIC_FALLBACK_PAGE_URI) private publicFallbackPageUri: string,\n    private router: Router\n  ) {}\n\n  /**\n   * CanActivate handler\n   */\n  public canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return map(\n      this.authService .isAuthorized(),\n      (isAuthorized: boolean) => {\n\n        if (!isAuthorized && !this.isPublicPage(state)) {\n          this.navigate(this.publicFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * CanActivateChild handler\n   */\n  public canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  /**\n   * Check, if current page is public fallback page\n   */\n  private isPublicPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.publicFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      window.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport {\n  CanActivate,\n  CanActivateChild,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { map } from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PROTECTED_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n *\n * usage: { path: 'test', component: TestComponent, canActivate: [ PublicGuard ] }\n *\n * @export\n */\n@Injectable()\nexport class PublicGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    @Inject(PROTECTED_FALLBACK_PAGE_URI) private protectedFallbackPageUri: string,\n    private router: Router\n  ) {}\n\n  /**\n   * CanActivate handler\n   */\n  public canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return map(\n      this.authService.isAuthorized(),\n      (isAuthorized: boolean) => {\n\n        if (isAuthorized && !this.isProtectedPage(state)) {\n          this.navigate(this.protectedFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * CanActivateChild handler\n   */\n  public canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  /**\n   * Check, if current page is protected fallback page\n   */\n  private isProtectedPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.protectedFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      window.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n\n}\n",
    "import { InjectionToken } from '@angular/core';\n\nexport const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');\nexport const PUBLIC_FALLBACK_PAGE_URI = new InjectionToken('PUBLIC_FALLBACK_PAGE_URI');\nexport const PROTECTED_FALLBACK_PAGE_URI = new InjectionToken('PROTECTED_FALLBACK_PAGE_URI');\n",
    "import { Observable } from 'rxjs/Observable';\nimport { first as _first } from 'rxjs/operator/first';\nimport { switchMap as _switchMap } from 'rxjs/operator/switchMap';\nimport { map as _map } from 'rxjs/operator/map';\nimport { _catch as __catch } from 'rxjs/operator/catch';\n\nexport function first<T>(obs: Observable<T>): Observable<T> {\n  return _first.call(obs);\n}\n\nexport function switchMap<T, R>(\n  obs: Observable<T>,\n  project: (value: T, index: number) => Observable<R>\n): Observable<R> {\n  return _switchMap.call(obs, project);\n}\n\nexport function map<T, R>(\n  obs: Observable<T>,\n  project: (value: T, index: number) => R\n): Observable<R> {\n  return _map.call(obs, project);\n}\n\nexport function _catch<T, R>(\n  obs: Observable<T>,\n  selector: (err: any, caught: Observable<T>) => Observable<R>\n): Observable<T | R> {\n  return __catch.call(obs, selector);\n}\n\nexport { _throw } from 'rxjs/observable/throw';\n",
    "import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * Essential service for authentication\n * @export\n */\nexport abstract class AuthService {\n\n  /**\n   * Check, if user already authorized.\n   *\n   * Should return Observable with true or false values\n   */\n  public abstract isAuthorized(): Observable<boolean>;\n\n  /**\n   * Get access token\n   *\n   * Should return access token in Observable from e.g.\n   * localStorage\n   */\n  public abstract getAccessToken(): Observable<string>;\n\n  /**\n   * Function, that should perform refresh token verifyTokenRequest\n   *\n   * Should be successfully completed so interceptor\n   * can execute pending requests or retry original one\n   */\n  public abstract refreshToken(): Observable<any>;\n\n  /**\n   * Function, checks response of failed request to determine,\n   * whether token be refreshed or not.\n   *\n   * Essentially checks status\n   */\n  public abstract refreshShouldHappen(response: HttpErrorResponse): boolean;\n\n  /**\n   * Verify that outgoing request is refresh-token,\n   * so interceptor won't intercept this request\n   */\n  public abstract verifyTokenRequest(url: string): boolean;\n\n  /**\n   * Add token to headers, dependent on server\n   * set-up, by default adds a bearer token.\n   * Called by interceptor.\n   *\n   * To change behavior, override this method.\n   */\n  public abstract getHeaders?(token: string): { [name: string]: string | string[] };\n}\n"
  ],
  "names": [
    "HTTP_INTERCEPTORS",
    "NgModule",
    "Injector",
    "Injectable",
    "switchMap",
    "first",
    "http",
    "_throw",
    "HttpClient",
    "map",
    "_catch",
    "Subject",
    "Router",
    "Inject",
    "router",
    "InjectionToken",
    "__catch",
    "_map",
    "_switchMap",
    "_first"
  ],
  "mappings": "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"
}
