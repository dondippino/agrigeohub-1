!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/core"),require("@ngx-formly/core"),require("@angular/forms"),require("rxjs"),require("@angular/common")):"function"==typeof define&&define.amd?define("@ngx-formly/bootstrap",["exports","@angular/core","@ngx-formly/core","@angular/forms","rxjs","@angular/common"],o):o((e["ngx-formly"]=e["ngx-formly"]||{},e["ngx-formly"].bootstrap={}),e.ng.core,e.core$1,e.ng.forms,e.rxjs,e.ng.common)}(this,function(e,o,t,n,r,l){"use strict";var i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,o){e.__proto__=o}||function(e,o){for(var t in o)o.hasOwnProperty(t)&&(e[t]=o[t])};function a(e,o){function t(){this.constructor=e}i(e,o),e.prototype=null===o?Object.create(o):(t.prototype=o.prototype,new t)}var p=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),o}(t.FieldType);p.decorators=[{type:o.Component,args:[{selector:"formly-field-checkbox",template:'\n    <label class="custom-control custom-checkbox">\n      <input type="checkbox" [formControl]="formControl"\n        [attr.invalid]="showError"\n        [indeterminate]="to.indeterminate && model[key] === undefined"\n        [formlyAttributes]="field" class="custom-control-input">\n        <span class="custom-control-label">\n          {{ to.label }}\n          <ng-container *ngIf="to.required && to.hideRequiredMarker !== true">*</ng-container>\n        </span>\n        <span class="custom-control-indicator"></span>\n    </label>\n  '}]}];var s=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),o.createControl=function(t,e){if(e.templateOptions.options instanceof r.Observable)throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");var o=e.templateOptions.options.reduce(function(e,o){return e[o.key]=new n.FormControl(t?t[o.key]:undefined),e},{});return new n.FormGroup(o,e.validators?e.validators.validation:undefined,e.asyncValidators?e.asyncValidators.validation:undefined)},o}(t.FieldType);s.decorators=[{type:o.Component,args:[{selector:"formly-field-multicheckbox",template:'\n    <div *ngFor="let option of to.options; let i = index;" class="checkbox">\n      <label class="custom-control custom-checkbox">\n        <input type="checkbox"\n          [value]="option.value"\n          [id]="id + \'_\' + i"\n          [formControl]="formControl.get(option.key)"\n          [formlyAttributes]="field" class="custom-control-input">\n        <span class="custom-control-label">{{ option.value }}</span>\n        <span class="custom-control-indicator"></span>\n      </label>\n    </div>\n  '}]}];var d=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),Object.defineProperty(o.prototype,"type",{get:function(){return this.to.type||"text"},enumerable:!0,configurable:!0}),o}(t.FieldType);d.decorators=[{type:o.Component,args:[{selector:"formly-field-input",template:'\n    <input *ngIf="type !== \'number\' else numberTmp" [type]="type" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    <ng-template #numberTmp>\n      <input type="number" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    </ng-template>\n  ',host:{"[class.d-inline-flex]":"to.addonLeft || to.addonRight","[class.custom-file]":"to.addonLeft || to.addonRight"}}]}];var c=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),o}(t.FieldType);c.decorators=[{type:o.Component,args:[{selector:"formly-field-radio",template:'\n    <div [formGroup]="form">\n      <div *ngFor="let option of to.options; let i = index;" class="radio">\n        <label class="custom-control custom-radio">\n          <input\n            [name]="id"\n            [id]="id + \'_\' + i"\n            type="radio"\n            [value]="option.label ? option.value : option.key"\n            [formControl]="formControl"\n            [formlyAttributes]="field" class="custom-control-input">\n\n          <span class="custom-control-label">{{ option.label ? option.label : option.value }}</span>\n          <span class="custom-control-indicator"></span>\n        </label>\n      </div>\n    </div>\n  '}]}];var u=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),o}(t.FieldType);u.decorators=[{type:o.Component,args:[{selector:"formly-field-textarea",template:'\n    <textarea [name]="key" [formControl]="formControl" [cols]="to.cols"\n      [rows]="to.rows" class="form-control" [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n    </textarea>\n  '}]}];var m=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),Object.defineProperty(o.prototype,"labelProp",{get:function(){return this.to.labelProp||"label"},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"valueProp",{get:function(){return this.to.valueProp||"value"},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"groupProp",{get:function(){return this.to.groupProp||"group"},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"selectOptions",{get:function(){var o=this;if(this.to.options instanceof r.Observable)return this.to.options;var t=[],n={};return this.to.options.map(function(e){e[o.groupProp]?n[e[o.groupProp]]?n[e[o.groupProp]].push(e):(n[e[o.groupProp]]=[e],t.push({label:e[o.groupProp],group:n[e[o.groupProp]]})):t.push(e)}),r.of(t)},enumerable:!0,configurable:!0}),o}(t.FieldType);m.decorators=[{type:o.Component,args:[{selector:"formly-field-select",template:'\n    <select *ngIf="to.multiple; else singleSelect" class="form-control"\n      [formControl]="formControl"\n      [class.is-invalid]="showError"\n      [multiple]="true"\n      [formlyAttributes]="field">\n        <ng-container *ngFor="let item of selectOptions | async">\n         <optgroup *ngIf="item.group" label="{{item.label}}">\n            <option *ngFor="let child of item.group" [value]="child[valueProp]" [disabled]="child.disabled">\n              {{ child[labelProp] }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [value]="item[valueProp]" [disabled]="item.disabled">{{ item[labelProp] }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class="form-control"\n        [formControl]="formControl"\n        [class.is-invalid]="showError"\n        [formlyAttributes]="field">\n        <option *ngIf="to.placeholder" value="">{{ to.placeholder }}</option>\n        <ng-container *ngFor="let item of selectOptions | async">\n          <optgroup *ngIf="item.group" label="{{item.label}}">\n            <option *ngFor="let child of item.group" [value]="child[valueProp]" [disabled]="child.disabled">\n              {{ child[labelProp] }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [value]="item[valueProp]" [disabled]="item.disabled">{{ item[labelProp] }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  '}]}];var f=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),o}(t.FieldWrapper);f.decorators=[{type:o.Component,args:[{selector:"formly-wrapper-fieldset",template:'\n    <div class="form-group" [class.has-error]="showError">\n      <ng-template #fieldComponent></ng-template>\n    </div>\n  '}]}],f.propDecorators={fieldComponent:[{type:o.ViewChild,args:["fieldComponent",{read:o.ViewContainerRef}]}]};var g=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),o}(t.FieldWrapper);g.decorators=[{type:o.Component,args:[{selector:"formly-wrapper-label",template:'\n    <label [attr.for]="id" class="form-control-label control-label" *ngIf="to.label">\n      {{ to.label }}\n      <ng-container *ngIf="to.required && to.hideRequiredMarker !== true">*</ng-container>\n    </label>\n    <ng-template #fieldComponent></ng-template>\n  '}]}],g.propDecorators={fieldComponent:[{type:o.ViewChild,args:["fieldComponent",{read:o.ViewContainerRef}]}]};var y=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),o}(t.FieldWrapper);y.decorators=[{type:o.Component,args:[{selector:"formly-wrapper-description",template:'\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf="to.description">\n      <small class="text-muted">{{ to.description }}</small>\n    </div>\n  '}]}],y.propDecorators={fieldComponent:[{type:o.ViewChild,args:["fieldComponent",{read:o.ViewContainerRef}]}]};var h=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),Object.defineProperty(o.prototype,"validationId",{get:function(){return this.field.id+"-message"},enumerable:!0,configurable:!0}),o}(t.FieldWrapper);h.decorators=[{type:o.Component,args:[{selector:"formly-wrapper-validation-messages",template:'\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf="showError">\n      <small class="text-danger invalid-feedback" [style.display]="\'block\'" role="alert" [id]="validationId">\n        <formly-validation-message [field]="field"></formly-validation-message>\n      </small>\n    </div>\n  '}]}],h.propDecorators={fieldComponent:[{type:o.ViewChild,args:["fieldComponent",{read:o.ViewContainerRef}]}]};var b=function(e){function o(){return null!==e&&e.apply(this,arguments)||this}return a(o,e),o.prototype.addonRightClick=function(e){this.to.addonRight.onClick&&this.to.addonRight.onClick(this.to,this,e)},o.prototype.addonLeftClick=function(e){this.to.addonLeft.onClick&&this.to.addonLeft.onClick(this.to,this,e)},o}(t.FieldWrapper);b.decorators=[{type:o.Component,args:[{selector:"formly-wrapper-addons",template:'\n    <div class="input-group">\n      <div class="input-group-addon input-group-prepend"\n        *ngIf="to.addonLeft"\n        [ngStyle]="{cursor: to.addonLeft.onClick ? \'pointer\' : \'inherit\'}"\n        (click)="addonLeftClick($event)">\n        <i class="input-group-text" [ngClass]="to.addonLeft.class" *ngIf="to.addonLeft.class"></i>\n        <span *ngIf="to.addonLeft.text" class="input-group-text">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class="input-group-addon input-group-append"\n        *ngIf="to.addonRight"\n        [ngStyle]="{cursor: to.addonRight.onClick ? \'pointer\' : \'inherit\'}"\n        (click)="addonRightClick($event)">\n        <i class="input-group-text" [ngClass]="to.addonRight.class" *ngIf="to.addonRight.class"></i>\n        <span *ngIf="to.addonRight.text" class="input-group-text">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  ',styles:["\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  "]}]}],b.propDecorators={fieldComponent:[{type:o.ViewChild,args:["fieldComponent",{read:o.ViewContainerRef}]}]};var v=function(){function e(){}return e.prototype.run=function(e){e.templateManipulators.postWrapper.push(function(e){return"description"})},e}(),C=function(){function e(){}return e.prototype.run=function(e){e.templateManipulators.postWrapper.push(function(e){return"validation-message"})},e}(),x=function(){function e(){}return e.prototype.run=function(e){e.templateManipulators.postWrapper.push(function(e){if(e&&e.templateOptions&&(e.templateOptions.addonLeft||e.templateOptions.addonRight))return"addons"})},e}(),F=[d,p,c,m,u,s,g,y,h,f,b],w={types:[{name:"input",component:d,wrappers:["fieldset","label"]},{name:"checkbox",component:p,wrappers:["fieldset"],defaultOptions:{templateOptions:{indeterminate:!0}}},{name:"radio",component:c,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}},{name:"select",component:m,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}},{name:"textarea",component:u,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{cols:1,rows:1}}},{name:"multicheckbox",component:s,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}}],wrappers:[{name:"label",component:g},{name:"description",component:y},{name:"validation-message",component:h},{name:"fieldset",component:f},{name:"addons",component:b}],manipulators:[{"class":v,method:"run"},{"class":C,method:"run"},{"class":x,method:"run"}]},k=function(){};k.decorators=[{type:o.NgModule,args:[{declarations:F,imports:[l.CommonModule,n.ReactiveFormsModule,t.FormlyModule.forRoot(w)]}]}],e.FormlyBootstrapModule=k,e.FormlyFieldCheckbox=p,e.FormlyFieldMultiCheckbox=s,e.FormlyFieldInput=d,e.FormlyFieldRadio=c,e.FormlyFieldTextArea=u,e.FormlyFieldSelect=m,e.FormlyWrapperFieldset=f,e.FormlyWrapperLabel=g,e.FormlyWrapperDescription=y,e.FormlyWrapperValidationMessages=h,e.ɵb=w,e.ɵa=F,e.ɵf=x,e.ɵd=v,e.ɵe=C,e.ɵc=b,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-bootstrap.umd.min.js.map
