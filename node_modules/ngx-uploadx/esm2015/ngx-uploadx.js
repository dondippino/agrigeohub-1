import { Injectable, Directive, ElementRef, Renderer2, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 *  Read only upload stream events
 * @record
 */

/**
 * @record
 */

/**
 * Global Options
 */
class UploadxOptions {
}
/**
 * \@inner
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  Exponential Backoff Retries
 */
class BackoffRetry {
    /**
     *
     * Creates an instance of BackoffRetry.
     * \@default
     * minInterval = 1000 ms
     * maxInterval = minInterval * 120 (2 min)
     * k = 2
     * @param {?=} minInterval
     * @param {?=} maxInterval
     * @param {?=} k
     */
    constructor(minInterval = 1000, maxInterval = minInterval * 120, k = 2) {
        this.minInterval = minInterval;
        this.maxInterval = maxInterval;
        this.k = k;
        this.delay = this.minInterval;
    }
    /**
     * Delay Retry
     * @return {?}
     */
    wait() {
        return new Promise(resolve => {
            setTimeout(resolve, this.delay + Math.floor(Math.random() * this.minInterval));
            this.delay = Math.min(this.delay * this.k, this.maxInterval);
        });
    }
    /**
     * Reset Retry Interval
     * @return {?}
     */
    reset() {
        this.delay = this.minInterval;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
let XHRFactory = (() => {
    let /** @type {?} */ stack = Array(1).fill(createXHR());
    /**
     * @return {?}
     */
    function createXHR() {
        return new XMLHttpRequest();
    }
    return {
        release: (xhr) => {
            xhr.onreadystatechange = null;
            xhr.onerror = null;
            xhr.onload = null;
            xhr.upload.onprogress = null;
            stack.push(xhr);
        },
        /**
         * @return {?}
         */
        getInstance() {
            if (!stack.length) {
                return createXHR();
            }
            else {
                return stack.pop();
            }
        },
        /**
         * @return {?}
         */
        get size() {
            return stack.length;
        },
        /**
         * @param {?} s
         * @return {?}
         */
        set size(s) {
            stack = Array(s).fill(createXHR());
        }
    };
})();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const noop = () => { };
/**
 * Implements XHR/CORS Resumable Upload
 * @see
 * https://developers.google.com/drive/v3/web/resumable-upload
 * https://developer.vimeo.com/api/upload/videos#resumable-upload
 */
class Uploader {
    /**
     * Creates an instance of Uploader.
     * @param {?} file
     * @param {?} options
     */
    constructor(file, options) {
        this.file = file;
        this.options = options;
        this.uploadId = Math.random()
            .toString(36)
            .substring(2, 15);
        this.name = file.name;
        this.size = file.size;
        this.mimeType = file.type || 'application/octet-stream';
        this.status = 'added';
        this.retry = new BackoffRetry();
    }
    /**
     * Set individual file options and add to queue
     * @param {?=} item
     * @return {?}
     */
    configure(item = {}) {
        if (this.status === 'added') {
            const { metadata, headers } = item;
            this.metadata = Object.assign({ name: this.name, mimeType: this.mimeType }, this.options.metadata, metadata);
            this.headers =
                this.options.headers instanceof Function
                    ? this.options.headers(this.file)
                    : Object.assign({}, this.options.headers, headers);
            this.url = this.options.url;
            this.method = this.options.method;
        }
        this.status = 'queue';
    }
    /**
     * @param {?} s
     * @return {?}
     */
    set status(s) {
        this._status = s;
        this.notifyState();
        if (s === 'cancelled' || s === 'paused') {
            this.abort();
        }
    }
    /**
     * @return {?}
     */
    get status() {
        return this._status;
    }
    /**
     * Emit current state
     * @return {?}
     */
    notifyState() {
        const /** @type {?} */ state = {
            file: this.file,
            name: this.name,
            progress: this.progress,
            remaining: this.remaining,
            response: this.response,
            size: this.size,
            speed: this.speed,
            status: this._status,
            uploadId: this.uploadId,
            URI: this.url
        };
        // tick for control events detect
        setTimeout(() => {
            this.options.subj.next(state);
        });
    }
    /**
     * @param {?} xhr
     * @return {?}
     */
    setHeaders(xhr) {
        if (this.headers) {
            Object.keys(this.headers).forEach(key => xhr.setRequestHeader(key, this.headers[key]));
        }
    }
    /**
     * Initiate upload
     * @return {?}
     */
    upload() {
        if (this.status === 'added') {
            this.configure();
        }
        this.status = 'uploading';
        if (this.progress > 0) {
            return this.resume();
        }
        const /** @type {?} */ xhr = new XMLHttpRequest();
        xhr.responseType = 'json';
        xhr.open(this.method, this.options.url, true);
        if (!!this.options.withCredentials) {
            xhr.withCredentials = true;
        }
        this.setHeaders(xhr);
        this.options.token
            ? xhr.setRequestHeader('Authorization', 'Bearer ' + this.options.token)
            : noop();
        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        xhr.setRequestHeader('X-Upload-Content-Length', this.size.toString());
        xhr.setRequestHeader('X-Upload-Content-Type', this.mimeType);
        xhr.onload = () => {
            if (xhr.status < 400 && xhr.status > 199) {
                // get secure upload link
                this.url = xhr.getResponseHeader('Location');
                this.startTime = this.startTime || new Date().getTime();
                this.sendFile();
            }
            else {
                this.response = xhr.response;
                this.status = 'error';
            }
        };
        xhr.send(JSON.stringify(this.metadata));
    }
    /**
     * Request upload state after 5xx errors or network failures
     * @return {?}
     */
    resume() {
        const /** @type {?} */ xhr = XHRFactory.getInstance();
        if (xhr.responseType !== 'json') {
            xhr.responseType = 'json';
        }
        xhr.open('PUT', this.url, true);
        if (!!this.options.withCredentials) {
            xhr.withCredentials = true;
        }
        xhr.setRequestHeader('Content-Range', `bytes */${this.size}`);
        xhr.setRequestHeader('Content-Type', this.mimeType);
        this.setHeaders(xhr);
        const /** @type {?} */ onDataSendError = () => {
            // 5xx errors or network failures
            if (xhr.status > 499 || !xhr.status) {
                XHRFactory.release(xhr);
                this.retry.wait().then(() => this.resume());
            }
            else {
                // 4xx errors
                this.response = xhr.response || {
                    error: {
                        code: xhr.status,
                        message: xhr.statusText
                    }
                };
                this.status = 'error';
                XHRFactory.release(xhr);
                this.options.nextFile();
            }
        };
        const /** @type {?} */ onDataSendSuccess = () => {
            if (xhr.status === 200 || xhr.status === 201) {
                this.progress = 100;
                this.response = xhr.response;
                this.status = 'complete';
                XHRFactory.release(xhr);
                this.options.nextFile();
            }
            else if (xhr.status && xhr.status < 400) {
                const /** @type {?} */ range = +xhr.getResponseHeader('Range').split('-')[1] + 1;
                this.retry.reset();
                XHRFactory.release(xhr);
                this.abort = this.sendFile(range);
            }
            else {
                onDataSendError();
            }
        };
        xhr.onerror = onDataSendError;
        xhr.onload = onDataSendSuccess;
        xhr.send();
    }
    /**
     * Content upload
     * @param {?=} start
     * @return {?}
     */
    sendFile(start = 0) {
        if (this.status === 'cancelled' || this.status === 'paused') {
            return;
        }
        let /** @type {?} */ end = this.options.chunkSize
            ? start + this.options.chunkSize
            : this.size;
        end = end > this.size ? this.size : end;
        const /** @type {?} */ chunk = this.file.slice(start, end);
        const /** @type {?} */ xhr = XHRFactory.getInstance();
        if (xhr.responseType !== 'json') {
            xhr.responseType = 'json';
        }
        xhr.open('PUT', this.url, true);
        if (!!this.options.withCredentials) {
            xhr.withCredentials = true;
        }
        xhr.setRequestHeader('Content-Range', `bytes ${start}-${end - 1}/${this.size}`);
        xhr.setRequestHeader('Content-Type', this.mimeType);
        this.setHeaders(xhr);
        const /** @type {?} */ updateProgress = (pEvent) => {
            const /** @type {?} */ uploaded = pEvent.lengthComputable
                ? start + (end - start) * (pEvent.loaded / pEvent.total)
                : start;
            this.progress = +(uploaded / this.size * 100).toFixed(2);
            const /** @type {?} */ now = new Date().getTime();
            this.speed = Math.round(uploaded / (now - this.startTime) * 1000);
            this.remaining = Math.ceil((this.size - uploaded) / this.speed);
            this.notifyState();
        };
        const /** @type {?} */ onDataSendError = () => {
            // 5xx errors or network failures
            if (xhr.status > 499 || !xhr.status) {
                XHRFactory.release(xhr);
                this.retry.wait().then(() => this.resume());
            }
            else {
                // 4xx errors
                this.response = xhr.response || {
                    error: {
                        code: +xhr.status,
                        message: xhr.statusText
                    }
                };
                this.status = 'error';
                XHRFactory.release(xhr);
                this.options.nextFile();
            }
        };
        const /** @type {?} */ onDataSendSuccess = () => {
            if (xhr.status === 200 || xhr.status === 201) {
                this.progress = 100;
                this.response = xhr.response;
                this.status = 'complete';
                XHRFactory.release(xhr);
                this.options.nextFile();
            }
            else if (xhr.status && xhr.status < 400) {
                const /** @type {?} */ range = +xhr.getResponseHeader('Range').split('-')[1] + 1;
                this.retry.reset();
                XHRFactory.release(xhr);
                // send next chunk
                this.abort = this.sendFile(range);
            }
            else {
                onDataSendError();
            }
        };
        xhr.onerror = onDataSendError;
        xhr.onload = onDataSendSuccess;
        xhr.upload.onprogress = updateProgress;
        xhr.send(chunk);
        return () => {
            xhr.abort();
        };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *
 */
class UploadxService {
    constructor() {
        this.subj = new Subject();
        this.queue = [];
        this.concurrency = 2;
        this.autoUpload = true;
    }
    /**
     * @return {?}
     */
    get uploaderOptions() {
        return {
            method: this.options.method || 'POST',
            url: this.options.url || '/upload/',
            headers: this.options.headers,
            token: this.options.token,
            chunkSize: this.options.chunkSize || 0,
            withCredentials: this.options.withCredentials || false,
            subj: this.subj,
            nextFile: () => this.processQueue()
        };
    }
    /**
     * Set global module options
     * @param {?} options
     * @return {?}
     */
    init(options) {
        this.options = options;
        this.concurrency = options.concurrency || this.concurrency;
        this.autoUpload = options.autoUpload || false;
        return this.subj.asObservable();
    }
    /**
     *
     * Create Uploader and add to the queue
     * @param {?} fileList
     * @return {?}
     */
    handleFileList(fileList) {
        for (let /** @type {?} */ i = 0; i < fileList.length; i++) {
            const /** @type {?} */ uploader = new Uploader(fileList.item(i), this.uploaderOptions);
            this.queue.push(uploader);
        }
        if (this.autoUpload) {
            this.queue.forEach(upload => {
                upload.configure();
            });
            this.processQueue();
        }
    }
    /**
     * Control upload status
     * \@example
     * this.uploadService.control({ action: 'pauseAll' });
     *
     * @param {?} event
     * @return {?}
     */
    control(event) {
        switch (event.action) {
            case 'cancelAll':
                this.queue
                    .filter(f => f.status !== 'complete')
                    .map(f => (f.status = 'cancelled'));
                break;
            case 'pauseAll':
                this.queue
                    .filter(f => f.status !== 'complete')
                    .map(f => (f.status = 'paused'));
                break;
            case 'uploadAll':
                this.queue
                    .filter(f => f.status !== 'complete' && f.status !== 'uploading')
                    .map(f => (f.status = 'queue'));
                this.processQueue();
                break;
            case 'upload':
                const /** @type {?} */ uploadId = event.uploadId || event.itemOptions.uploadId;
                const /** @type {?} */ target = this.queue.find(f => f.uploadId === uploadId);
                target.configure(event.itemOptions);
                this.processQueue();
                break;
            case 'cancel':
                this.queue.find(f => f.uploadId === event.uploadId).status =
                    'cancelled';
                break;
            case 'pause':
                this.queue.find(f => f.uploadId === event.uploadId).status = 'paused';
                break;
            default:
                break;
        }
    }
    /**
     * Queue management
     * @return {?}
     */
    processQueue() {
        const /** @type {?} */ running = this.queue.filter((uploader) => uploader.status === 'uploading');
        const /** @type {?} */ completed = this.queue.findIndex((uploader) => uploader.status === 'complete');
        if (completed !== -1) {
            this.queue.splice(completed, 1);
        }
        this.queue
            .filter((uploader) => uploader.status === 'queue')
            .slice(0, this.concurrency - running.length)
            .forEach((uploader) => {
            uploader.upload();
        });
    }
}
UploadxService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UploadxDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} uploadService
     */
    constructor(elementRef, renderer, uploadService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.uploadService = uploadService;
        this.uploadxState = new EventEmitter();
        this.fileListener = () => {
            if (this.elementRef.nativeElement.files) {
                this.uploadService.handleFileList(this.elementRef.nativeElement.files);
            }
        };
    }
    /**
     * @param {?} ctrlEvent
     * @return {?}
     */
    set uploadxAction(ctrlEvent) {
        if (ctrlEvent && this.uploadService) {
            this.uploadService.control(ctrlEvent);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.uploadx) {
            if (this.uploadx.allowedTypes) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'accept', this.uploadx.allowedTypes);
            }
            this.uploadService.init(this.uploadx);
        }
        this.uploadxState.emit(/** @type {?} */ (this.uploadService.subj.asObservable()));
        this.listenerFn = this.renderer.listen(this.elementRef.nativeElement, 'change', this.fileListener);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.listenerFn) {
            this.listenerFn();
        }
    }
}
UploadxDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[uploadx]'
            },] },
];
/** @nocollapse */
UploadxDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: UploadxService, },
];
UploadxDirective.propDecorators = {
    "uploadxState": [{ type: Output },],
    "uploadx": [{ type: Input, args: ['uploadx',] },],
    "uploadxAction": [{ type: Input, args: ['uploadxAction',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UploadxModule {
}
UploadxModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [UploadxDirective],
                exports: [UploadxDirective],
                providers: [UploadxService]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { UploadxOptions, UploadxService, UploadxModule, UploadxDirective as ɵa };
//# sourceMappingURL=ngx-uploadx.js.map
