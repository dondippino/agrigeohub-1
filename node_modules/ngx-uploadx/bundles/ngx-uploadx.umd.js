(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Subject'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define('ngx-uploadx', ['exports', '@angular/core', 'rxjs/Subject', '@angular/common'], factory) :
	(factory((global['ngx-uploadx'] = {}),global.ng.core,global.Rx,global.ng.common));
}(this, (function (exports,core,Subject,common) { 'use strict';

var UploadxOptions = /** @class */ (function () {
    function UploadxOptions() {
    }
    return UploadxOptions;
}());
var BackoffRetry = /** @class */ (function () {
    function BackoffRetry(minInterval, maxInterval, k) {
        if (minInterval === void 0) { minInterval = 1000; }
        if (maxInterval === void 0) { maxInterval = minInterval * 120; }
        if (k === void 0) { k = 2; }
        this.minInterval = minInterval;
        this.maxInterval = maxInterval;
        this.k = k;
        this.delay = this.minInterval;
    }
    BackoffRetry.prototype.wait = function () {
        var _this = this;
        return new Promise(function (resolve) {
            setTimeout(resolve, _this.delay + Math.floor(Math.random() * _this.minInterval));
            _this.delay = Math.min(_this.delay * _this.k, _this.maxInterval);
        });
    };
    BackoffRetry.prototype.reset = function () {
        this.delay = this.minInterval;
    };
    return BackoffRetry;
}());
var XHRFactory = (function () {
    var stack = Array(1).fill(createXHR());
    function createXHR() {
        return new XMLHttpRequest();
    }
    return {
        release: function (xhr) {
            xhr.onreadystatechange = null;
            xhr.onerror = null;
            xhr.onload = null;
            xhr.upload.onprogress = null;
            stack.push(xhr);
        },
        getInstance: function () {
            if (!stack.length) {
                return createXHR();
            }
            else {
                return stack.pop();
            }
        },
        get size() {
            return stack.length;
        },
        set size(s) {
            stack = Array(s).fill(createXHR());
        }
    };
})();
var noop = function () { };
var Uploader = /** @class */ (function () {
    function Uploader(file, options) {
        this.file = file;
        this.options = options;
        this.uploadId = Math.random()
            .toString(36)
            .substring(2, 15);
        this.name = file.name;
        this.size = file.size;
        this.mimeType = file.type || 'application/octet-stream';
        this.status = 'added';
        this.retry = new BackoffRetry();
    }
    Uploader.prototype.configure = function (item) {
        if (item === void 0) { item = {}; }
        if (this.status === 'added') {
            var metadata = item.metadata, headers = item.headers;
            this.metadata = Object.assign({ name: this.name, mimeType: this.mimeType }, this.options.metadata, metadata);
            this.headers =
                this.options.headers instanceof Function
                    ? this.options.headers(this.file)
                    : Object.assign({}, this.options.headers, headers);
            this.url = this.options.url;
            this.method = this.options.method;
        }
        this.status = 'queue';
    };
    Object.defineProperty(Uploader.prototype, "status", {
        get: function () {
            return this._status;
        },
        set: function (s) {
            this._status = s;
            this.notifyState();
            if (s === 'cancelled' || s === 'paused') {
                this.abort();
            }
        },
        enumerable: true,
        configurable: true
    });
    Uploader.prototype.notifyState = function () {
        var _this = this;
        var state = {
            file: this.file,
            name: this.name,
            progress: this.progress,
            remaining: this.remaining,
            response: this.response,
            size: this.size,
            speed: this.speed,
            status: this._status,
            uploadId: this.uploadId,
            URI: this.url
        };
        setTimeout(function () {
            _this.options.subj.next(state);
        });
    };
    Uploader.prototype.setHeaders = function (xhr) {
        var _this = this;
        if (this.headers) {
            Object.keys(this.headers).forEach(function (key) { return xhr.setRequestHeader(key, _this.headers[key]); });
        }
    };
    Uploader.prototype.upload = function () {
        var _this = this;
        if (this.status === 'added') {
            this.configure();
        }
        this.status = 'uploading';
        if (this.progress > 0) {
            return this.resume();
        }
        var xhr = new XMLHttpRequest();
        xhr.responseType = 'json';
        xhr.open(this.method, this.options.url, true);
        if (!!this.options.withCredentials) {
            xhr.withCredentials = true;
        }
        this.setHeaders(xhr);
        this.options.token
            ? xhr.setRequestHeader('Authorization', 'Bearer ' + this.options.token)
            : noop();
        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        xhr.setRequestHeader('X-Upload-Content-Length', this.size.toString());
        xhr.setRequestHeader('X-Upload-Content-Type', this.mimeType);
        xhr.onload = function () {
            if (xhr.status < 400 && xhr.status > 199) {
                _this.url = xhr.getResponseHeader('Location');
                _this.startTime = _this.startTime || new Date().getTime();
                _this.sendFile();
            }
            else {
                _this.response = xhr.response;
                _this.status = 'error';
            }
        };
        xhr.send(JSON.stringify(this.metadata));
    };
    Uploader.prototype.resume = function () {
        var _this = this;
        var xhr = XHRFactory.getInstance();
        if (xhr.responseType !== 'json') {
            xhr.responseType = 'json';
        }
        xhr.open('PUT', this.url, true);
        if (!!this.options.withCredentials) {
            xhr.withCredentials = true;
        }
        xhr.setRequestHeader('Content-Range', "bytes */" + this.size);
        xhr.setRequestHeader('Content-Type', this.mimeType);
        this.setHeaders(xhr);
        var onDataSendError = function () {
            if (xhr.status > 499 || !xhr.status) {
                XHRFactory.release(xhr);
                _this.retry.wait().then(function () { return _this.resume(); });
            }
            else {
                _this.response = xhr.response || {
                    error: {
                        code: xhr.status,
                        message: xhr.statusText
                    }
                };
                _this.status = 'error';
                XHRFactory.release(xhr);
                _this.options.nextFile();
            }
        };
        var onDataSendSuccess = function () {
            if (xhr.status === 200 || xhr.status === 201) {
                _this.progress = 100;
                _this.response = xhr.response;
                _this.status = 'complete';
                XHRFactory.release(xhr);
                _this.options.nextFile();
            }
            else if (xhr.status && xhr.status < 400) {
                var range = +xhr.getResponseHeader('Range').split('-')[1] + 1;
                _this.retry.reset();
                XHRFactory.release(xhr);
                _this.abort = _this.sendFile(range);
            }
            else {
                onDataSendError();
            }
        };
        xhr.onerror = onDataSendError;
        xhr.onload = onDataSendSuccess;
        xhr.send();
    };
    Uploader.prototype.sendFile = function (start) {
        var _this = this;
        if (start === void 0) { start = 0; }
        if (this.status === 'cancelled' || this.status === 'paused') {
            return;
        }
        var end = this.options.chunkSize
            ? start + this.options.chunkSize
            : this.size;
        end = end > this.size ? this.size : end;
        var chunk = this.file.slice(start, end);
        var xhr = XHRFactory.getInstance();
        if (xhr.responseType !== 'json') {
            xhr.responseType = 'json';
        }
        xhr.open('PUT', this.url, true);
        if (!!this.options.withCredentials) {
            xhr.withCredentials = true;
        }
        xhr.setRequestHeader('Content-Range', "bytes " + start + "-" + (end - 1) + "/" + this.size);
        xhr.setRequestHeader('Content-Type', this.mimeType);
        this.setHeaders(xhr);
        var updateProgress = function (pEvent) {
            var uploaded = pEvent.lengthComputable
                ? start + (end - start) * (pEvent.loaded / pEvent.total)
                : start;
            _this.progress = +(uploaded / _this.size * 100).toFixed(2);
            var now = new Date().getTime();
            _this.speed = Math.round(uploaded / (now - _this.startTime) * 1000);
            _this.remaining = Math.ceil((_this.size - uploaded) / _this.speed);
            _this.notifyState();
        };
        var onDataSendError = function () {
            if (xhr.status > 499 || !xhr.status) {
                XHRFactory.release(xhr);
                _this.retry.wait().then(function () { return _this.resume(); });
            }
            else {
                _this.response = xhr.response || {
                    error: {
                        code: +xhr.status,
                        message: xhr.statusText
                    }
                };
                _this.status = 'error';
                XHRFactory.release(xhr);
                _this.options.nextFile();
            }
        };
        var onDataSendSuccess = function () {
            if (xhr.status === 200 || xhr.status === 201) {
                _this.progress = 100;
                _this.response = xhr.response;
                _this.status = 'complete';
                XHRFactory.release(xhr);
                _this.options.nextFile();
            }
            else if (xhr.status && xhr.status < 400) {
                var range = +xhr.getResponseHeader('Range').split('-')[1] + 1;
                _this.retry.reset();
                XHRFactory.release(xhr);
                _this.abort = _this.sendFile(range);
            }
            else {
                onDataSendError();
            }
        };
        xhr.onerror = onDataSendError;
        xhr.onload = onDataSendSuccess;
        xhr.upload.onprogress = updateProgress;
        xhr.send(chunk);
        return function () {
            xhr.abort();
        };
    };
    return Uploader;
}());
var UploadxService = /** @class */ (function () {
    function UploadxService() {
        this.subj = new Subject.Subject();
        this.queue = [];
        this.concurrency = 2;
        this.autoUpload = true;
    }
    Object.defineProperty(UploadxService.prototype, "uploaderOptions", {
        get: function () {
            var _this = this;
            return {
                method: this.options.method || 'POST',
                url: this.options.url || '/upload/',
                headers: this.options.headers,
                token: this.options.token,
                chunkSize: this.options.chunkSize || 0,
                withCredentials: this.options.withCredentials || false,
                subj: this.subj,
                nextFile: function () { return _this.processQueue(); }
            };
        },
        enumerable: true,
        configurable: true
    });
    UploadxService.prototype.init = function (options) {
        this.options = options;
        this.concurrency = options.concurrency || this.concurrency;
        this.autoUpload = options.autoUpload || false;
        return this.subj.asObservable();
    };
    UploadxService.prototype.handleFileList = function (fileList) {
        for (var i = 0; i < fileList.length; i++) {
            var uploader = new Uploader(fileList.item(i), this.uploaderOptions);
            this.queue.push(uploader);
        }
        if (this.autoUpload) {
            this.queue.forEach(function (upload) {
                upload.configure();
            });
            this.processQueue();
        }
    };
    UploadxService.prototype.control = function (event) {
        switch (event.action) {
            case 'cancelAll':
                this.queue
                    .filter(function (f) { return f.status !== 'complete'; })
                    .map(function (f) { return (f.status = 'cancelled'); });
                break;
            case 'pauseAll':
                this.queue
                    .filter(function (f) { return f.status !== 'complete'; })
                    .map(function (f) { return (f.status = 'paused'); });
                break;
            case 'uploadAll':
                this.queue
                    .filter(function (f) { return f.status !== 'complete' && f.status !== 'uploading'; })
                    .map(function (f) { return (f.status = 'queue'); });
                this.processQueue();
                break;
            case 'upload':
                var uploadId_1 = event.uploadId || event.itemOptions.uploadId;
                var target = this.queue.find(function (f) { return f.uploadId === uploadId_1; });
                target.configure(event.itemOptions);
                this.processQueue();
                break;
            case 'cancel':
                this.queue.find(function (f) { return f.uploadId === event.uploadId; }).status =
                    'cancelled';
                break;
            case 'pause':
                this.queue.find(function (f) { return f.uploadId === event.uploadId; }).status = 'paused';
                break;
            default:
                break;
        }
    };
    UploadxService.prototype.processQueue = function () {
        var running = this.queue.filter(function (uploader) { return uploader.status === 'uploading'; });
        var completed = this.queue.findIndex(function (uploader) { return uploader.status === 'complete'; });
        if (completed !== -1) {
            this.queue.splice(completed, 1);
        }
        this.queue
            .filter(function (uploader) { return uploader.status === 'queue'; })
            .slice(0, this.concurrency - running.length)
            .forEach(function (uploader) {
            uploader.upload();
        });
    };
    return UploadxService;
}());
UploadxService.decorators = [
    { type: core.Injectable },
];
var UploadxDirective = /** @class */ (function () {
    function UploadxDirective(elementRef, renderer, uploadService) {
        var _this = this;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.uploadService = uploadService;
        this.uploadxState = new core.EventEmitter();
        this.fileListener = function () {
            if (_this.elementRef.nativeElement.files) {
                _this.uploadService.handleFileList(_this.elementRef.nativeElement.files);
            }
        };
    }
    Object.defineProperty(UploadxDirective.prototype, "uploadxAction", {
        set: function (ctrlEvent) {
            if (ctrlEvent && this.uploadService) {
                this.uploadService.control(ctrlEvent);
            }
        },
        enumerable: true,
        configurable: true
    });
    UploadxDirective.prototype.ngOnInit = function () {
        if (this.uploadx) {
            if (this.uploadx.allowedTypes) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'accept', this.uploadx.allowedTypes);
            }
            this.uploadService.init(this.uploadx);
        }
        this.uploadxState.emit((this.uploadService.subj.asObservable()));
        this.listenerFn = this.renderer.listen(this.elementRef.nativeElement, 'change', this.fileListener);
    };
    UploadxDirective.prototype.ngOnDestroy = function () {
        if (this.listenerFn) {
            this.listenerFn();
        }
    };
    return UploadxDirective;
}());
UploadxDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[uploadx]'
            },] },
];
UploadxDirective.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: UploadxService, },
]; };
UploadxDirective.propDecorators = {
    "uploadxState": [{ type: core.Output },],
    "uploadx": [{ type: core.Input, args: ['uploadx',] },],
    "uploadxAction": [{ type: core.Input, args: ['uploadxAction',] },],
};
var UploadxModule = /** @class */ (function () {
    function UploadxModule() {
    }
    return UploadxModule;
}());
UploadxModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [UploadxDirective],
                exports: [UploadxDirective],
                providers: [UploadxService]
            },] },
];

exports.UploadxOptions = UploadxOptions;
exports.UploadxService = UploadxService;
exports.UploadxModule = UploadxModule;
exports.ɵa = UploadxDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-uploadx.umd.js.map
