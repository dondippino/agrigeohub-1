{
  "version": 3,
  "file": "ngx-uploadx.umd.js",
  "sources": [
    "ng://ngx-uploadx/out/uploadx.module.ts",
    "ng://ngx-uploadx/out/uploadx.directive.ts",
    "ng://ngx-uploadx/out/uploadx.service.ts",
    "ng://ngx-uploadx/out/uploader.ts",
    "ng://ngx-uploadx/out/xhrfactory.ts",
    "ng://ngx-uploadx/out/backoffRetry.ts",
    "ng://ngx-uploadx/out/interfaces.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UploadxDirective } from './uploadx.directive';\nimport { UploadxService } from './uploadx.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UploadxDirective],\n  exports: [UploadxDirective],\n  providers: [UploadxService]\n})\nexport class UploadxModule { }\n",
    "import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  OnInit,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { UploadxOptions, UploadState, UploadxControlEvent } from './interfaces';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[uploadx]'\n})\nexport class UploadxDirective implements OnInit, OnDestroy {\n  listenerFn: () => void;\n  @Output() uploadxState = new EventEmitter();\n  @Input('uploadx') uploadx: UploadxOptions;\n  @Input('uploadxAction')\n  set uploadxAction(ctrlEvent: UploadxControlEvent) {\n    if (ctrlEvent && this.uploadService) {\n      this.uploadService.control(ctrlEvent);\n    }\n  }\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private uploadService: UploadxService\n  ) { }\n\n  ngOnInit() {\n    if (this.uploadx) {\n      if (this.uploadx.allowedTypes) {\n        this.renderer.setAttribute(\n          this.elementRef.nativeElement,\n          'accept',\n          this.uploadx.allowedTypes\n        );\n      }\n      this.uploadService.init(this.uploadx);\n    }\n    this.uploadxState.emit(\n      <Observable<UploadState>>this.uploadService.subj.asObservable()\n    );\n    this.listenerFn = this.renderer.listen(\n      this.elementRef.nativeElement, 'change', this.fileListener\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.listenerFn) {\n      this.listenerFn();\n    }\n  }\n\n  fileListener = () => {\n    if (this.elementRef.nativeElement.files) {\n      this.uploadService.handleFileList(this.elementRef.nativeElement.files);\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport {\n  UploadxOptions,\n  UploadState,\n  UploadxControlEvent,\n  UploaderOptions\n} from './interfaces';\nimport { Uploader } from './uploader';\n/**\n *\n */\n@Injectable()\nexport class UploadxService {\n  subj: Subject<UploadState> = new Subject();\n  private queue: Uploader[] = [];\n  private concurrency = 2;\n  private autoUpload = true;\n  private options: UploadxOptions;\n\n  get uploaderOptions(): UploaderOptions {\n    return {\n      method: this.options.method || 'POST',\n      url: this.options.url || '/upload/',\n      headers: this.options.headers,\n      token: this.options.token,\n      chunkSize: this.options.chunkSize || 0,\n      withCredentials: this.options.withCredentials || false,\n      subj: this.subj,\n      nextFile: () => this.processQueue()\n    };\n  }\n  /**\n   * Set global module options\n   */\n  init(options: UploadxOptions): Observable<UploadState> {\n    this.options = options;\n    this.concurrency = options.concurrency || this.concurrency;\n    this.autoUpload = options.autoUpload || false;\n    return this.subj.asObservable();\n  }\n  /**\n   *\n   * Create Uploader and add to the queue\n   */\n  handleFileList(fileList: FileList) {\n    for (let i = 0; i < fileList.length; i++) {\n      const uploader: Uploader = new Uploader(\n        fileList.item(i),\n        this.uploaderOptions\n      );\n      this.queue.push(uploader);\n    }\n    if (this.autoUpload) {\n      this.queue.forEach(upload => {\n        upload.configure();\n      });\n      this.processQueue();\n    }\n  }\n  /**\n   * Control upload status\n   * @example\n   * this.uploadService.control({ action: 'pauseAll' });\n   *\n   */\n  control(event: UploadxControlEvent) {\n    switch (event.action) {\n      case 'cancelAll':\n        this.queue\n          .filter(f => f.status !== 'complete')\n          .map(f => (f.status = 'cancelled'));\n        break;\n      case 'pauseAll':\n        this.queue\n          .filter(f => f.status !== 'complete')\n          .map(f => (f.status = 'paused'));\n        break;\n      case 'uploadAll':\n        this.queue\n          .filter(f => f.status !== 'complete' && f.status !== 'uploading')\n          .map(f => (f.status = 'queue'));\n        this.processQueue();\n        break;\n      case 'upload':\n        const uploadId = event.uploadId || event.itemOptions.uploadId;\n        const target = this.queue.find(f => f.uploadId === uploadId);\n        target.configure(event.itemOptions);\n        this.processQueue();\n        break;\n      case 'cancel':\n        this.queue.find(f => f.uploadId === event.uploadId).status =\n          'cancelled';\n        break;\n      case 'pause':\n        this.queue.find(f => f.uploadId === event.uploadId).status = 'paused';\n        break;\n      default:\n        break;\n    }\n  }\n  /**\n   * Queue management\n   */\n  private processQueue() {\n    const running = this.queue.filter(\n      (uploader: Uploader) => uploader.status === 'uploading'\n    );\n\n    const completed = this.queue.findIndex(\n      (uploader: Uploader) => uploader.status === 'complete'\n    );\n    if (completed !== -1) {\n      this.queue.splice(completed, 1);\n    }\n    this.queue\n      .filter((uploader: Uploader) => uploader.status === 'queue')\n      .slice(0, this.concurrency - running.length)\n      .forEach((uploader: Uploader) => {\n        uploader.upload();\n      });\n  }\n}\n",
    "import { Subject } from 'rxjs/Subject';\n\nimport { BackoffRetry } from './backoffRetry';\nimport { XHRFactory } from './xhrfactory';\nimport {\n  UploadStatus,\n  UploadItem,\n  UploaderOptions,\n  UploadState\n} from './interfaces';\n\nconst noop = () => {};\n/**\n * Implements XHR/CORS Resumable Upload\n * @see\n * https://developers.google.com/drive/v3/web/resumable-upload\n * https://developer.vimeo.com/api/upload/videos#resumable-upload\n */\nexport class Uploader implements UploaderOptions {\n  headers: any;\n  metadata: any;\n  method: string;\n  mimeType: string;\n  name: string;\n  progress: number;\n  remaining: number;\n  response: any;\n  size: number;\n  speed: number;\n  uploadId: string;\n  url: any;\n  private startTime: number;\n  private _status: UploadStatus;\n  private retry: BackoffRetry;\n  private abort;\n  /**\n   * Creates an instance of Uploader.\n   */\n  constructor(private file: File, private options: UploaderOptions) {\n    this.uploadId = Math.random()\n      .toString(36)\n      .substring(2, 15);\n    this.name = file.name;\n    this.size = file.size;\n    this.mimeType = file.type || 'application/octet-stream';\n    this.status = 'added';\n    this.retry = new BackoffRetry();\n  }\n  /**\n   * Set individual file options and add to queue\n   */\n  configure(item: UploadItem = {}) {\n    if (this.status === 'added') {\n      const { metadata, headers } = item;\n      this.metadata = {\n        name: this.name,\n        mimeType: this.mimeType,\n        ...this.options.metadata,\n        ...metadata\n      };\n      this.headers =\n        this.options.headers instanceof Function\n          ? this.options.headers(this.file)\n          : { ...this.options.headers, ...headers };\n      this.url = this.options.url;\n      this.method = this.options.method;\n    }\n    this.status = 'queue';\n  }\n\n  set status(s: UploadStatus) {\n    this._status = s;\n    this.notifyState();\n    if (s === 'cancelled' || s === 'paused') {\n      this.abort();\n    }\n  }\n  get status() {\n    return this._status;\n  }\n  /**\n   * Emit current state\n   */\n  private notifyState() {\n    const state: UploadState = {\n      file: this.file,\n      name: this.name,\n      progress: this.progress,\n      remaining: this.remaining,\n      response: this.response,\n      size: this.size,\n      speed: this.speed,\n      status: this._status,\n      uploadId: this.uploadId,\n      URI: this.url\n    };\n    // tick for control events detect\n    setTimeout(() => {\n      this.options.subj.next(state);\n    });\n  }\n\n  private setHeaders(xhr: XMLHttpRequest) {\n    if (this.headers) {\n      Object.keys(this.headers).forEach(key =>\n        xhr.setRequestHeader(key, this.headers[key])\n      );\n    }\n  }\n\n  /**\n   * Initiate upload\n   */\n  upload() {\n    if (this.status === 'added') {\n      this.configure();\n    }\n    this.status = 'uploading';\n    if (this.progress > 0) {\n      return this.resume();\n    }\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = 'json';\n    xhr.open(this.method, this.options.url, true);\n    if (!!this.options.withCredentials) {\n      xhr.withCredentials = true;\n    }\n    this.setHeaders(xhr);\n    this.options.token\n      ? xhr.setRequestHeader('Authorization', 'Bearer ' + this.options.token)\n      : noop();\n    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n    xhr.setRequestHeader('X-Upload-Content-Length', this.size.toString());\n    xhr.setRequestHeader('X-Upload-Content-Type', this.mimeType);\n    xhr.onload = () => {\n      if (xhr.status < 400 && xhr.status > 199) {\n        // get secure upload link\n        this.url = xhr.getResponseHeader('Location');\n        this.startTime = this.startTime || new Date().getTime();\n        this.sendFile();\n      } else {\n        this.response = xhr.response;\n        this.status = 'error';\n      }\n    };\n    xhr.send(JSON.stringify(this.metadata));\n  }\n  /**\n   * Request upload state after 5xx errors or network failures\n   */\n  private resume(): void {\n    const xhr: XMLHttpRequest = XHRFactory.getInstance();\n    if (xhr.responseType !== 'json') {\n      xhr.responseType = 'json';\n    }\n    xhr.open('PUT', this.url, true);\n    if (!!this.options.withCredentials) {\n      xhr.withCredentials = true;\n    }\n    xhr.setRequestHeader('Content-Range', `bytes */${this.size}`);\n    xhr.setRequestHeader('Content-Type', this.mimeType);\n    this.setHeaders(xhr);\n    const onDataSendError = () => {\n      // 5xx errors or network failures\n      if (xhr.status > 499 || !xhr.status) {\n        XHRFactory.release(xhr);\n        this.retry.wait().then(() => this.resume());\n      } else {\n        // 4xx errors\n        this.response = xhr.response || {\n          error: {\n            code: xhr.status,\n            message: xhr.statusText\n          }\n        };\n        this.status = 'error';\n        XHRFactory.release(xhr);\n        this.options.nextFile();\n      }\n    };\n    const onDataSendSuccess = () => {\n      if (xhr.status === 200 || xhr.status === 201) {\n        this.progress = 100;\n        this.response = xhr.response;\n        this.status = 'complete';\n        XHRFactory.release(xhr);\n        this.options.nextFile();\n      } else if (xhr.status && xhr.status < 400) {\n        const range = +xhr.getResponseHeader('Range').split('-')[1] + 1;\n        this.retry.reset();\n        XHRFactory.release(xhr);\n        this.abort = this.sendFile(range);\n      } else {\n        onDataSendError();\n      }\n    };\n    xhr.onerror = onDataSendError;\n    xhr.onload = onDataSendSuccess;\n    xhr.send();\n  }\n  /**\n   * Content upload\n   */\n  private sendFile(start: number = 0): () => void {\n    if (this.status === 'cancelled' || this.status === 'paused') {\n      return;\n    }\n    let end: number = this.options.chunkSize\n      ? start + this.options.chunkSize\n      : this.size;\n    end = end > this.size ? this.size : end;\n    const chunk: Blob = this.file.slice(start, end);\n    const xhr: XMLHttpRequest = XHRFactory.getInstance();\n    if (xhr.responseType !== 'json') {\n      xhr.responseType = 'json';\n    }\n\n    xhr.open('PUT', this.url, true);\n    if (!!this.options.withCredentials) {\n      xhr.withCredentials = true;\n    }\n    xhr.setRequestHeader(\n      'Content-Range',\n      `bytes ${start}-${end - 1}/${this.size}`\n    );\n    xhr.setRequestHeader('Content-Type', this.mimeType);\n    this.setHeaders(xhr);\n    const updateProgress = (pEvent: ProgressEvent) => {\n      const uploaded = pEvent.lengthComputable\n        ? start + (end - start) * (pEvent.loaded / pEvent.total)\n        : start;\n      this.progress = +(uploaded / this.size * 100).toFixed(2);\n      const now = new Date().getTime();\n      this.speed = Math.round(uploaded / (now - this.startTime) * 1000);\n      this.remaining = Math.ceil((this.size - uploaded) / this.speed);\n      this.notifyState();\n    };\n    const onDataSendError = () => {\n      // 5xx errors or network failures\n      if (xhr.status > 499 || !xhr.status) {\n        XHRFactory.release(xhr);\n        this.retry.wait().then(() => this.resume());\n      } else {\n        // 4xx errors\n        this.response = xhr.response || {\n          error: {\n            code: +xhr.status,\n            message: xhr.statusText\n          }\n        };\n        this.status = 'error';\n        XHRFactory.release(xhr);\n        this.options.nextFile();\n      }\n    };\n    const onDataSendSuccess = () => {\n      if (xhr.status === 200 || xhr.status === 201) {\n        this.progress = 100;\n        this.response = xhr.response;\n        this.status = 'complete';\n        XHRFactory.release(xhr);\n        this.options.nextFile();\n      } else if (xhr.status && xhr.status < 400) {\n        const range = +xhr.getResponseHeader('Range').split('-')[1] + 1;\n        this.retry.reset();\n        XHRFactory.release(xhr);\n        // send next chunk\n        this.abort = this.sendFile(range);\n      } else {\n        onDataSendError();\n      }\n    };\n    xhr.onerror = onDataSendError;\n    xhr.onload = onDataSendSuccess;\n    xhr.upload.onprogress = updateProgress;\n    xhr.send(chunk);\n    return () => {\n      xhr.abort();\n    };\n  }\n}\n",
    "export let XHRFactory = (() => {\n  let stack = Array(1).fill(createXHR());\n\n  function createXHR() {\n    return new XMLHttpRequest();\n  }\n\n  return {\n    release: (xhr) => {\n      xhr.onreadystatechange = null;\n      xhr.onerror = null;\n      xhr.onload = null;\n      xhr.upload.onprogress = null;\n      stack.push(xhr);\n    },\n    getInstance() {\n      if (!stack.length) {\n        return createXHR();\n      } else {\n        return stack.pop();\n      }\n    },\n    get size() {\n      return stack.length;\n    },\n    set size(s) {\n      stack = Array(s).fill(createXHR());\n    }\n  };\n})();\n",
    "/**\n *  Exponential Backoff Retries\n */\nexport class BackoffRetry {\n  private delay: number;\n  /**\n   *\n   * Creates an instance of BackoffRetry.\n   * @default\n   * minInterval = 1000 ms\n   * maxInterval = minInterval * 120 (2 min)\n   * k = 2\n   */\n  constructor(\n    private minInterval = 1000,\n    private maxInterval = minInterval * 120,\n    private k = 2\n  ) {\n    this.delay = this.minInterval;\n  }\n  // TODO implement the \"Retry-After\"\n  /**\n   * Delay Retry\n   */\n  wait(): Promise<{}> {\n    return new Promise(resolve => {\n      setTimeout(resolve, this.delay + Math.floor(Math.random() * this.minInterval));\n      this.delay = Math.min(this.delay * this.k, this.maxInterval);\n    });\n  }\n  /**\n   * Reset Retry Interval\n   */\n  reset(): void {\n    this.delay = this.minInterval;\n  }\n}\n",
    "export type UploadStatus =\n  | 'added'\n  | 'queue'\n  | 'uploading'\n  | 'complete'\n  | 'error'\n  | 'cancelled'\n  | 'paused';\n\nexport type UploadAction =\n  | 'create'\n  | 'uploadAll'\n  | 'upload'\n  | 'cancel'\n  | 'cancelAll'\n  | 'pauseAll'\n  | 'pause';\nexport interface UploadxControlEvent {\n  action: UploadAction;\n  /**\n   * override global options\n   */\n  itemOptions?: UploadItem;\n  /** Upload unique identifier */\n  uploadId?: string;\n}\n/**\n *  Read only upload stream events\n */\nexport interface UploadState {\n  file: File;\n  name: string;\n  progress: number;\n  remaining: number;\n  response: any;\n  size: number;\n  speed: number;\n  status: UploadStatus;\n  uploadId: string;\n  URI: string;\n}\n\nexport interface UploadItem {\n  /**\n   * Upload API initial method\n   * @default 'POST'\n   */\n  method?: string;\n  readonly uploadId?: string;\n  /**\n   * Upload API URL\n   * @default '/upload/'\n   */\n  url?: string;\n  /**\n   * Custom headers\n   */\n  headers?: { [key: string]: string } | Function;\n  /**\n   * Upload meta\n   * @default\n   * { name: File.Filename, mimeType: File.type }\n   */\n  metadata?: any;\n}\n/**\n * Global Options\n */\nexport class UploadxOptions implements UploadItem {\n  /**\n   *  Set \"accept\" attribute\n   * @example\n   * allowedTypes: 'image/*, video/*'\n   */\n  allowedTypes?: string;\n  /**\n   * Auto upload with global options\n   * @default true\n   */\n  autoUpload?: boolean;\n  /**\n   * If set use chunks for upload\n   * @default 0\n   */\n  chunkSize?: number;\n  /**\n   * Uploads in parallel\n   * @default 2\n   */\n  concurrency?: number;\n  /**\n   * Custom headers\n   */\n  headers?: { [key: string]: string } | Function;\n  /**\n   * Upload API initial method\n   * @default 'POST'\n   */\n  method?: string;\n  /**\n   * Authorization Bearer token\n   */\n  token?: string;\n  /**\n   * Upload API URL\n   * @default '/upload/'\n   */\n  url?: string;\n  /**\n   * Use withCredentials xhr option?\n   * @default false\n   */\n  withCredentials?: boolean;\n}\n/**\n * @inner\n */\nexport interface UploaderOptions extends UploadItem {\n  token?: string;\n  chunkSize?: number;\n  withCredentials?: boolean;\n  readonly subj?: any;\n  readonly nextFile?: () => void;\n}\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "Input",
    "Output",
    "Renderer2",
    "ElementRef",
    "Directive",
    "EventEmitter",
    "Injectable",
    "Subject"
  ],
  "mappings": "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"
}
