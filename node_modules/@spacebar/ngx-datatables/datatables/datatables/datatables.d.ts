/// <reference types="datatables.net" />
/// <reference types="jquery" />
import { AfterViewChecked, AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { Observable } from 'rxjs/Observable';
export declare abstract class Datatables implements OnInit, OnDestroy, AfterViewInit, AfterViewChecked, OnChanges {
    private _elementRef;
    selectionMode: string;
    data: Object[];
    ajax: string | DataTables.AjaxSettings | DataTables.FunctionAjax;
    options: DataTables.Settings;
    protected options$: DataTables.Settings;
    protected dataListener: Subject<Object[]>;
    protected initListener: Subject<Object>;
    protected dirtyData: boolean;
    protected tableElementRef: ElementRef;
    private _dataTableApi;
    private PRIVATE_SETTINGS;
    constructor(_elementRef: ElementRef);
    /*******  LIFECYCLE CALLBACK FUNCTIONS *******/
    /**
     * callback on pre-construct of class
     */
    ngOnInit(): void;
    /**
     * callback on view initialization
     */
    ngAfterViewInit(): void;
    /**
     *
     */
    ngAfterViewChecked(): void;
    /**
     * Callback on input attribute change, hence DataTable is destroyed and reCreated
     * @param {SimpleChanges} changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * callback on View destroyed, Hence DataTables is destroy
     */
    ngOnDestroy(): void;
    /******* PRIVATE DATATABLES INIT FUNCTIONS *******/
    /**
     * initialization and merging of input attributes
     */
    protected initOptions(): void;
    /**
     * DataTables new instance initialization
     */
    protected buildDataTable(): void;
    /*******  PROTECTED CALLBACK FUNCTIONS *******/
    protected onInitComplete(settings: DataTables.SettingsLegacy, json: Object): void;
    /**
     * Event callback before DataTables Draw occurs
     * @param {DataTables.SettingsLegacy} settings
     */
    protected onPreDrawCallback(settings: DataTables.SettingsLegacy): void;
    /**
     * Event callback DataTables Draw
     * @param {DataTables.SettingsLegacy} settings
     */
    protected onDrawCallback(settings: DataTables.SettingsLegacy): void;
    /**
     * Callback function on Table Header init
     * @param {Node} thead
     * @param {any[]} data
     * @param {number} start
     * @param {number} end
     * @param {any[]} display
     */
    protected onHeaderCallback(thead: Node, data: any[], start: number, end: number, display: any[]): void;
    /*******  PRIVATE UTIL FUNCTIONS *******/
    private currentData();
    /*******  PUBLIC UTIL FUNCTIONS *******/
    toolbar: Observable<Element>;
    readonly dataTableApi: DataTables.Api;
    getSelectedRowsCount(): number;
    getSelectedRows(): Element[];
    isRowSelected(row: Node | JQuery): boolean;
    selectRow(row: Node | JQuery): void;
    deselectRow(row: Node | JQuery): void;
    selectAllRows(): void;
    deselectAllRows(): void;
    isServerSide(): boolean;
    reload(): void;
}
