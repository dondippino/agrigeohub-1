import { Component, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, Input, NgModule, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { Observable as Observable$1 } from 'rxjs/Observable';

class DatatablesTemplateDirective {
    /**
     * @param {?} _templateRef
     */
    constructor(_templateRef) {
        this._templateRef = _templateRef;
    }
    /**
     * @return {?}
     */
    get templateRef() {
        return this._templateRef;
    }
}
DatatablesTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxDatatablesTemplate]'
            },] },
];
/**
 * @nocollapse
 */
DatatablesTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
DatatablesTemplateDirective.propDecorators = {
    'ngxDatatablesTemplate': [{ type: Input },],
};

class DatatablesColumnComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.templates != null) {
            this._headerTemplate = this.findTemplateFor('header');
            this._footerTemplate = this.findTemplateFor('footer');
            this._bodyTemplate = this.findTemplateFor('body');
        }
    }
    /**
     * @return {?}
     */
    get headerTemplate() {
        return this._headerTemplate;
    }
    /**
     * @return {?}
     */
    get footerTemplate() {
        return this._footerTemplate;
    }
    /**
     * @return {?}
     */
    get bodyTemplate() {
        return this._bodyTemplate;
    }
    /**
     * @param {?} templates
     * @return {?}
     */
    singularTemplate(templates) {
        if (templates != null && templates.length > 1) {
            console.warn(`Multiple '${templates[0].ngxDatatablesTemplate}' Column template detected [ignored]`);
        }
        return templates == null || templates.length === 0 ? null : templates[0];
    }
    /**
     * @param {?} templateName
     * @return {?}
     */
    findTemplateFor(templateName) {
        const /** @type {?} */ templates = this.templates != null ?
            this.templates.filter(template => template.ngxDatatablesTemplate === templateName) : null;
        if (templates != null && templates.length > 1) {
            console.warn(`Multiple '${templateName}' Column template detected [ignored]`);
        }
        return templates == null || templates.length === 0 ? null : templates[0];
    }
    /**
     * @param {?=} colSettings
     * @return {?}
     */
    buildColumnDefs(colSettings) {
        // const columnDefs: DataTables.ColumnDefsSettings = colSettings
        // ? Object.assign(<DataTables.ColumnDefsSettings>{}, colSettings || {}) : <DataTables.ColumnDefsSettings>{};
        const /** @type {?} */ columnDefs = Object.assign(/** @type {?} */ ({}), this);
        /*columnDefs.searchable = this.searchable;
        columnDefs.title = this.title;
        columnDefs.visible = this.visible;
        columnDefs.width = this.width;*/
        columnDefs.orderable = (typeof this.orderable === 'undefined' && this.rowSelector) ? false : this.orderable;
        columnDefs.data = this.data || this.field;
        return colSettings ? Object.assign(columnDefs, colSettings) : columnDefs;
    }
}
DatatablesColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatables-column',
                template: `

  `,
                styles: [`

  `]
            },] },
];
/**
 * @nocollapse
 */
DatatablesColumnComponent.ctorParameters = () => [];
DatatablesColumnComponent.propDecorators = {
    'templates': [{ type: ContentChildren, args: [DatatablesTemplateDirective,] },],
    'field': [{ type: Input },],
    'header': [{ type: Input },],
    'footer': [{ type: Input },],
    'rowSelector': [{ type: Input },],
    'cellType': [{ type: Input },],
    'className': [{ type: Input },],
    'contentPadding': [{ type: Input },],
    'createdCell': [{ type: Input },],
    'data': [{ type: Input },],
    'defaultContent': [{ type: Input },],
    'name': [{ type: Input },],
    'orderable': [{ type: Input },],
    'orderData': [{ type: Input },],
    'orderDataType': [{ type: Input },],
    'orderFixed': [{ type: Input },],
    'orderSequence': [{ type: Input },],
    'render': [{ type: Input },],
    'searchable': [{ type: Input },],
    'title': [{ type: Input },],
    'type': [{ type: Input },],
    'visible': [{ type: Input },],
    'width': [{ type: Input },],
};

class DatatablesTemplateComponent {
    /**
     * @param {?} elementRef
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     */
    constructor(elementRef, viewContainerRef, componentFactoryResolver) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @param {?} data
     * @param {?=} columns
     * @return {?}
     */
    buildTemplateComponent(data, columns) {
        this.viewContainerRef.clear();
        const /** @type {?} */ rendererComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DatatablesTemplateComponent);
        const /** @type {?} */ datatablesTemplateComponent = (this.viewContainerRef.createComponent(rendererComponentFactory).instance);
        datatablesTemplateComponent.columns = columns;
        datatablesTemplateComponent.data = data;
        return datatablesTemplateComponent;
    }
}
DatatablesTemplateComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatables-template',
                template: `
    <tr *ngFor="let rowData of data;let rowIndex = index">

      <td *ngFor="let column of columns;let colIndex=index"
          [ngClass]="{'row-selector':(column.bodyTemplate ? 1 : (column.rowSelector ? 2 : 0))==2}">

        <ng-container [ngSwitch]="column.bodyTemplate ? 1 : (column.rowSelector ? 2 : 0)">
              <span *ngSwitchCase="1" id="_1_{{colIndex}}_{{rowIndex}}">
                  <ng-container [ngTemplateOutlet]="column.bodyTemplate?.templateRef"
                                [ngTemplateOutletContext]="{$implicit:{rowData:rowData,data:rowData,rowIndex:rowIndex,columnIndex:colIndex}}"
                                #bodyTemplate></ng-container>
              </span>

        </ng-container>
      </td>
    </tr>
  `,
                styles: [`

  `]
            },] },
];
/**
 * @nocollapse
 */
DatatablesTemplateComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
];
DatatablesTemplateComponent.propDecorators = {
    'columns': [{ type: Input },],
    'data': [{ type: Input },],
};

/**
 * @abstract
 */
class Datatables {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.selectionMode = 'multiple';
        this.dataListener = new Subject$1();
        this.initListener = Subject$1.create();
        this.PRIVATE_SETTINGS = {
            initComplete: (settings, json) => {
                this.onInitComplete(settings, json);
                if (this.options && $.isFunction(this.options.initComplete)) {
                    this.options.initComplete.call(this.dataTableApi, settings, json);
                }
            },
            headerCallback: (thead, data, start, end, display) => {
                this.onHeaderCallback(thead, data, start, end, display);
                if (this.options && $.isFunction(this.options.headerCallback)) {
                    this.options.headerCallback.call(this.dataTableApi, thead, data, start, end, display);
                }
            },
            drawCallback: (settings) => {
                this.onDrawCallback(settings);
                if (this.options && $.isFunction(this.options.drawCallback)) {
                    this.options.drawCallback.call(this.dataTableApi, settings);
                }
            },
            preDrawCallback: (settings) => {
                this.onPreDrawCallback(settings);
                if (this.options && $.isFunction(this.options.preDrawCallback)) {
                    this.options.preDrawCallback.call(this.dataTableApi, settings);
                }
            }
        };
        this.tableElementRef = _elementRef;
    }
    /**
     * callback on pre-construct of class
     * @return {?}
     */
    ngOnInit() {
        this.dataListener.subscribe((currentData) => {
            this.dirtyData = true;
        });
        if ($.fn.dataTable && $.fn.dataTable.ext) {
            $.fn.dataTable.ext.errMode = 'throw';
        }
        this.initOptions();
    }
    /**
     * callback on view initialization
     * @return {?}
     */
    ngAfterViewInit() {
        this.buildDataTable();
    }
    /**
     *
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * Callback on input attribute change, hence DataTable is destroyed and reCreated
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.dataListener.next(null);
        for (const /** @type {?} */ propName in changes) {
            if (!changes[propName].firstChange) {
                this.initOptions();
                this.buildDataTable();
                break;
            }
        }
    }
    /**
     * callback on View destroyed, Hence DataTables is destroy
     * @return {?}
     */
    ngOnDestroy() {
        this.dataListener.unsubscribe();
        this.initListener.unsubscribe();
        if (this._dataTableApi) {
            this._dataTableApi.destroy(true);
        }
    }
    /**
     * initialization and merging of input attributes
     * @return {?}
     */
    initOptions() {
        this.options$ = { ajax: typeof this.ajax === 'string' ? { url: this.ajax } : this.ajax };
        this.options$ = $.extend(true, this.options$, this.options || {});
        this.options$ = $.extend(true, this.options$, this.PRIVATE_SETTINGS);
        this.options$.serverSide = (this.options$.ajax &&
            (typeof this.options$.ajax === 'string' || this.options$.ajax['url'] || $.isFunction(this.options$.ajax)));
        this.options$.data = this.options$.serverSide ? null : this.data;
    }
    /**
     * DataTables new instance initialization
     * @return {?}
     */
    buildDataTable() {
        if (!$ || !$.fn || !$.fn.DataTable) {
            console.log('DataTable not initialized properly');
            console.log('jquery ', $ !== undefined);
            console.log('jquery $.fn', $ && $.fn);
            console.log('jquery $.fn', $ && $.fn && $.fn.DataTable);
            return;
        }
        const /** @type {?} */ tableNode = this.tableElementRef.nativeElement;
        if ($.fn.dataTable.isDataTable(tableNode)) {
            $(tableNode).DataTable().destroy();
        }
        const /** @type {?} */ staticData = this.options$.serverSide ? this.data : null;
        this._dataTableApi = $(tableNode).DataTable(this.options$);
        /*if (staticData) {
          setTimeout(() => {
            this._dataTableApi.rows.add(staticData).draw();
          }, 200);
        }*/
    }
    /**
     * ****  PROTECTED CALLBACK FUNCTIONS ******
     * @param {?} settings
     * @param {?} json
     * @return {?}
     */
    onInitComplete(settings, json) {
        this.initListener.next(json);
    }
    /**
     * Event callback before DataTables Draw occurs
     * @param {?} settings
     * @return {?}
     */
    onPreDrawCallback(settings) {
    }
    /**
     * Event callback DataTables Draw
     * @param {?} settings
     * @return {?}
     */
    onDrawCallback(settings) {
        const /** @type {?} */ data = this.currentData();
        this.dataListener.next(data);
    }
    /**
     * Callback function on Table Header init
     * @param {?} thead
     * @param {?} data
     * @param {?} start
     * @param {?} end
     * @param {?} display
     * @return {?}
     */
    onHeaderCallback(thead, data, start, end, display) {
    }
    /**
     * ****  PRIVATE UTIL FUNCTIONS ******
     * @return {?}
     */
    currentData() {
        const /** @type {?} */ dataObject = this.dataTableApi.rows({ page: 'current' }).data();
        const /** @type {?} */ data = [];
        if (dataObject.length) {
            for (let /** @type {?} */ x = 0; x < dataObject.length; x++) {
                data.push(dataObject[x]);
            }
        }
        return data;
    }
    /**
     * ****  PUBLIC UTIL FUNCTIONS ******
     * @return {?}
     */
    get toolbar() {
        return Observable$1.create((observer) => {
            const /** @type {?} */ subscription = this.initListener.subscribe(() => {
                observer.next($(this._elementRef.nativeElement).find('div.dataTables_toolbar').get(0));
                observer.complete();
            });
            return () => {
                subscription.unsubscribe();
            };
        });
    }
    /**
     * @param {?} toolbarListener
     * @return {?}
     */
    set toolbar(toolbarListener) {
        const /** @type {?} */ _subscription = this.initListener.subscribe(() => {
            const /** @type {?} */ subscription = toolbarListener.subscribe((tools) => {
                $(this._elementRef.nativeElement).find('div.dataTables_toolbar').append(tools);
            }, error => {
            }, () => {
                // _subscription.unsubscribe();
            });
            return () => {
                subscription.unsubscribe();
            };
        });
    }
    /**
     * @return {?}
     */
    get dataTableApi() {
        return this._dataTableApi || $(this.tableElementRef.nativeElement).DataTable();
    }
    /**
     * @return {?}
     */
    getSelectedRowsCount() {
        return this.dataTableApi.rows({ selected: true }).count();
    }
    /**
     * @return {?}
     */
    getSelectedRows() {
        return this.dataTableApi.rows({ selected: true }).to$().toArray();
    }
    /**
     * @param {?} row
     * @return {?}
     */
    isRowSelected(row) {
        return this.dataTableApi.rows({ selected: true }).$(row).length > 0;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    selectRow(row) {
        if (!this.isRowSelected(row)) {
            const /** @type {?} */ select = this.dataTableApi.rows(row)['select'];
            if ($.isFunction(select)) {
                select();
            }
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    deselectRow(row) {
        if (this.isRowSelected(row)) {
            const /** @type {?} */ deselect = this.dataTableApi.rows(row)['deselect'];
            if ($.isFunction(deselect)) {
                deselect();
            }
        }
    }
    /**
     * @return {?}
     */
    selectAllRows() {
        const /** @type {?} */ select = this.dataTableApi.rows()['select'];
        if ($.isFunction(select)) {
            select();
        }
    }
    /**
     * @return {?}
     */
    deselectAllRows() {
        const /** @type {?} */ deselect = this.dataTableApi.rows()['deselect'];
        if ($.isFunction(deselect)) {
            deselect();
        }
    }
    /**
     * @return {?}
     */
    isServerSide() {
        return this.dataTableApi.page.info().serverSide;
    }
    /**
     * @return {?}
     */
    reload() {
        if (!this.isServerSide()) {
            this.dataTableApi.draw(true);
        }
        else {
            this.dataTableApi.clear();
            this.dataTableApi.draw();
        }
    }
}

class DatatablesComponent extends Datatables {
    /**
     * @param {?} elementRef
     * @param {?} componentFactoryResolver
     */
    constructor(elementRef, componentFactoryResolver) {
        super(elementRef);
        this.elementRef = elementRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.ROW_SELECTOR_CLASS = 'row-selector';
        this.selectionMode = 'multiple';
    }
    /**
     * callback on pre-construct of class
     * @return {?}
     */
    ngOnInit() {
        this.dataListener.subscribe((currentData) => {
            if (currentData && currentData.length) {
                this.buildTemplateComponent(currentData);
            }
        });
        super.ngOnInit();
    }
    /**
     * callback on view initialization
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.columns || !this.columns.length) {
            this.tableElementRef = new ElementRef($(this.elementRef.nativeElement).find('table:first').get(0));
        }
        super.ngAfterViewInit();
    }
    /**
     *
     * @return {?}
     */
    ngAfterViewChecked() {
        this.renderDirtyData();
        super.ngAfterViewChecked();
    }
    /**
     * DataTables new instance initialization
     * @return {?}
     */
    buildDataTable() {
        this.options$.columnDefs = this.initColumnDefs();
        super.buildDataTable();
    }
    /**
     * initialization of Custom Column Headers
     * @param {?} thead
     * @return {?}
     */
    initColumnHeader(thead) {
        if (this.columns) {
            this.columns.forEach((item, index, items) => {
                if (item.rowSelector) {
                    const /** @type {?} */ th = $('th', thead).eq(index);
                    const /** @type {?} */ this_ = this;
                    $('input[type="checkbox"]', th).off('change.dt').on('change.dt', function () {
                        const /** @type {?} */ tdCheckboxes = $('input[type="checkbox"]', this_.dataTableApi.column(th).nodes());
                        tdCheckboxes.prop({ checked: ((this)).checked });
                        tdCheckboxes.change();
                    });
                }
            });
        }
    }
    /**
     * Overriding and merging DataTables columns(options) and ngx-datatables-column settings.
     * Note that user defined columns and columnDefs options overrides ngx-datatables-column settings
     * However if columnDefs or columns must be used fully used, consider using a no ngx-datatables-column
     * ngx-datatables or ngxDatatables Direcetive
     * @return {?}
     */
    initColumnDefs() {
        const /** @type {?} */ columnDefs = [...(this.options && this.options.columnDefs ? this.options.columnDefs : [])];
        if (this.columns) {
            this.columns.forEach((col, index, cols) => {
                const /** @type {?} */ columnDef = col.buildColumnDefs();
                // const columnDef: DataTables.ColumnDefsSettings = Object.assign(<DataTables.ColumnDefsSettings>{targets: index}, col);
                columnDef.targets = index;
                if (col.rowSelector) {
                    this.buildRowSelectorColumn(columnDef);
                }
                columnDefs.push(columnDef);
            });
        }
        return columnDefs;
    }
    /**
     * ****  PRIVATE DOM MANIPULATION AND DYNAMIC RENDERING FUNCTIONS ******
     * @return {?}
     */
    renderDirtyData() {
        if (this.dirtyData) {
            this.dirtyData = false;
            if (this.datatablesTemplateComponent) {
                $('tr', this.datatablesTemplateComponent.nativeElement).each((index, tr) => {
                    $('td span', tr).each((cellIndex, td) => {
                        const /** @type {?} */ paramIndexes = td.id.split('_');
                        if (paramIndexes.length > 3) {
                            const /** @type {?} */ row = paramIndexes[3];
                            const /** @type {?} */ col = paramIndexes[2];
                            if (!isNaN(parseInt(row, 10)) && !isNaN(parseInt(row, 10))) {
                                const /** @type {?} */ cell = this.dataTableApi.cell(row, col);
                                if (cell) {
                                    const /** @type {?} */ $cell = $(cell.node());
                                    $cell.empty();
                                    $cell.append(td);
                                }
                            }
                        }
                    });
                });
            }
        }
    }
    /**
     * Custom row selector when a column is flag as a rowSelector
     * @param {?} columnDef
     * @return {?}
     */
    buildRowSelectorColumn(columnDef) {
        columnDef.render = function (data, type, rowData, meta) {
            if (type !== 'display') {
                return data;
            }
            return `<span class="rowselector-checkbox">
              <input type="checkbox" id="rowselector_${meta.row}_${meta.col}">
            </span>`;
        };
        const /** @type {?} */ this_ = this;
        columnDef.createdCell = (cell, cellData, rowData, row, col) => {
            $(cell).addClass(this.ROW_SELECTOR_CLASS).find('input[type="checkbox"]').off('change.dt').on('change.dt', function () {
                const /** @type {?} */ rowSelector = this_.dataTableApi.row($(cell).parent('tr'))[$(this).is(':checked') ? 'select' : 'deselect'];
                if ($.isFunction(rowSelector)) {
                    rowSelector();
                }
            });
        };
    }
    /**
     * Dynamic building and rendering of custom Column Components using ngxDataTablesTemplate
     * @param {?} currentData
     * @return {?}
     */
    buildTemplateComponent(currentData) {
        if (this.templateViewContainerRef) {
            this.templateViewContainerRef.clear();
            const /** @type {?} */ rendererComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DatatablesTemplateComponent);
            this.datatablesTemplateComponent = this.templateViewContainerRef.createComponent(rendererComponentFactory).instance;
            this.datatablesTemplateComponent.columns = this.columns;
            this.datatablesTemplateComponent.data = currentData;
        }
    }
    /**
     * Callback function on Table Header init
     * @param {?} thead
     * @param {?} data
     * @param {?} start
     * @param {?} end
     * @param {?} display
     * @return {?}
     */
    onHeaderCallback(thead, data, start, end, display) {
        this.initColumnHeader(thead);
    }
}
DatatablesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatables',
                template: `
    <div class="table-container datatable-container {{containerClass}}" *ngIf="columns.length; else datatTablesTemplate">

      <table class="{{tableClass}}" #tableElement>
        <thead>
        <tr role="row" class="heading">
          <th *ngFor="let column of columns;let colIndex = index"
              [ngClass]="{'row-selector selector':(column.bodyTemplate ? 1 : (column.rowSelector ? 2 : 0))==2}">

            <ng-container [ngSwitch]="column.headerTemplate ? 1 : (column.rowSelector ? 2 : 0)">
              <ng-container *ngSwitchCase="1"
                            [ngTemplateOutlet]="column.headerTemplate?.templateRef"
                            [ngTemplateOutletContext]="{$implicit:{column:column}}"
                            #headerTemplate></ng-container>

              <span *ngSwitchCase="2">
                <span class="rowselector-checkbox">
                  <input type="checkbox" id="rowselector_{{colIndex}}">
                </span>
              </span>

              <span *ngSwitchDefault>{{column.header}}</span>
            </ng-container>

          </th>
        </tr>

        </thead>
        <tbody>

        </tbody>

      </table>

      <ng-container #templateContainer>

      </ng-container>

    </div>

    <ng-template #datatTablesTemplate>
      <ng-content select="table"></ng-content>
    </ng-template>
  `,
                styles: [`

  `]
            },] },
];
/**
 * @nocollapse
 */
DatatablesComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ComponentFactoryResolver, },
];
DatatablesComponent.propDecorators = {
    'columns': [{ type: ContentChildren, args: [DatatablesColumnComponent,] },],
    'selectionMode': [{ type: Input },],
    'tableClass': [{ type: Input },],
    'containerClass': [{ type: Input },],
    'data': [{ type: Input },],
    'ajax': [{ type: Input },],
    'options': [{ type: Input },],
    'tableElementRef': [{ type: ViewChild, args: ['tableElement',] },],
    'datatablesTemplateComponent': [{ type: ViewChild, args: [DatatablesTemplateComponent,] },],
    'templateViewContainerRef': [{ type: ViewChild, args: ['templateContainer', { read: ViewContainerRef },] },],
};

class DatatablesPortletComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.toggleFilter = () => {
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initTools();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.templates) {
            this.actionsTemplate = this.findTemplateFor('actions');
            this.filtersTemplate = this.findTemplateFor('filters');
            this.toolsTemplate = this.findTemplateFor('tools');
            this.captionTemplate = this.findTemplateFor('caption');
            if (this.actionsTemplate) {
                this.initActions();
            }
        }
    }
    /**
     * @return {?}
     */
    filters() {
        if (this.filtersTemplate) {
            const /** @type {?} */ element = this.filterPanelElementRef.nativeElement;
            const /** @type {?} */ forms = element.getElementsByTagName('form');
            return forms && forms.length ? this.serializeToJSON(forms[0]) : {};
        }
        return {};
    }
    /**
     * @return {?}
     */
    resetFilters() {
        if (this.filtersTemplate) {
            const /** @type {?} */ element = this.filterPanelElementRef.nativeElement;
            const /** @type {?} */ forms = element.getElementsByTagName('form');
            if (forms && forms.length) {
                $(forms).trigger('reset');
            }
        }
    }
    /**
     * @return {?}
     */
    isFilterOpened() {
        return this.filtersTemplate && $(this.filterPanelElementRef.nativeElement).is(':visible');
    }
    /**
     * @return {?}
     */
    filterPanel() {
        return this.filterPanelElementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    initTools() {
        if (this.toolsPanelElementRef) {
            const /** @type {?} */ $toolsPanel = $(this.toolsPanelElementRef.nativeElement);
            $toolsPanel.children('a.btn-outline').off('mouseleave.tools.dt').on('mouseleave.tools.dt', function (e) {
                $(this).blur();
            });
            this.initFilterTool($toolsPanel);
            this.initFullscreenTool($toolsPanel);
        }
    }
    /**
     * @return {?}
     */
    initActions() {
        if (this.actionsPanelElementRef) {
            const /** @type {?} */ $actionsPanel = $(this.actionsPanelElementRef.nativeElement);
        }
        this.initActionsToolbar(null);
    }
    /**
     * @param {?} $toolPanel
     * @return {?}
     */
    initFilterTool($toolPanel) {
        const /** @type {?} */ $filterBtn = $toolPanel.children('a.filter');
        const /** @type {?} */ $filterPanel = $(this.filterPanelElementRef.nativeElement);
        const /** @type {?} */ $filterBtnIcon = $filterBtn.find('i:last');
        const /** @type {?} */ onclickFilter = (e) => {
            if (e) {
                e.preventDefault();
            }
            if (e ? $filterPanel.is(':visible') : !$filterPanel.is(':visible')) {
                $filterBtn.removeClass('active').addClass('btn-outline');
                $filterPanel.slideUp(200);
            }
            else {
                $filterBtn.addClass('active').removeClass('btn-outline');
                $filterPanel.slideDown(200);
            }
        };
        $filterBtn.off('click.dt').on('click.dt', onclickFilter);
        onclickFilter(null);
        this.toggleFilter = onclickFilter;
    }
    /**
     * @param {?} $toolPanel
     * @return {?}
     */
    initFullscreenTool($toolPanel) {
        const /** @type {?} */ $fullscreenBtn = $toolPanel.find('a.fullscreen');
        const /** @type {?} */ $fullscreenBtnIcon = $fullscreenBtn.find('i:last');
        const /** @type {?} */ onclickFullscreen = () => {
            setTimeout(() => {
                if ($fullscreenBtn.hasClass('on')) {
                    $fullscreenBtnIcon.removeClass('fa-expand').addClass('fa-compress');
                    $fullscreenBtn.addClass('active').removeClass('btn-outline');
                }
                else {
                    $fullscreenBtnIcon.removeClass('fa-compress').addClass('fa-expand');
                    $fullscreenBtn.removeClass('active').addClass('btn-outline');
                }
            }, 100);
        };
        $fullscreenBtn.off('click.dt').on('click.dt', onclickFullscreen);
        onclickFullscreen();
    }
    /**
     * @param {?} $actionsPanel
     * @return {?}
     */
    initActionsToolbar($actionsPanel) {
        if (this.datatablesComponent && this.actionsTemplate) {
            const /** @type {?} */ subscription = this.datatablesComponent.toolbar.subscribe((toolbar) => {
                $(toolbar).append($(this.actionsTemplate.templateRef.elementRef.nativeElement));
            });
        }
    }
    /**
     * @param {?} templateName
     * @return {?}
     */
    findTemplateFor(templateName) {
        const /** @type {?} */ templates = this.templates != null ? this.templates.filter(template => {
            return template.ngxDatatablesTemplate === templateName;
        }) : null;
        if (templates != null && templates.length > 1) {
            console.warn(`Multiple '${templateName}' Column template detected [ignored]`);
        }
        return templates == null || templates.length === 0 ? null : templates[0];
    }
    /**
     * @param {?} form
     * @return {?}
     */
    serializeToJSON(form) {
        const /** @type {?} */ json = {};
        $.each($(form).serializeArray(), function (index, n) {
            let /** @type {?} */ _name;
            let /** @type {?} */ _ = n.name.indexOf('[');
            if (_ > -1) {
                _name = n.name.replace(/\]/gi, '').split('[');
            }
            else if ((_ = n.name.indexOf('.')) > -1) {
                _name = n.name.split('.');
            }
            if (_ > -1 && _name) {
                let /** @type {?} */ o = json;
                for (let /** @type {?} */ i = 0, /** @type {?} */ len = _name.length; i < len; i++) {
                    if (i === len - 1) {
                        if (o[_name[i]]) {
                            if (typeof o[_name[i]] === 'string' || !o[_name[i]].push) {
                                o[_name[i]] = [o[_name[i]]];
                            }
                            o[_name[i]].push(n.value);
                        }
                        else {
                            o[_name[i]] = n.value || '';
                        }
                    }
                    else {
                        o = o[_name[i]] = o[_name[i]] || {};
                    }
                }
            }
            else {
                if (json[n.name] !== undefined) {
                    if (!json[n.name].push) {
                        json[n.name] = [json[n.name]];
                    }
                    json[n.name].push(n.value || '');
                }
                else {
                    json[n.name] = n.value || '';
                }
            }
        });
        return json;
    }
}
DatatablesPortletComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatables-portlet',
                template: `
    <div class="portlet portlet-datatable">
      <div class="portlet-title">
        <div class="row">
          <div class="caption col-md-6">
            <ng-container [ngTemplateOutlet]="captionTemplate?.templateRef"></ng-container>
            <ng-container *ngIf="!captionTemplate?.templateRef" #defaultCaptionTemplate>
              <i [ngClass]="iconClass ? iconClass :'glyphicon glyphicon-th-list'"></i>
              <span class="caption-subject">{{caption}}</span>
              <span class="caption-helper">{{description}}</span>
            </ng-container>
          </div>

          <div class="actions col-md-6" #toolsPanel>
            <ng-container [ngTemplateOutlet]="toolsTemplate?.templateRef"></ng-container>
            <ng-container *ngIf="!toolsTemplate?.templateRef" #defaultToolsTemplate>
              <a class="btn filter {{filterClass}}" [attr.title]="filterTitle?filterTitle:'Toggle Filters'"
                 href="javascript:">
                <i [ngClass]="filterIconClass ? filterIconClass :'glyphicon glyphicon-filter'"></i>
              </a>
              <a class="btn fullscreen {{fullscreenClass}}"
                 [attr.title]="fullscreenTitle?fullscreenTitle:'Toggle fullscreen'"
                 href="javascript:">
                <i [ngClass]="fullscreenIconClass ? fullscreenIconClass :'glyphicon glyphicon-resize-full'"></i>
              </a>
            </ng-container>
          </div>
        </div>
      </div>
      <div class="portlet-title datatable-filter" style="display:none" #filterPanel>
        <ng-container [ngTemplateOutlet]="filtersTemplate?.templateRef"></ng-container>
      </div>
      <div class="portlet-body">
        <div>
          <ng-container [ngTemplateOutlet]="actionsTemplate?.templateRef"></ng-container>
        </div>

        <ng-content></ng-content>
      </div>
    </div>
  `,
                styles: [`

    .portlet {
      background: #fff;
    }

    .portlet-title {
      padding: 15px 20px 10px;
      min-height: 40px;
      border-bottom: 1px solid #eee;
    }

    .portlet-filter {
      padding: 5px 20px;
      min-height: 40px;
      border-bottom: 1px solid #eee;
    }

    .portlet-body {
      padding: 10px 20px 20px;
    }

    .portlet  .portlet-title  .caption {
      float: left;
      text-align: left;
      display: inline-block;
      font-size: 18px;
      line-height: 18px;
      padding-bottom: 10px;
      padding-top: 10px;
    }

    .actions {
      float: right;
      text-align: right;
      display: inline-block;
    }

    .actions .btn {
      color: #666;
      padding: 3px 9px;
      line-height: 1.5;
      margin-left: 3px;
    }

    .actions .btn.btn-icon-only {
      font-size: 13px;
      width:auto;height: auto;
    }

    /*.portlet  .portlet-title .caption  .caption-subject {
      font-size: 16px;
    }*/

    /*.actions .btn {
      color: #666;
      padding: 3px 9px;
      line-height: 1.5;
      background-color: #fff;
      border-color: #ccc;
      border-radius: 50px;
    }*/

    .actions .btn.active,
    .actions .btn:hover {
      color: #fff;
      background-color: #999999;
    }

    .actions .btn.active {
      background-color: #666666;
    }

    .portlet.portlet-fullscreen {
      z-index: 10060;
      margin: 0;
      position: fixed;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      width: 100%;
      height: 100%;
      background: #fff;
      background-color: rgb(255, 255, 255);
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
DatatablesPortletComponent.ctorParameters = () => [
    { type: ElementRef, },
];
DatatablesPortletComponent.propDecorators = {
    'toolsPanelElementRef': [{ type: ViewChild, args: ['toolsPanel',] },],
    'actionsPanelElementRef': [{ type: ViewChild, args: ['actionsPanel',] },],
    'filterPanelElementRef': [{ type: ViewChild, args: ['filterPanel',] },],
    'datatablesComponent': [{ type: ContentChild, args: [DatatablesComponent,] },],
    'templates': [{ type: ContentChildren, args: [DatatablesTemplateDirective,] },],
    'caption': [{ type: Input },],
    'description': [{ type: Input },],
    'iconClass': [{ type: Input },],
    'filterClass': [{ type: Input },],
    'filterTitle': [{ type: Input },],
    'filterIconClass': [{ type: Input },],
    'fullscreenClass': [{ type: Input },],
    'fullscreenTitle': [{ type: Input },],
    'fullscreenIconClass': [{ type: Input },],
    'showFullscreenIconClass': [{ type: Input },],
    'hideFullscreenIconClass': [{ type: Input },],
};

class DatatablesDirective extends Datatables {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        super(elementRef);
        this.elementRef = elementRef;
    }
}
DatatablesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxDatatables]'
            },] },
];
/**
 * @nocollapse
 */
DatatablesDirective.ctorParameters = () => [
    { type: ElementRef, },
];
DatatablesDirective.propDecorators = {
    'data': [{ type: Input },],
    'ajax': [{ type: Input },],
    'options': [{ type: Input },],
};

const components = [
    DatatablesColumnComponent,
    DatatablesPortletComponent,
    DatatablesTemplateComponent,
    DatatablesTemplateDirective,
    DatatablesComponent,
    DatatablesDirective
];
class DatatablesModule {
}
DatatablesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                entryComponents: [DatatablesTemplateComponent],
                exports: [...components],
                declarations: [...components],
            },] },
];
/**
 * @nocollapse
 */
DatatablesModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { DatatablesModule, DatatablesColumnComponent, DatatablesTemplateComponent, DatatablesPortletComponent, DatatablesTemplateDirective, DatatablesComponent, Datatables as ɵa, DatatablesDirective as ɵb };
//# sourceMappingURL=ngx-datatables.js.map
