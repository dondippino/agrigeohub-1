var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, Input, NgModule, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { Observable as Observable$1 } from 'rxjs/Observable';
var DatatablesTemplateDirective = (function () {
    /**
     * @param {?} _templateRef
     */
    function DatatablesTemplateDirective(_templateRef) {
        this._templateRef = _templateRef;
    }
    Object.defineProperty(DatatablesTemplateDirective.prototype, "templateRef", {
        /**
         * @return {?}
         */
        get: function () {
            return this._templateRef;
        },
        enumerable: true,
        configurable: true
    });
    return DatatablesTemplateDirective;
}());
DatatablesTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxDatatablesTemplate]'
            },] },
];
/**
 * @nocollapse
 */
DatatablesTemplateDirective.ctorParameters = function () { return [
    { type: TemplateRef, },
]; };
DatatablesTemplateDirective.propDecorators = {
    'ngxDatatablesTemplate': [{ type: Input },],
};
var DatatablesColumnComponent = (function () {
    function DatatablesColumnComponent() {
    }
    /**
     * @return {?}
     */
    DatatablesColumnComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    DatatablesColumnComponent.prototype.ngAfterContentInit = function () {
        if (this.templates != null) {
            this._headerTemplate = this.findTemplateFor('header');
            this._footerTemplate = this.findTemplateFor('footer');
            this._bodyTemplate = this.findTemplateFor('body');
        }
    };
    Object.defineProperty(DatatablesColumnComponent.prototype, "headerTemplate", {
        /**
         * @return {?}
         */
        get: function () {
            return this._headerTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatablesColumnComponent.prototype, "footerTemplate", {
        /**
         * @return {?}
         */
        get: function () {
            return this._footerTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatablesColumnComponent.prototype, "bodyTemplate", {
        /**
         * @return {?}
         */
        get: function () {
            return this._bodyTemplate;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} templates
     * @return {?}
     */
    DatatablesColumnComponent.prototype.singularTemplate = function (templates) {
        if (templates != null && templates.length > 1) {
            console.warn("Multiple '" + templates[0].ngxDatatablesTemplate + "' Column template detected [ignored]");
        }
        return templates == null || templates.length === 0 ? null : templates[0];
    };
    /**
     * @param {?} templateName
     * @return {?}
     */
    DatatablesColumnComponent.prototype.findTemplateFor = function (templateName) {
        var /** @type {?} */ templates = this.templates != null ?
            this.templates.filter(function (template) { return template.ngxDatatablesTemplate === templateName; }) : null;
        if (templates != null && templates.length > 1) {
            console.warn("Multiple '" + templateName + "' Column template detected [ignored]");
        }
        return templates == null || templates.length === 0 ? null : templates[0];
    };
    /**
     * @param {?=} colSettings
     * @return {?}
     */
    DatatablesColumnComponent.prototype.buildColumnDefs = function (colSettings) {
        // const columnDefs: DataTables.ColumnDefsSettings = colSettings
        // ? Object.assign(<DataTables.ColumnDefsSettings>{}, colSettings || {}) : <DataTables.ColumnDefsSettings>{};
        var /** @type {?} */ columnDefs = Object.assign(/** @type {?} */ ({}), this);
        /*columnDefs.searchable = this.searchable;
        columnDefs.title = this.title;
        columnDefs.visible = this.visible;
        columnDefs.width = this.width;*/
        columnDefs.orderable = (typeof this.orderable === 'undefined' && this.rowSelector) ? false : this.orderable;
        columnDefs.data = this.data || this.field;
        return colSettings ? Object.assign(columnDefs, colSettings) : columnDefs;
    };
    return DatatablesColumnComponent;
}());
DatatablesColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatables-column',
                template: "\n\n  ",
                styles: ["\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
DatatablesColumnComponent.ctorParameters = function () { return []; };
DatatablesColumnComponent.propDecorators = {
    'templates': [{ type: ContentChildren, args: [DatatablesTemplateDirective,] },],
    'field': [{ type: Input },],
    'header': [{ type: Input },],
    'footer': [{ type: Input },],
    'rowSelector': [{ type: Input },],
    'cellType': [{ type: Input },],
    'className': [{ type: Input },],
    'contentPadding': [{ type: Input },],
    'createdCell': [{ type: Input },],
    'data': [{ type: Input },],
    'defaultContent': [{ type: Input },],
    'name': [{ type: Input },],
    'orderable': [{ type: Input },],
    'orderData': [{ type: Input },],
    'orderDataType': [{ type: Input },],
    'orderFixed': [{ type: Input },],
    'orderSequence': [{ type: Input },],
    'render': [{ type: Input },],
    'searchable': [{ type: Input },],
    'title': [{ type: Input },],
    'type': [{ type: Input },],
    'visible': [{ type: Input },],
    'width': [{ type: Input },],
};
var DatatablesTemplateComponent = (function () {
    /**
     * @param {?} elementRef
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     */
    function DatatablesTemplateComponent(elementRef, viewContainerRef, componentFactoryResolver) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @return {?}
     */
    DatatablesTemplateComponent.prototype.ngOnInit = function () {
    };
    Object.defineProperty(DatatablesTemplateComponent.prototype, "nativeElement", {
        /**
         * @return {?}
         */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} data
     * @param {?=} columns
     * @return {?}
     */
    DatatablesTemplateComponent.prototype.buildTemplateComponent = function (data, columns) {
        this.viewContainerRef.clear();
        var /** @type {?} */ rendererComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DatatablesTemplateComponent);
        var /** @type {?} */ datatablesTemplateComponent = (this.viewContainerRef.createComponent(rendererComponentFactory).instance);
        datatablesTemplateComponent.columns = columns;
        datatablesTemplateComponent.data = data;
        return datatablesTemplateComponent;
    };
    return DatatablesTemplateComponent;
}());
DatatablesTemplateComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatables-template',
                template: "\n    <tr *ngFor=\"let rowData of data;let rowIndex = index\">\n\n      <td *ngFor=\"let column of columns;let colIndex=index\"\n          [ngClass]=\"{'row-selector':(column.bodyTemplate ? 1 : (column.rowSelector ? 2 : 0))==2}\">\n\n        <ng-container [ngSwitch]=\"column.bodyTemplate ? 1 : (column.rowSelector ? 2 : 0)\">\n              <span *ngSwitchCase=\"1\" id=\"_1_{{colIndex}}_{{rowIndex}}\">\n                  <ng-container [ngTemplateOutlet]=\"column.bodyTemplate?.templateRef\"\n                                [ngTemplateOutletContext]=\"{$implicit:{rowData:rowData,data:rowData,rowIndex:rowIndex,columnIndex:colIndex}}\"\n                                #bodyTemplate></ng-container>\n              </span>\n\n        </ng-container>\n      </td>\n    </tr>\n  ",
                styles: ["\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
DatatablesTemplateComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
]; };
DatatablesTemplateComponent.propDecorators = {
    'columns': [{ type: Input },],
    'data': [{ type: Input },],
};
/**
 * @abstract
 */
var Datatables = (function () {
    /**
     * @param {?} _elementRef
     */
    function Datatables(_elementRef) {
        var _this = this;
        this._elementRef = _elementRef;
        this.selectionMode = 'multiple';
        this.dataListener = new Subject$1();
        this.initListener = Subject$1.create();
        this.PRIVATE_SETTINGS = {
            initComplete: function (settings, json) {
                _this.onInitComplete(settings, json);
                if (_this.options && $.isFunction(_this.options.initComplete)) {
                    _this.options.initComplete.call(_this.dataTableApi, settings, json);
                }
            },
            headerCallback: function (thead, data, start, end, display) {
                _this.onHeaderCallback(thead, data, start, end, display);
                if (_this.options && $.isFunction(_this.options.headerCallback)) {
                    _this.options.headerCallback.call(_this.dataTableApi, thead, data, start, end, display);
                }
            },
            drawCallback: function (settings) {
                _this.onDrawCallback(settings);
                if (_this.options && $.isFunction(_this.options.drawCallback)) {
                    _this.options.drawCallback.call(_this.dataTableApi, settings);
                }
            },
            preDrawCallback: function (settings) {
                _this.onPreDrawCallback(settings);
                if (_this.options && $.isFunction(_this.options.preDrawCallback)) {
                    _this.options.preDrawCallback.call(_this.dataTableApi, settings);
                }
            }
        };
        this.tableElementRef = _elementRef;
    }
    /**
     * callback on pre-construct of class
     * @return {?}
     */
    Datatables.prototype.ngOnInit = function () {
        var _this = this;
        this.dataListener.subscribe(function (currentData) {
            _this.dirtyData = true;
        });
        if ($.fn.dataTable && $.fn.dataTable.ext) {
            $.fn.dataTable.ext.errMode = 'throw';
        }
        this.initOptions();
    };
    /**
     * callback on view initialization
     * @return {?}
     */
    Datatables.prototype.ngAfterViewInit = function () {
        this.buildDataTable();
    };
    /**
     *
     * @return {?}
     */
    Datatables.prototype.ngAfterViewChecked = function () {
    };
    /**
     * Callback on input attribute change, hence DataTable is destroyed and reCreated
     * @param {?} changes
     * @return {?}
     */
    Datatables.prototype.ngOnChanges = function (changes) {
        this.dataListener.next(null);
        for (var /** @type {?} */ propName in changes) {
            if (!changes[propName].firstChange) {
                this.initOptions();
                this.buildDataTable();
                break;
            }
        }
    };
    /**
     * callback on View destroyed, Hence DataTables is destroy
     * @return {?}
     */
    Datatables.prototype.ngOnDestroy = function () {
        this.dataListener.unsubscribe();
        this.initListener.unsubscribe();
        if (this._dataTableApi) {
            this._dataTableApi.destroy(true);
        }
    };
    /**
     * initialization and merging of input attributes
     * @return {?}
     */
    Datatables.prototype.initOptions = function () {
        this.options$ = { ajax: typeof this.ajax === 'string' ? { url: this.ajax } : this.ajax };
        this.options$ = $.extend(true, this.options$, this.options || {});
        this.options$ = $.extend(true, this.options$, this.PRIVATE_SETTINGS);
        this.options$.serverSide = (this.options$.ajax &&
            (typeof this.options$.ajax === 'string' || this.options$.ajax['url'] || $.isFunction(this.options$.ajax)));
        this.options$.data = this.options$.serverSide ? null : this.data;
    };
    /**
     * DataTables new instance initialization
     * @return {?}
     */
    Datatables.prototype.buildDataTable = function () {
        if (!$ || !$.fn || !$.fn.DataTable) {
            console.log('DataTable not initialized properly');
            console.log('jquery ', $ !== undefined);
            console.log('jquery $.fn', $ && $.fn);
            console.log('jquery $.fn', $ && $.fn && $.fn.DataTable);
            return;
        }
        var /** @type {?} */ tableNode = this.tableElementRef.nativeElement;
        if ($.fn.dataTable.isDataTable(tableNode)) {
            $(tableNode).DataTable().destroy();
        }
        var /** @type {?} */ staticData = this.options$.serverSide ? this.data : null;
        this._dataTableApi = $(tableNode).DataTable(this.options$);
        /*if (staticData) {
          setTimeout(() => {
            this._dataTableApi.rows.add(staticData).draw();
          }, 200);
        }*/
    };
    /**
     * ****  PROTECTED CALLBACK FUNCTIONS ******
     * @param {?} settings
     * @param {?} json
     * @return {?}
     */
    Datatables.prototype.onInitComplete = function (settings, json) {
        this.initListener.next(json);
    };
    /**
     * Event callback before DataTables Draw occurs
     * @param {?} settings
     * @return {?}
     */
    Datatables.prototype.onPreDrawCallback = function (settings) {
    };
    /**
     * Event callback DataTables Draw
     * @param {?} settings
     * @return {?}
     */
    Datatables.prototype.onDrawCallback = function (settings) {
        var /** @type {?} */ data = this.currentData();
        this.dataListener.next(data);
    };
    /**
     * Callback function on Table Header init
     * @param {?} thead
     * @param {?} data
     * @param {?} start
     * @param {?} end
     * @param {?} display
     * @return {?}
     */
    Datatables.prototype.onHeaderCallback = function (thead, data, start, end, display) {
    };
    /**
     * ****  PRIVATE UTIL FUNCTIONS ******
     * @return {?}
     */
    Datatables.prototype.currentData = function () {
        var /** @type {?} */ dataObject = this.dataTableApi.rows({ page: 'current' }).data();
        var /** @type {?} */ data = [];
        if (dataObject.length) {
            for (var /** @type {?} */ x = 0; x < dataObject.length; x++) {
                data.push(dataObject[x]);
            }
        }
        return data;
    };
    Object.defineProperty(Datatables.prototype, "toolbar", {
        /**
         * ****  PUBLIC UTIL FUNCTIONS ******
         * @return {?}
         */
        get: function () {
            var _this = this;
            return Observable$1.create(function (observer) {
                var /** @type {?} */ subscription = _this.initListener.subscribe(function () {
                    observer.next($(_this._elementRef.nativeElement).find('div.dataTables_toolbar').get(0));
                    observer.complete();
                });
                return function () {
                    subscription.unsubscribe();
                };
            });
        },
        /**
         * @param {?} toolbarListener
         * @return {?}
         */
        set: function (toolbarListener) {
            var _this = this;
            var /** @type {?} */ _subscription = this.initListener.subscribe(function () {
                var /** @type {?} */ subscription = toolbarListener.subscribe(function (tools) {
                    $(_this._elementRef.nativeElement).find('div.dataTables_toolbar').append(tools);
                }, function (error) {
                }, function () {
                    // _subscription.unsubscribe();
                });
                return function () {
                    subscription.unsubscribe();
                };
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Datatables.prototype, "dataTableApi", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dataTableApi || $(this.tableElementRef.nativeElement).DataTable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Datatables.prototype.getSelectedRowsCount = function () {
        return this.dataTableApi.rows({ selected: true }).count();
    };
    /**
     * @return {?}
     */
    Datatables.prototype.getSelectedRows = function () {
        return this.dataTableApi.rows({ selected: true }).to$().toArray();
    };
    /**
     * @param {?} row
     * @return {?}
     */
    Datatables.prototype.isRowSelected = function (row) {
        return this.dataTableApi.rows({ selected: true }).$(row).length > 0;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    Datatables.prototype.selectRow = function (row) {
        if (!this.isRowSelected(row)) {
            var /** @type {?} */ select = this.dataTableApi.rows(row)['select'];
            if ($.isFunction(select)) {
                select();
            }
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    Datatables.prototype.deselectRow = function (row) {
        if (this.isRowSelected(row)) {
            var /** @type {?} */ deselect = this.dataTableApi.rows(row)['deselect'];
            if ($.isFunction(deselect)) {
                deselect();
            }
        }
    };
    /**
     * @return {?}
     */
    Datatables.prototype.selectAllRows = function () {
        var /** @type {?} */ select = this.dataTableApi.rows()['select'];
        if ($.isFunction(select)) {
            select();
        }
    };
    /**
     * @return {?}
     */
    Datatables.prototype.deselectAllRows = function () {
        var /** @type {?} */ deselect = this.dataTableApi.rows()['deselect'];
        if ($.isFunction(deselect)) {
            deselect();
        }
    };
    /**
     * @return {?}
     */
    Datatables.prototype.isServerSide = function () {
        return this.dataTableApi.page.info().serverSide;
    };
    /**
     * @return {?}
     */
    Datatables.prototype.reload = function () {
        if (!this.isServerSide()) {
            this.dataTableApi.draw(true);
        }
        else {
            this.dataTableApi.clear();
            this.dataTableApi.draw();
        }
    };
    return Datatables;
}());
var DatatablesComponent = (function (_super) {
    __extends(DatatablesComponent, _super);
    /**
     * @param {?} elementRef
     * @param {?} componentFactoryResolver
     */
    function DatatablesComponent(elementRef, componentFactoryResolver) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.ROW_SELECTOR_CLASS = 'row-selector';
        _this.selectionMode = 'multiple';
        return _this;
    }
    /**
     * callback on pre-construct of class
     * @return {?}
     */
    DatatablesComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataListener.subscribe(function (currentData) {
            if (currentData && currentData.length) {
                _this.buildTemplateComponent(currentData);
            }
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * callback on view initialization
     * @return {?}
     */
    DatatablesComponent.prototype.ngAfterViewInit = function () {
        if (!this.columns || !this.columns.length) {
            this.tableElementRef = new ElementRef($(this.elementRef.nativeElement).find('table:first').get(0));
        }
        _super.prototype.ngAfterViewInit.call(this);
    };
    /**
     *
     * @return {?}
     */
    DatatablesComponent.prototype.ngAfterViewChecked = function () {
        this.renderDirtyData();
        _super.prototype.ngAfterViewChecked.call(this);
    };
    /**
     * DataTables new instance initialization
     * @return {?}
     */
    DatatablesComponent.prototype.buildDataTable = function () {
        this.options$.columnDefs = this.initColumnDefs();
        _super.prototype.buildDataTable.call(this);
    };
    /**
     * initialization of Custom Column Headers
     * @param {?} thead
     * @return {?}
     */
    DatatablesComponent.prototype.initColumnHeader = function (thead) {
        var _this = this;
        if (this.columns) {
            this.columns.forEach(function (item, index, items) {
                if (item.rowSelector) {
                    var /** @type {?} */ th_1 = $('th', thead).eq(index);
                    var /** @type {?} */ this_1 = _this;
                    $('input[type="checkbox"]', th_1).off('change.dt').on('change.dt', function () {
                        var /** @type {?} */ tdCheckboxes = $('input[type="checkbox"]', this_1.dataTableApi.column(th_1).nodes());
                        tdCheckboxes.prop({ checked: ((this)).checked });
                        tdCheckboxes.change();
                    });
                }
            });
        }
    };
    /**
     * Overriding and merging DataTables columns(options) and ngx-datatables-column settings.
     * Note that user defined columns and columnDefs options overrides ngx-datatables-column settings
     * However if columnDefs or columns must be used fully used, consider using a no ngx-datatables-column
     * ngx-datatables or ngxDatatables Direcetive
     * @return {?}
     */
    DatatablesComponent.prototype.initColumnDefs = function () {
        var _this = this;
        var /** @type {?} */ columnDefs = (this.options && this.options.columnDefs ? this.options.columnDefs : []).slice();
        if (this.columns) {
            this.columns.forEach(function (col, index, cols) {
                var /** @type {?} */ columnDef = col.buildColumnDefs();
                // const columnDef: DataTables.ColumnDefsSettings = Object.assign(<DataTables.ColumnDefsSettings>{targets: index}, col);
                columnDef.targets = index;
                if (col.rowSelector) {
                    _this.buildRowSelectorColumn(columnDef);
                }
                columnDefs.push(columnDef);
            });
        }
        return columnDefs;
    };
    /**
     * ****  PRIVATE DOM MANIPULATION AND DYNAMIC RENDERING FUNCTIONS ******
     * @return {?}
     */
    DatatablesComponent.prototype.renderDirtyData = function () {
        var _this = this;
        if (this.dirtyData) {
            this.dirtyData = false;
            if (this.datatablesTemplateComponent) {
                $('tr', this.datatablesTemplateComponent.nativeElement).each(function (index, tr) {
                    $('td span', tr).each(function (cellIndex, td) {
                        var /** @type {?} */ paramIndexes = td.id.split('_');
                        if (paramIndexes.length > 3) {
                            var /** @type {?} */ row = paramIndexes[3];
                            var /** @type {?} */ col = paramIndexes[2];
                            if (!isNaN(parseInt(row, 10)) && !isNaN(parseInt(row, 10))) {
                                var /** @type {?} */ cell = _this.dataTableApi.cell(row, col);
                                if (cell) {
                                    var /** @type {?} */ $cell = $(cell.node());
                                    $cell.empty();
                                    $cell.append(td);
                                }
                            }
                        }
                    });
                });
            }
        }
    };
    /**
     * Custom row selector when a column is flag as a rowSelector
     * @param {?} columnDef
     * @return {?}
     */
    DatatablesComponent.prototype.buildRowSelectorColumn = function (columnDef) {
        var _this = this;
        columnDef.render = function (data, type, rowData, meta) {
            if (type !== 'display') {
                return data;
            }
            return "<span class=\"rowselector-checkbox\">\n              <input type=\"checkbox\" id=\"rowselector_" + meta.row + "_" + meta.col + "\">\n            </span>";
        };
        var /** @type {?} */ this_ = this;
        columnDef.createdCell = function (cell, cellData, rowData, row, col) {
            $(cell).addClass(_this.ROW_SELECTOR_CLASS).find('input[type="checkbox"]').off('change.dt').on('change.dt', function () {
                var /** @type {?} */ rowSelector = this_.dataTableApi.row($(cell).parent('tr'))[$(this).is(':checked') ? 'select' : 'deselect'];
                if ($.isFunction(rowSelector)) {
                    rowSelector();
                }
            });
        };
    };
    /**
     * Dynamic building and rendering of custom Column Components using ngxDataTablesTemplate
     * @param {?} currentData
     * @return {?}
     */
    DatatablesComponent.prototype.buildTemplateComponent = function (currentData) {
        if (this.templateViewContainerRef) {
            this.templateViewContainerRef.clear();
            var /** @type {?} */ rendererComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DatatablesTemplateComponent);
            this.datatablesTemplateComponent = this.templateViewContainerRef.createComponent(rendererComponentFactory).instance;
            this.datatablesTemplateComponent.columns = this.columns;
            this.datatablesTemplateComponent.data = currentData;
        }
    };
    /**
     * Callback function on Table Header init
     * @param {?} thead
     * @param {?} data
     * @param {?} start
     * @param {?} end
     * @param {?} display
     * @return {?}
     */
    DatatablesComponent.prototype.onHeaderCallback = function (thead, data, start, end, display) {
        this.initColumnHeader(thead);
    };
    return DatatablesComponent;
}(Datatables));
DatatablesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatables',
                template: "\n    <div class=\"table-container datatable-container {{containerClass}}\" *ngIf=\"columns.length; else datatTablesTemplate\">\n\n      <table class=\"{{tableClass}}\" #tableElement>\n        <thead>\n        <tr role=\"row\" class=\"heading\">\n          <th *ngFor=\"let column of columns;let colIndex = index\"\n              [ngClass]=\"{'row-selector selector':(column.bodyTemplate ? 1 : (column.rowSelector ? 2 : 0))==2}\">\n\n            <ng-container [ngSwitch]=\"column.headerTemplate ? 1 : (column.rowSelector ? 2 : 0)\">\n              <ng-container *ngSwitchCase=\"1\"\n                            [ngTemplateOutlet]=\"column.headerTemplate?.templateRef\"\n                            [ngTemplateOutletContext]=\"{$implicit:{column:column}}\"\n                            #headerTemplate></ng-container>\n\n              <span *ngSwitchCase=\"2\">\n                <span class=\"rowselector-checkbox\">\n                  <input type=\"checkbox\" id=\"rowselector_{{colIndex}}\">\n                </span>\n              </span>\n\n              <span *ngSwitchDefault>{{column.header}}</span>\n            </ng-container>\n\n          </th>\n        </tr>\n\n        </thead>\n        <tbody>\n\n        </tbody>\n\n      </table>\n\n      <ng-container #templateContainer>\n\n      </ng-container>\n\n    </div>\n\n    <ng-template #datatTablesTemplate>\n      <ng-content select=\"table\"></ng-content>\n    </ng-template>\n  ",
                styles: ["\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
DatatablesComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: ComponentFactoryResolver, },
]; };
DatatablesComponent.propDecorators = {
    'columns': [{ type: ContentChildren, args: [DatatablesColumnComponent,] },],
    'selectionMode': [{ type: Input },],
    'tableClass': [{ type: Input },],
    'containerClass': [{ type: Input },],
    'data': [{ type: Input },],
    'ajax': [{ type: Input },],
    'options': [{ type: Input },],
    'tableElementRef': [{ type: ViewChild, args: ['tableElement',] },],
    'datatablesTemplateComponent': [{ type: ViewChild, args: [DatatablesTemplateComponent,] },],
    'templateViewContainerRef': [{ type: ViewChild, args: ['templateContainer', { read: ViewContainerRef },] },],
};
var DatatablesPortletComponent = (function () {
    /**
     * @param {?} elementRef
     */
    function DatatablesPortletComponent(elementRef) {
        this.elementRef = elementRef;
        this.toggleFilter = function () {
        };
    }
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.ngAfterViewInit = function () {
        this.initTools();
    };
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.ngAfterContentInit = function () {
        if (this.templates) {
            this.actionsTemplate = this.findTemplateFor('actions');
            this.filtersTemplate = this.findTemplateFor('filters');
            this.toolsTemplate = this.findTemplateFor('tools');
            this.captionTemplate = this.findTemplateFor('caption');
            if (this.actionsTemplate) {
                this.initActions();
            }
        }
    };
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.filters = function () {
        if (this.filtersTemplate) {
            var /** @type {?} */ element = this.filterPanelElementRef.nativeElement;
            var /** @type {?} */ forms = element.getElementsByTagName('form');
            return forms && forms.length ? this.serializeToJSON(forms[0]) : {};
        }
        return {};
    };
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.resetFilters = function () {
        if (this.filtersTemplate) {
            var /** @type {?} */ element = this.filterPanelElementRef.nativeElement;
            var /** @type {?} */ forms = element.getElementsByTagName('form');
            if (forms && forms.length) {
                $(forms).trigger('reset');
            }
        }
    };
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.isFilterOpened = function () {
        return this.filtersTemplate && $(this.filterPanelElementRef.nativeElement).is(':visible');
    };
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.filterPanel = function () {
        return this.filterPanelElementRef.nativeElement;
    };
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.initTools = function () {
        if (this.toolsPanelElementRef) {
            var /** @type {?} */ $toolsPanel = $(this.toolsPanelElementRef.nativeElement);
            $toolsPanel.children('a.btn-outline').off('mouseleave.tools.dt').on('mouseleave.tools.dt', function (e) {
                $(this).blur();
            });
            this.initFilterTool($toolsPanel);
            this.initFullscreenTool($toolsPanel);
        }
    };
    /**
     * @return {?}
     */
    DatatablesPortletComponent.prototype.initActions = function () {
        if (this.actionsPanelElementRef) {
            var /** @type {?} */ $actionsPanel = $(this.actionsPanelElementRef.nativeElement);
        }
        this.initActionsToolbar(null);
    };
    /**
     * @param {?} $toolPanel
     * @return {?}
     */
    DatatablesPortletComponent.prototype.initFilterTool = function ($toolPanel) {
        var /** @type {?} */ $filterBtn = $toolPanel.children('a.filter');
        var /** @type {?} */ $filterPanel = $(this.filterPanelElementRef.nativeElement);
        var /** @type {?} */ $filterBtnIcon = $filterBtn.find('i:last');
        var /** @type {?} */ onclickFilter = function (e) {
            if (e) {
                e.preventDefault();
            }
            if (e ? $filterPanel.is(':visible') : !$filterPanel.is(':visible')) {
                $filterBtn.removeClass('active').addClass('btn-outline');
                $filterPanel.slideUp(200);
            }
            else {
                $filterBtn.addClass('active').removeClass('btn-outline');
                $filterPanel.slideDown(200);
            }
        };
        $filterBtn.off('click.dt').on('click.dt', onclickFilter);
        onclickFilter(null);
        this.toggleFilter = onclickFilter;
    };
    /**
     * @param {?} $toolPanel
     * @return {?}
     */
    DatatablesPortletComponent.prototype.initFullscreenTool = function ($toolPanel) {
        var /** @type {?} */ $fullscreenBtn = $toolPanel.find('a.fullscreen');
        var /** @type {?} */ $fullscreenBtnIcon = $fullscreenBtn.find('i:last');
        var /** @type {?} */ onclickFullscreen = function () {
            setTimeout(function () {
                if ($fullscreenBtn.hasClass('on')) {
                    $fullscreenBtnIcon.removeClass('fa-expand').addClass('fa-compress');
                    $fullscreenBtn.addClass('active').removeClass('btn-outline');
                }
                else {
                    $fullscreenBtnIcon.removeClass('fa-compress').addClass('fa-expand');
                    $fullscreenBtn.removeClass('active').addClass('btn-outline');
                }
            }, 100);
        };
        $fullscreenBtn.off('click.dt').on('click.dt', onclickFullscreen);
        onclickFullscreen();
    };
    /**
     * @param {?} $actionsPanel
     * @return {?}
     */
    DatatablesPortletComponent.prototype.initActionsToolbar = function ($actionsPanel) {
        var _this = this;
        if (this.datatablesComponent && this.actionsTemplate) {
            var /** @type {?} */ subscription = this.datatablesComponent.toolbar.subscribe(function (toolbar) {
                $(toolbar).append($(_this.actionsTemplate.templateRef.elementRef.nativeElement));
            });
        }
    };
    /**
     * @param {?} templateName
     * @return {?}
     */
    DatatablesPortletComponent.prototype.findTemplateFor = function (templateName) {
        var /** @type {?} */ templates = this.templates != null ? this.templates.filter(function (template) {
            return template.ngxDatatablesTemplate === templateName;
        }) : null;
        if (templates != null && templates.length > 1) {
            console.warn("Multiple '" + templateName + "' Column template detected [ignored]");
        }
        return templates == null || templates.length === 0 ? null : templates[0];
    };
    /**
     * @param {?} form
     * @return {?}
     */
    DatatablesPortletComponent.prototype.serializeToJSON = function (form) {
        var /** @type {?} */ json = {};
        $.each($(form).serializeArray(), function (index, n) {
            var /** @type {?} */ _name;
            var /** @type {?} */ _ = n.name.indexOf('[');
            if (_ > -1) {
                _name = n.name.replace(/\]/gi, '').split('[');
            }
            else if ((_ = n.name.indexOf('.')) > -1) {
                _name = n.name.split('.');
            }
            if (_ > -1 && _name) {
                var /** @type {?} */ o = json;
                for (var /** @type {?} */ i = 0, /** @type {?} */ len = _name.length; i < len; i++) {
                    if (i === len - 1) {
                        if (o[_name[i]]) {
                            if (typeof o[_name[i]] === 'string' || !o[_name[i]].push) {
                                o[_name[i]] = [o[_name[i]]];
                            }
                            o[_name[i]].push(n.value);
                        }
                        else {
                            o[_name[i]] = n.value || '';
                        }
                    }
                    else {
                        o = o[_name[i]] = o[_name[i]] || {};
                    }
                }
            }
            else {
                if (json[n.name] !== undefined) {
                    if (!json[n.name].push) {
                        json[n.name] = [json[n.name]];
                    }
                    json[n.name].push(n.value || '');
                }
                else {
                    json[n.name] = n.value || '';
                }
            }
        });
        return json;
    };
    return DatatablesPortletComponent;
}());
DatatablesPortletComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatables-portlet',
                template: "\n    <div class=\"portlet portlet-datatable\">\n      <div class=\"portlet-title\">\n        <div class=\"row\">\n          <div class=\"caption col-md-6\">\n            <ng-container [ngTemplateOutlet]=\"captionTemplate?.templateRef\"></ng-container>\n            <ng-container *ngIf=\"!captionTemplate?.templateRef\" #defaultCaptionTemplate>\n              <i [ngClass]=\"iconClass ? iconClass :'glyphicon glyphicon-th-list'\"></i>\n              <span class=\"caption-subject\">{{caption}}</span>\n              <span class=\"caption-helper\">{{description}}</span>\n            </ng-container>\n          </div>\n\n          <div class=\"actions col-md-6\" #toolsPanel>\n            <ng-container [ngTemplateOutlet]=\"toolsTemplate?.templateRef\"></ng-container>\n            <ng-container *ngIf=\"!toolsTemplate?.templateRef\" #defaultToolsTemplate>\n              <a class=\"btn filter {{filterClass}}\" [attr.title]=\"filterTitle?filterTitle:'Toggle Filters'\"\n                 href=\"javascript:\">\n                <i [ngClass]=\"filterIconClass ? filterIconClass :'glyphicon glyphicon-filter'\"></i>\n              </a>\n              <a class=\"btn fullscreen {{fullscreenClass}}\"\n                 [attr.title]=\"fullscreenTitle?fullscreenTitle:'Toggle fullscreen'\"\n                 href=\"javascript:\">\n                <i [ngClass]=\"fullscreenIconClass ? fullscreenIconClass :'glyphicon glyphicon-resize-full'\"></i>\n              </a>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n      <div class=\"portlet-title datatable-filter\" style=\"display:none\" #filterPanel>\n        <ng-container [ngTemplateOutlet]=\"filtersTemplate?.templateRef\"></ng-container>\n      </div>\n      <div class=\"portlet-body\">\n        <div>\n          <ng-container [ngTemplateOutlet]=\"actionsTemplate?.templateRef\"></ng-container>\n        </div>\n\n        <ng-content></ng-content>\n      </div>\n    </div>\n  ",
                styles: ["\n\n    .portlet {\n      background: #fff;\n    }\n\n    .portlet-title {\n      padding: 15px 20px 10px;\n      min-height: 40px;\n      border-bottom: 1px solid #eee;\n    }\n\n    .portlet-filter {\n      padding: 5px 20px;\n      min-height: 40px;\n      border-bottom: 1px solid #eee;\n    }\n\n    .portlet-body {\n      padding: 10px 20px 20px;\n    }\n\n    .portlet  .portlet-title  .caption {\n      float: left;\n      text-align: left;\n      display: inline-block;\n      font-size: 18px;\n      line-height: 18px;\n      padding-bottom: 10px;\n      padding-top: 10px;\n    }\n\n    .actions {\n      float: right;\n      text-align: right;\n      display: inline-block;\n    }\n\n    .actions .btn {\n      color: #666;\n      padding: 3px 9px;\n      line-height: 1.5;\n      margin-left: 3px;\n    }\n\n    .actions .btn.btn-icon-only {\n      font-size: 13px;\n      width:auto;height: auto;\n    }\n\n    /*.portlet  .portlet-title .caption  .caption-subject {\n      font-size: 16px;\n    }*/\n\n    /*.actions .btn {\n      color: #666;\n      padding: 3px 9px;\n      line-height: 1.5;\n      background-color: #fff;\n      border-color: #ccc;\n      border-radius: 50px;\n    }*/\n\n    .actions .btn.active,\n    .actions .btn:hover {\n      color: #fff;\n      background-color: #999999;\n    }\n\n    .actions .btn.active {\n      background-color: #666666;\n    }\n\n    .portlet.portlet-fullscreen {\n      z-index: 10060;\n      margin: 0;\n      position: fixed;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      width: 100%;\n      height: 100%;\n      background: #fff;\n      background-color: rgb(255, 255, 255);\n    }\n  "]
            },] },
];
/**
 * @nocollapse
 */
DatatablesPortletComponent.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
DatatablesPortletComponent.propDecorators = {
    'toolsPanelElementRef': [{ type: ViewChild, args: ['toolsPanel',] },],
    'actionsPanelElementRef': [{ type: ViewChild, args: ['actionsPanel',] },],
    'filterPanelElementRef': [{ type: ViewChild, args: ['filterPanel',] },],
    'datatablesComponent': [{ type: ContentChild, args: [DatatablesComponent,] },],
    'templates': [{ type: ContentChildren, args: [DatatablesTemplateDirective,] },],
    'caption': [{ type: Input },],
    'description': [{ type: Input },],
    'iconClass': [{ type: Input },],
    'filterClass': [{ type: Input },],
    'filterTitle': [{ type: Input },],
    'filterIconClass': [{ type: Input },],
    'fullscreenClass': [{ type: Input },],
    'fullscreenTitle': [{ type: Input },],
    'fullscreenIconClass': [{ type: Input },],
    'showFullscreenIconClass': [{ type: Input },],
    'hideFullscreenIconClass': [{ type: Input },],
};
var DatatablesDirective = (function (_super) {
    __extends(DatatablesDirective, _super);
    /**
     * @param {?} elementRef
     */
    function DatatablesDirective(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        return _this;
    }
    return DatatablesDirective;
}(Datatables));
DatatablesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxDatatables]'
            },] },
];
/**
 * @nocollapse
 */
DatatablesDirective.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
DatatablesDirective.propDecorators = {
    'data': [{ type: Input },],
    'ajax': [{ type: Input },],
    'options': [{ type: Input },],
};
var components = [
    DatatablesColumnComponent,
    DatatablesPortletComponent,
    DatatablesTemplateComponent,
    DatatablesTemplateDirective,
    DatatablesComponent,
    DatatablesDirective
];
var DatatablesModule = (function () {
    function DatatablesModule() {
    }
    return DatatablesModule;
}());
DatatablesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                entryComponents: [DatatablesTemplateComponent],
                exports: components.slice(),
                declarations: components.slice(),
            },] },
];
/**
 * @nocollapse
 */
DatatablesModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { DatatablesModule, DatatablesColumnComponent, DatatablesTemplateComponent, DatatablesPortletComponent, DatatablesTemplateDirective, DatatablesComponent, Datatables as ɵa, DatatablesDirective as ɵb };
//# sourceMappingURL=ngx-datatables.es5.js.map
