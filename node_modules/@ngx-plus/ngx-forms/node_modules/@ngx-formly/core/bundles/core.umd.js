(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('rxjs/Subject'), require('rxjs/operator/debounceTime'), require('rxjs/operator/map'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', 'rxjs/Subject', 'rxjs/operator/debounceTime', 'rxjs/operator/map', '@angular/common'], factory) :
	(factory((global.core = {}),global.ng.core,global.ng.forms,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.common));
}(this, (function (exports,core,forms,Subject,debounceTime,map,common) { 'use strict';

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @param {?} formId
 * @param {?} field
 * @param {?} index
 * @return {?}
 */
function getFieldId(formId, field, index) {
    if (field.id)
        return field.id;
    var /** @type {?} */ type = field.type;
    if (!type && field.template)
        type = 'template';
    return [formId, type, field.key, index].join('_');
}
/**
 * @param {?} field
 * @return {?}
 */
function getKeyPath(field) {
    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */
    if (!((field))['_formlyKeyPath'] || ((field))['_formlyKeyPath'].key !== field.key) {
        var /** @type {?} */ keyPath = [];
        if (field.key) {
            /* Also allow for an array key, hence the type check  */
            var /** @type {?} */ pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;
            for (var _i = 0, pathElements_1 = pathElements; _i < pathElements_1.length; _i++) {
                var pathElement = pathElements_1[_i];
                if (typeof pathElement === 'string') {
                    /* replace paths of the form names[2] by names.2, cfr. angular formly */
                    pathElement = pathElement.replace(/\[(\w+)\]/g, '.$1');
                    keyPath = keyPath.concat(pathElement.split('.'));
                }
                else {
                    keyPath.push(pathElement);
                }
            }
            for (var /** @type {?} */ i = 0; i < keyPath.length; i++) {
                var /** @type {?} */ pathElement = keyPath[i];
                if (typeof pathElement === 'string' && stringIsInteger(pathElement)) {
                    keyPath[i] = parseInt(pathElement);
                }
            }
        }
        ((field))['_formlyKeyPath'] = {
            key: field.key,
            path: keyPath,
        };
    }
    return ((field))['_formlyKeyPath'].path.slice(0);
}
/**
 * @param {?} str
 * @return {?}
 */
function stringIsInteger(str) {
    return !isNullOrUndefined(str) && /^\d+$/.test(str);
}
var FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
/**
 * @param {?} model
 * @param {?} field
 * @param {?} constructEmptyObjects
 * @return {?}
 */
function getFieldModel(model, field, constructEmptyObjects) {
    var /** @type {?} */ keyPath = getKeyPath(field);
    var /** @type {?} */ value = model;
    for (var /** @type {?} */ i = 0; i < keyPath.length; i++) {
        var /** @type {?} */ path = keyPath[i];
        var /** @type {?} */ pathValue = value[path];
        if (isNullOrUndefined(pathValue) && constructEmptyObjects) {
            if (i < keyPath.length - 1) {
                /* TODO? : It would be much nicer if we could construct object instances of the correct class, for instance by using factories. */
                value[path] = typeof keyPath[i + 1] === 'number' ? [] : {};
            }
            else if (field.fieldGroup && !field.fieldArray) {
                value[path] = {};
            }
            else if (field.fieldArray) {
                value[path] = [];
            }
        }
        value = value[path];
        if (!value) {
            break;
        }
    }
    return value;
}
/**
 * @param {?} model
 * @param {?} path
 * @param {?} value
 * @return {?}
 */
function assignModelValue(model, path, value) {
    if (typeof path === 'string') {
        path = getKeyPath({ key: path });
    }
    if (path.length > 1) {
        var /** @type {?} */ e = path.shift();
        if (!model[e] || !isObject(model[e])) {
            model[e] = typeof path[0] === 'string' ? {} : [];
        }
        assignModelValue(model[e], path, value);
    }
    else {
        model[path[0]] = value;
    }
}
/**
 * @param {?} model
 * @param {?} path
 * @return {?}
 */
function getValueForKey(model, path) {
    if (typeof path === 'string') {
        path = getKeyPath({ key: path });
    }
    if (path.length > 1) {
        var /** @type {?} */ e = path.shift();
        if (!model[e]) {
            model[e] = typeof path[0] === 'string' ? {} : [];
        }
        return getValueForKey(model[e], path);
    }
    else {
        return model[path[0]];
    }
}
/**
 * @param {?} controlKey
 * @param {?} actualKey
 * @return {?}
 */
/**
 * @param {?} dest
 * @param {...?} args
 * @return {?}
 */
function reverseDeepMerge(dest) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    args.forEach(function (src) {
        for (var /** @type {?} */ srcArg in src) {
            if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {
                if (isFunction(src[srcArg])) {
                    dest[srcArg] = src[srcArg];
                }
                else {
                    dest[srcArg] = clone(src[srcArg]);
                }
            }
            else if (objAndSameType(dest[srcArg], src[srcArg])) {
                reverseDeepMerge(dest[srcArg], src[srcArg]);
            }
        }
    });
    return dest;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNullOrUndefined(value) {
    return value === undefined || value === null;
}
/**
 * @param {?} value
 * @return {?}
 */
function isUndefined(value) {
    return value === undefined;
}
/**
 * @param {?} value
 * @return {?}
 */
function isBlankString(value) {
    return value === '';
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof (value) === 'function';
}
/**
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
function objAndSameType(obj1, obj2) {
    return isObject(obj1) && isObject(obj2) &&
        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);
}
/**
 * @param {?} x
 * @return {?}
 */
function isObject(x) {
    return x != null && typeof x === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
function clone(value) {
    if (!isObject(value) || value instanceof RegExp) {
        return value;
    }
    if (Object.prototype.toString.call(value) === '[object Date]') {
        return new Date(value.getTime());
    }
    if (Array.isArray(value)) {
        return value.slice(0).map(function (v) { return clone(v); });
    }
    value = Object.assign({}, value);
    Object.keys(value).forEach(function (k) { return value[k] = clone(value[k]); });
    return value;
}
/**
 * @param {?} expression
 * @param {?} argNames
 * @return {?}
 */
function evalStringExpression(expression, argNames) {
    try {
        return Function.bind.apply(Function, [void 0].concat(argNames.concat("return " + expression + ";")))();
    }
    catch (error) {
        console.error(error);
    }
}
/**
 * @param {?} expression
 * @param {?} argNames
 * @return {?}
 */
function evalExpressionValueSetter(expression, argNames) {
    try {
        return Function.bind
            .apply(Function, [void 0].concat(argNames.concat(expression + " = expressionValue;")))();
    }
    catch (error) {
        console.error(error);
    }
}
/**
 * @param {?} expression
 * @param {?} thisArg
 * @param {?} argVal
 * @return {?}
 */
function evalExpression(expression, thisArg, argVal) {
    if (expression instanceof Function) {
        return expression.apply(thisArg, argVal);
    }
    else {
        return expression ? true : false;
    }
}
var FORMLY_CONFIG_TOKEN = new core.InjectionToken('FORMLY_CONFIG_TOKEN');
/**
 * Maintains list of formly field directive types. This can be used to register new field templates.
 */
var FormlyConfig = /** @class */ (function () {
    /**
     * @param {?=} configs
     */
    function FormlyConfig(configs) {
        if (configs === void 0) { configs = []; }
        var _this = this;
        this.types = {};
        this.validators = {};
        this.wrappers = {};
        this.messages = {};
        this.templateManipulators = {
            preWrapper: [],
            postWrapper: [],
        };
        this.extras = {
            fieldTransform: undefined,
            showError: function (field) {
                return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));
            },
        };
        configs.forEach(function (config) { return _this.addConfig(config); });
    }
    /**
     * @param {?} config
     * @return {?}
     */
    FormlyConfig.prototype.addConfig = function (config) {
        var _this = this;
        if (config.types) {
            config.types.forEach(function (type) { return _this.setType(type); });
        }
        if (config.validators) {
            config.validators.forEach(function (validator) { return _this.setValidator(validator); });
        }
        if (config.wrappers) {
            config.wrappers.forEach(function (wrapper) { return _this.setWrapper(wrapper); });
        }
        if (config.manipulators) {
            config.manipulators.forEach(function (manipulator) { return _this.setManipulator(manipulator); });
        }
        if (config.validationMessages) {
            config.validationMessages.forEach(function (validation) { return _this.addValidatorMessage(validation.name, validation.message); });
        }
        if (config.extras) {
            this.extras = Object.assign({}, this.extras, config.extras);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    FormlyConfig.prototype.setType = function (options) {
        var _this = this;
        if (Array.isArray(options)) {
            options.forEach(function (option) { return _this.setType(option); });
        }
        else {
            if (!this.types[options.name]) {
                this.types[options.name] = /** @type {?} */ ({});
            }
            this.types[options.name].component = options.component;
            this.types[options.name].name = options.name;
            this.types[options.name].extends = options.extends;
            this.types[options.name].defaultOptions = options.defaultOptions;
            if (options.wrappers) {
                options.wrappers.forEach(function (wrapper) { return _this.setTypeWrapper(options.name, wrapper); });
            }
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    FormlyConfig.prototype.getType = function (name) {
        if (!this.types[name]) {
            throw new Error("[Formly Error] There is no type by the name of \"" + name + "\"");
        }
        this.mergeExtendedType(name);
        return this.types[name];
    };
    /**
     * @param {?=} field
     * @return {?}
     */
    FormlyConfig.prototype.getMergedField = function (field) {
        var _this = this;
        if (field === void 0) { field = {}; }
        var /** @type {?} */ name = field.type;
        if (!this.types[name]) {
            throw new Error("[Formly Error] There is no type by the name of \"" + name + "\"");
        }
        this.mergeExtendedType(name);
        if (this.types[name].defaultOptions) {
            reverseDeepMerge(field, this.types[name].defaultOptions);
        }
        var /** @type {?} */ extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;
        if (extendDefaults) {
            reverseDeepMerge(field, extendDefaults);
        }
        if (field && field.optionsTypes) {
            field.optionsTypes.forEach(function (option) {
                var /** @type {?} */ defaultOptions = _this.getType(option).defaultOptions;
                if (defaultOptions) {
                    reverseDeepMerge(field, defaultOptions);
                }
            });
        }
        if (!field.component) {
            field.component = this.types[name].component;
        }
        if (!field.wrappers) {
            field.wrappers = this.types[name].wrappers;
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    FormlyConfig.prototype.setWrapper = function (options) {
        var _this = this;
        this.wrappers[options.name] = options;
        if (options.types) {
            options.types.forEach(function (type) {
                _this.setTypeWrapper(type, options.name);
            });
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    FormlyConfig.prototype.getWrapper = function (name) {
        if (!this.wrappers[name]) {
            throw new Error("[Formly Error] There is no wrapper by the name of \"" + name + "\"");
        }
        return this.wrappers[name];
    };
    /**
     * @param {?} type
     * @param {?} name
     * @return {?}
     */
    FormlyConfig.prototype.setTypeWrapper = function (type, name) {
        if (!this.types[type]) {
            this.types[type] = /** @type {?} */ ({});
        }
        if (!this.types[type].wrappers) {
            this.types[type].wrappers = /** @type {?} */ ([]);
        }
        this.types[type].wrappers.push(name);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    FormlyConfig.prototype.setValidator = function (options) {
        this.validators[options.name] = options;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    FormlyConfig.prototype.getValidator = function (name) {
        if (!this.validators[name]) {
            throw new Error("[Formly Error] There is no validator by the name of \"" + name + "\"");
        }
        return this.validators[name];
    };
    /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    FormlyConfig.prototype.addValidatorMessage = function (name, message) {
        this.messages[name] = message;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    FormlyConfig.prototype.getValidatorMessage = function (name) {
        return this.messages[name];
    };
    /**
     * @param {?} manipulator
     * @return {?}
     */
    FormlyConfig.prototype.setManipulator = function (manipulator) {
        new manipulator.class()[manipulator.method](this);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    FormlyConfig.prototype.mergeExtendedType = function (name) {
        if (!this.types[name].extends) {
            return;
        }
        var /** @type {?} */ extendedType = this.getType(this.types[name].extends);
        if (!this.types[name].component) {
            this.types[name].component = extendedType.component;
        }
        if (!this.types[name].wrappers) {
            this.types[name].wrappers = extendedType.wrappers;
        }
    };
    return FormlyConfig;
}());
FormlyConfig.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
FormlyConfig.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: core.Inject, args: [FORMLY_CONFIG_TOKEN,] },] },
]; };
/**
 * \@internal
 */
var FormlyFormExpression = /** @class */ (function () {
    function FormlyFormExpression() {
    }
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    FormlyFormExpression.prototype.checkFields = function (form, fields, model, options) {
        if (fields === void 0) { fields = []; }
        this._checkFields(form, fields, model, options);
    };
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    FormlyFormExpression.prototype._checkFields = function (form, fields, model, options) {
        var _this = this;
        if (fields === void 0) { fields = []; }
        fields.forEach(function (field) {
            _this.checkFieldExpressionChange(form, field, _this.getParentModel(model, field), options);
            _this.checkFieldVisibilityChange(form, field, _this.getParentModel(model, field), options);
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                _this._checkFields(field.formControl ? /** @type {?} */ (field.formControl) : form, field.fieldGroup, _this.getParentModel(model, field), options);
            }
        });
    };
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} options
     * @return {?}
     */
    FormlyFormExpression.prototype.checkFieldExpressionChange = function (form, field, model, options) {
        if (!field || !field.expressionProperties) {
            return;
        }
        var /** @type {?} */ expressionProperties = field.expressionProperties;
        var /** @type {?} */ validators = FORMLY_VALIDATORS.map(function (v) { return "templateOptions." + v; });
        for (var /** @type {?} */ key in expressionProperties) {
            var /** @type {?} */ expressionValue = evalExpression(expressionProperties[key].expression, { field: field }, [model, options.formState]);
            if (expressionProperties[key].expressionValue !== expressionValue
                && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))) {
                expressionProperties[key].expressionValue = expressionValue;
                evalExpression(expressionProperties[key].expressionValueSetter, { field: field }, [expressionValue, model, field]);
                if (key.indexOf('model.') === 0) {
                    var /** @type {?} */ path = key.replace(/^model\./, ''), /** @type {?} */ control = field.key && key === path ? field.formControl : form.get(path);
                    if (control
                        && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))
                        && control.value !== expressionValue) {
                        control.patchValue(expressionValue);
                    }
                }
                if (validators.indexOf(key) !== -1 && field.formControl) {
                    field.formControl.updateValueAndValidity({ emitEvent: false });
                }
            }
        }
    };
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} options
     * @return {?}
     */
    FormlyFormExpression.prototype.checkFieldVisibilityChange = function (form, field, model, options) {
        if (!field || isNullOrUndefined(field.hideExpression)) {
            return;
        }
        var /** @type {?} */ hideExpressionResult = !!evalExpression(field.hideExpression, { field: field }, [model, options.formState]);
        if (hideExpressionResult !== field.hide) {
            // toggle hide
            field.hide = hideExpressionResult;
            field.templateOptions.hidden = hideExpressionResult;
            if (field.formControl && field.key) {
                var /** @type {?} */ parent = this.fieldParentFormControl(form, field);
                if (parent) {
                    if (hideExpressionResult === true && parent.get(/** @type {?} */ (this.fieldKey(field)))) {
                        this.removeFieldControl(parent, field);
                    }
                    else if (hideExpressionResult === false && !parent.get(/** @type {?} */ (this.fieldKey(field)))) {
                        this.addFieldControl(parent, field, model);
                    }
                }
            }
            if (options.fieldChanges) {
                options.fieldChanges.next(/** @type {?} */ ({ field: field, type: 'hidden', value: hideExpressionResult }));
            }
        }
    };
    /**
     * @param {?} parent
     * @param {?} field
     * @param {?} model
     * @return {?}
     */
    FormlyFormExpression.prototype.addFieldControl = function (parent, field, model) {
        var /** @type {?} */ fieldModel = this.getFieldModel(model, field);
        if (!(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))
            && field.formControl.value !== fieldModel) {
            field.formControl.patchValue(fieldModel, { emitEvent: false });
        }
        if (parent instanceof forms.FormArray) {
            parent.push(field.formControl);
        }
        else if (parent instanceof forms.FormGroup) {
            parent.addControl(/** @type {?} */ (this.fieldKey(field)), field.formControl);
        }
    };
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    FormlyFormExpression.prototype.getFieldModel = function (model, field) {
        if (field.fieldGroup || field.fieldArray) {
            return model;
        }
        return getFieldModel(model, field, false);
    };
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    FormlyFormExpression.prototype.getParentModel = function (model, field) {
        if (field.key && (field.fieldGroup || field.fieldArray)) {
            return getFieldModel(model, field, true);
        }
        return model;
    };
    /**
     * @param {?} parent
     * @param {?} field
     * @return {?}
     */
    FormlyFormExpression.prototype.removeFieldControl = function (parent, field) {
        if (parent instanceof forms.FormArray) {
            parent.removeAt(/** @type {?} */ (this.fieldKey(field)));
        }
        else if (parent instanceof forms.FormGroup) {
            parent.removeControl(/** @type {?} */ (this.fieldKey(field)));
        }
    };
    /**
     * @param {?} form
     * @param {?} field
     * @return {?}
     */
    FormlyFormExpression.prototype.fieldParentFormControl = function (form, field) {
        var /** @type {?} */ paths = getKeyPath(field);
        paths.pop(); // remove last path
        return /** @type {?} */ ((paths.length > 0 ? form.get(paths) : form));
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormExpression.prototype.fieldKey = function (field) {
        return getKeyPath(field).pop();
    };
    return FormlyFormExpression;
}());
FormlyFormExpression.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
FormlyFormExpression.ctorParameters = function () { return []; };
var FormlyFormBuilder = /** @class */ (function () {
    /**
     * @param {?} formlyConfig
     * @param {?} formlyFormExpression
     */
    function FormlyFormBuilder(formlyConfig, formlyFormExpression) {
        this.formlyConfig = formlyConfig;
        this.formlyFormExpression = formlyFormExpression;
        this.formId = 0;
    }
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    FormlyFormBuilder.prototype.buildForm = function (form, fields, model, options) {
        if (fields === void 0) { fields = []; }
        var /** @type {?} */ fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
        if (!Array.isArray(fieldTransforms)) {
            fieldTransforms = [fieldTransforms];
        }
        fieldTransforms.forEach(function (fieldTransform) {
            if (fieldTransform) {
                fields = fieldTransform(fields, model, form, options);
                if (!fields) {
                    throw new Error('fieldTransform must return an array of fields');
                }
            }
        });
        this._buildForm(form, fields, model, options);
        this.formlyFormExpression.checkFields(form, fields, model, options);
    };
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    FormlyFormBuilder.prototype._buildForm = function (form, fields, model, options) {
        if (fields === void 0) { fields = []; }
        this.formId++;
        this.registerFormControls(form, fields, model, options);
    };
    /**
     * @param {?} form
     * @param {?} fields
     * @param {?} model
     * @param {?} options
     * @return {?}
     */
    FormlyFormBuilder.prototype.registerFormControls = function (form, fields, model, options) {
        var _this = this;
        fields.forEach(function (field, index) {
            field.id = getFieldId("formly_" + _this.formId, field, index);
            if (!isUndefined(field.defaultValue) && isUndefined(getValueForKey(model, field.key))) {
                assignModelValue(model, field.key, field.defaultValue);
            }
            _this.initFieldOptions(field);
            _this.initFieldExpression(field, model, options);
            _this.initFieldValidation(field);
            _this.initFieldAsyncValidation(field);
            if (field.key && field.type) {
                var /** @type {?} */ paths_1 = getKeyPath({ key: field.key });
                var /** @type {?} */ rootForm_1 = form, /** @type {?} */ rootModel_1 = model;
                paths_1.forEach(function (path, index) {
                    // FormGroup/FormArray only allow string value for path
                    var /** @type {?} */ formPath = path.toString();
                    // is last item
                    if (index === paths_1.length - 1) {
                        _this.addFormControl(rootForm_1, field, rootModel_1, formPath);
                    }
                    else {
                        var /** @type {?} */ nestedForm = (rootForm_1.get(formPath));
                        if (!nestedForm) {
                            nestedForm = new forms.FormGroup({});
                            _this.addControl(rootForm_1, formPath, nestedForm);
                        }
                        if (!rootModel_1[path]) {
                            rootModel_1[path] = typeof path === 'string' ? {} : [];
                        }
                        rootForm_1 = nestedForm;
                        rootModel_1 = rootModel_1[path];
                    }
                });
            }
            if (field.fieldGroup) {
                if (!field.type) {
                    field.type = 'formly-group';
                }
                if (field.key) {
                    _this.addFormControl(form, field, (_a = {}, _a[field.key] = field.fieldArray ? [] : {}, _a), field.key);
                    model[field.key] = model[field.key] || (field.fieldArray ? [] : {});
                    _this._buildForm(/** @type {?} */ (field.formControl), field.fieldGroup, model[field.key], options);
                }
                else {
                    // if `hideExpression` is set in that case we have to deal
                    // with toggle FormControl for each field in fieldGroup separately
                    if (field.hideExpression) {
                        field.fieldGroup.forEach(function (f) {
                            var /** @type {?} */ hideExpression = f.hideExpression || (function () { return false; });
                            if (typeof hideExpression === 'string') {
                                hideExpression = evalStringExpression(hideExpression, ['model', 'formState']);
                            }
                            f.hideExpression = function (model, formState) { return field.hide || hideExpression(model, formState); };
                        });
                    }
                    _this._buildForm(form, field.fieldGroup, model, options);
                }
            }
            var _a;
        });
    };
    /**
     * @param {?} field
     * @param {?} model
     * @param {?} options
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldExpression = function (field, model, options) {
        if (field.expressionProperties) {
            for (var /** @type {?} */ key in (field.expressionProperties)) {
                if (key.indexOf('field.') === 0) {
                    console.warn("FormlyForm: field(" + field.key + ") using \"field.\" path in \"expressionProperties\" is deprecated, use \"" + key.replace('field.', '') + "\" instead.");
                }
                if (typeof field.expressionProperties[key] === 'string' || isFunction(field.expressionProperties[key])) {
                    // cache built expression
                    field.expressionProperties[key] = {
                        expression: isFunction(field.expressionProperties[key]) ? field.expressionProperties[key] : evalStringExpression(field.expressionProperties[key], ['model', 'formState']),
                        expressionValueSetter: evalExpressionValueSetter(key.indexOf('field.') === 0 || key.indexOf('model.') === 0
                            ? key
                            : "field." + key, ['expressionValue', 'model', 'field']),
                    };
                }
            }
        }
        if (field.hideExpression) {
            // delete hide value in order to force re-evalute it in FormlyFormExpression.
            delete field.hide;
            if (typeof field.hideExpression === 'string') {
                // cache built expression
                field.hideExpression = evalStringExpression(field.hideExpression, ['model', 'formState']);
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldOptions = function (field) {
        field.templateOptions = field.templateOptions || {};
        if (field.type) {
            this.formlyConfig.getMergedField(field);
            if (field.key) {
                field.templateOptions = Object.assign({
                    label: '',
                    placeholder: '',
                    focus: false,
                }, field.templateOptions);
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldAsyncValidation = function (field) {
        var _this = this;
        var /** @type {?} */ validators = [];
        if (field.asyncValidators) {
            var _loop_1 = function (validatorName) {
                if (validatorName !== 'validation') {
                    validators.push(function (control) {
                        var /** @type {?} */ validator = field.asyncValidators[validatorName];
                        if (isObject(validator)) {
                            validator = validator.expression;
                        }
                        return new Promise(function (resolve) {
                            return validator(control, field).then(function (result) {
                                resolve(result ? null : (_a = {}, _a[validatorName] = true, _a));
                                var _a;
                            });
                        });
                    });
                }
            };
            for (var /** @type {?} */ validatorName in field.asyncValidators) {
                _loop_1(/** @type {?} */ validatorName);
            }
        }
        if (field.asyncValidators && Array.isArray(field.asyncValidators.validation)) {
            field.asyncValidators.validation
                .forEach(function (validator) { return validators.push(_this.wrapNgValidatorFn(field, validator)); });
        }
        if (validators.length) {
            if (field.asyncValidators && !Array.isArray(field.asyncValidators.validation)) {
                field.asyncValidators.validation = forms.Validators.composeAsync([field.asyncValidators.validation].concat(validators));
            }
            else {
                field.asyncValidators = {
                    validation: forms.Validators.composeAsync(validators),
                };
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldValidation = function (field) {
        var _this = this;
        var /** @type {?} */ validators = [];
        FORMLY_VALIDATORS
            .filter(function (opt) { return (field.templateOptions && field.templateOptions.hasOwnProperty(opt))
            || (field.expressionProperties && field.expressionProperties["templateOptions." + opt]); })
            .forEach(function (opt) {
            validators.push(function (control) {
                if (field.templateOptions[opt] === false) {
                    return null;
                }
                return _this.getValidation(opt, field.templateOptions[opt])(control);
            });
        });
        if (field.validators) {
            var _loop_2 = function (validatorName) {
                if (validatorName !== 'validation') {
                    validators.push(function (control) {
                        var /** @type {?} */ validator = field.validators[validatorName];
                        if (isObject(validator)) {
                            validator = validator.expression;
                        }
                        return validator(control, field) ? null : (_a = {}, _a[validatorName] = true, _a);
                        var _a;
                    });
                }
            };
            for (var /** @type {?} */ validatorName in field.validators) {
                _loop_2(/** @type {?} */ validatorName);
            }
        }
        if (field.validators && Array.isArray(field.validators.validation)) {
            field.validators.validation
                .forEach(function (validator) { return validators.push(_this.wrapNgValidatorFn(field, validator)); });
        }
        if (validators.length) {
            if (field.validators && !Array.isArray(field.validators.validation)) {
                field.validators.validation = forms.Validators.compose([field.validators.validation].concat(validators));
            }
            else {
                field.validators = {
                    validation: forms.Validators.compose(validators),
                };
            }
        }
    };
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    FormlyFormBuilder.prototype.addFormControl = function (form, field, model, path) {
        var /** @type {?} */ control;
        if (field.formControl instanceof forms.AbstractControl || form.get(path)) {
            control = field.formControl || form.get(path);
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof forms.FormControl) {
                control.patchValue(model[path]);
            }
        }
        else if (field.component && field.component.createControl) {
            control = field.component.createControl(model[path], field);
        }
        else if (field.fieldGroup && field.key && field.key === path && !field.fieldArray) {
            control = new forms.FormGroup(model[path], field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        }
        else if (field.fieldArray && field.key && field.key === path) {
            control = new forms.FormArray([], field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        }
        else {
            control = new forms.FormControl(model[path], field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: (function () { return !this.formControl.enabled; }).bind(field),
                set: (function (value) {
                    if (this.expressionProperties && this.expressionProperties.hasOwnProperty('templateOptions.disabled')) {
                        this.expressionProperties['templateOptions.disabled'].expressionValue = value;
                    }
                    value ? this.formControl.disable() : this.formControl.enable();
                }).bind(field),
                enumerable: true,
                configurable: true,
            });
        }
        this.addControl(form, path, control, field);
    };
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} formControl
     * @param {?=} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.addControl = function (form, key, formControl, field) {
        if (field) {
            field.formControl = formControl;
        }
        if (form instanceof forms.FormArray) {
            if (form.at(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
        else {
            if (form.get(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
    };
    /**
     * @param {?} opt
     * @param {?} value
     * @return {?}
     */
    FormlyFormBuilder.prototype.getValidation = function (opt, value) {
        switch (opt) {
            case 'required':
                return forms.Validators.required;
            case 'pattern':
                return forms.Validators.pattern(value);
            case 'minLength':
                return forms.Validators.minLength(value);
            case 'maxLength':
                return forms.Validators.maxLength(value);
            case 'min':
                return forms.Validators.min(value);
            case 'max':
                return forms.Validators.max(value);
        }
    };
    /**
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    FormlyFormBuilder.prototype.wrapNgValidatorFn = function (field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return function (control) { return ((validator))(control, field); };
    };
    return FormlyFormBuilder;
}());
FormlyFormBuilder.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
FormlyFormBuilder.ctorParameters = function () { return [
    { type: FormlyConfig, },
    { type: FormlyFormExpression, },
]; };
var FormlyForm = /** @class */ (function () {
    /**
     * @param {?} formlyBuilder
     * @param {?} formlyExpression
     * @param {?} formlyConfig
     * @param {?} parentForm
     * @param {?} parentFormGroup
     * @param {?} parentFormlyForm
     */
    function FormlyForm(formlyBuilder, formlyExpression, formlyConfig, parentForm, parentFormGroup, parentFormlyForm) {
        this.formlyBuilder = formlyBuilder;
        this.formlyExpression = formlyExpression;
        this.formlyConfig = formlyConfig;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.parentFormlyForm = parentFormlyForm;
        this.model = {};
        this.form = new forms.FormGroup({});
        this.fields = [];
        this.modelChange = new core.EventEmitter();
        /**
         * \@internal
         */
        this.isRoot = true;
        this.modelChangeSubs = [];
    }
    /**
     * @return {?}
     */
    FormlyForm.prototype.ngDoCheck = function () {
        this.checkExpressionChange();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyForm.prototype.ngOnChanges = function (changes) {
        if (!this.fields || this.fields.length === 0 || !this.isRoot) {
            return;
        }
        if (changes.fields || changes.form) {
            this.model = this.model || {};
            this.form = this.form || (new forms.FormGroup({}));
            this.setOptions();
            this.clearModelSubscriptions();
            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
            this.trackModelChanges(this.fields);
            this.updateInitialValue();
        }
        else if (changes.model) {
            this.patchModel(this.model);
        }
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.ngOnDestroy = function () {
        this.clearModelSubscriptions();
    };
    /**
     * @param {?} field
     * @param {?=} model
     * @return {?}
     */
    FormlyForm.prototype.fieldModel = function (field, model) {
        if (model === void 0) { model = this.model; }
        if (field.key && (field.fieldGroup || field.fieldArray)) {
            return getFieldModel(model, field, true);
        }
        return model;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FormlyForm.prototype.changeModel = function (event) {
        assignModelValue(this.model, event.key, event.value);
        this.modelChange.emit(this.model);
        this.checkExpressionChange();
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.setOptions = function () {
        var _this = this;
        this.options = this.options || {};
        this.options.formState = this.options.formState || {};
        if (!this.options.showError) {
            this.options.showError = this.formlyConfig.extras.showError;
        }
        if (!this.options.fieldChanges) {
            this.options.fieldChanges = new Subject.Subject();
        }
        if (!this.options.resetModel) {
            this.options.resetModel = this.resetModel.bind(this);
        }
        if (!this.options.parentForm) {
            this.options.parentForm = this.parentFormGroup || this.parentForm;
        }
        if (!this.options.updateInitialValue) {
            this.options.updateInitialValue = this.updateInitialValue.bind(this);
        }
        if (!((this.options)).resetTrackModelChanges) {
            ((this.options)).resetTrackModelChanges = function () {
                _this.clearModelSubscriptions();
                _this.trackModelChanges(_this.fields);
            };
        }
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.checkExpressionChange = function () {
        if (this.isRoot) {
            this.formlyExpression.checkFields(this.form, this.fields, this.model, this.options);
        }
    };
    /**
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    FormlyForm.prototype.trackModelChanges = function (fields, rootKey) {
        var _this = this;
        if (rootKey === void 0) { rootKey = []; }
        fields.forEach(function (field) {
            if (field.key && field.type && !field.fieldGroup && !field.fieldArray) {
                var /** @type {?} */ valueChanges_1 = field.formControl.valueChanges;
                var /** @type {?} */ debounce = field.modelOptions && field.modelOptions.debounce && field.modelOptions.debounce.default;
                if (debounce > 0) {
                    valueChanges_1 = debounceTime.debounceTime.call(valueChanges_1, debounce);
                }
                if (field.parsers && field.parsers.length > 0) {
                    field.parsers.forEach(function (parserFn) {
                        valueChanges_1 = map.map.call(valueChanges_1, parserFn);
                    });
                }
                _this.modelChangeSubs.push(valueChanges_1
                    .subscribe(function (event) { return _this.changeModel({ key: rootKey.concat([field.key]).join('.'), value: event }); }));
            }
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                _this.trackModelChanges(field.fieldGroup, field.key ? rootKey.concat([field.key]) : rootKey);
            }
        });
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.clearModelSubscriptions = function () {
        this.modelChangeSubs.forEach(function (sub) { return sub.unsubscribe(); });
        this.modelChangeSubs = [];
    };
    /**
     * @param {?} model
     * @return {?}
     */
    FormlyForm.prototype.patchModel = function (model) {
        this.clearModelSubscriptions();
        this.resetFieldArray(this.fields, model, this.model);
        this.initializeFormValue(this.form);
        ((this.form)).patchValue(model, { onlySelf: true });
        this.trackModelChanges(this.fields);
    };
    /**
     * @param {?=} model
     * @return {?}
     */
    FormlyForm.prototype.resetModel = function (model) {
        model = isNullOrUndefined(model) ? this.initialModel : model;
        this.resetFieldArray(this.fields, model, this.model);
        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
        // but only when the current component is a root one.
        if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {
            this.options.parentForm.resetForm(model);
        }
        else {
            this.form.reset(model);
        }
    };
    /**
     * @param {?} fields
     * @param {?} newModel
     * @param {?} modelToUpdate
     * @return {?}
     */
    FormlyForm.prototype.resetFieldArray = function (fields, newModel, modelToUpdate) {
        var _this = this;
        fields.forEach(function (field) {
            if ((field.fieldGroup && field.fieldGroup.length > 0) || field.fieldArray) {
                var /** @type {?} */ newFieldModel_1 = _this.fieldModel(field, newModel), /** @type {?} */ fieldModel_1 = _this.fieldModel(field, modelToUpdate);
                if (field.fieldArray) {
                    field.fieldGroup = field.fieldGroup || [];
                    field.fieldGroup.length = 0;
                    if (fieldModel_1 !== newFieldModel_1 && fieldModel_1) {
                        fieldModel_1.length = 0;
                    }
                    var /** @type {?} */ formControl_1 = (field.formControl);
                    while (formControl_1.length !== 0) {
                        formControl_1.removeAt(0);
                    }
                    newFieldModel_1.forEach(function (m, i) {
                        fieldModel_1[i] = m;
                        field.fieldGroup.push(Object.assign({}, clone(field.fieldArray), { key: "" + i }));
                        _this.formlyBuilder.buildForm(formControl_1, [field.fieldGroup[i]], newFieldModel_1, _this.options);
                    });
                }
                else {
                    _this.resetFieldArray(field.fieldGroup, newFieldModel_1, fieldModel_1);
                }
            }
            else if (field.key && field.type) {
                field.formControl.reset(getFieldModel(newModel, field, false));
            }
        });
    };
    /**
     * @param {?} control
     * @return {?}
     */
    FormlyForm.prototype.initializeFormValue = function (control) {
        var _this = this;
        if (control instanceof forms.FormControl) {
            control.setValue(null);
        }
        else if (control instanceof forms.FormGroup) {
            Object.keys(control.controls).forEach(function (k) { return _this.initializeFormValue(control.controls[k]); });
        }
        else if (control instanceof forms.FormArray) {
            control.controls.forEach(function (c) { return _this.initializeFormValue(c); });
        }
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.updateInitialValue = function () {
        this.initialModel = reverseDeepMerge({}, this.model);
    };
    return FormlyForm;
}());
FormlyForm.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-form',
                template: "\n    <formly-field *ngFor=\"let field of fields\"\n      [model]=\"fieldModel(field)\" [form]=\"form\"\n      [field]=\"field\"\n      [ngClass]=\"field.className\"\n      [options]=\"options\">\n    </formly-field>\n    <ng-content></ng-content>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyForm.ctorParameters = function () { return [
    { type: FormlyFormBuilder, },
    { type: FormlyFormExpression, },
    { type: FormlyConfig, },
    { type: forms.NgForm, decorators: [{ type: core.Optional },] },
    { type: forms.FormGroupDirective, decorators: [{ type: core.Optional },] },
    { type: FormlyForm, decorators: [{ type: core.Optional }, { type: core.SkipSelf },] },
]; };
FormlyForm.propDecorators = {
    'model': [{ type: core.Input },],
    'form': [{ type: core.Input },],
    'fields': [{ type: core.Input },],
    'options': [{ type: core.Input },],
    'modelChange': [{ type: core.Output },],
    'isRoot': [{ type: core.Input },],
};
var FormlyField = /** @class */ (function () {
    /**
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     */
    function FormlyField(formlyConfig, componentFactoryResolver) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.options = {};
        this.modelChange = new core.EventEmitter();
        this.componentRefs = [];
    }
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnInit = function () {
        if (!this.field.template) {
            this.createFieldComponent();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyField.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.componentRefs.forEach(function (ref) {
            Object.assign(ref.instance, {
                model: _this.model,
                form: _this.form,
                field: _this.field,
                options: _this.options,
            });
        });
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnDestroy = function () {
        this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
        this.componentRefs = [];
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.createFieldComponent = function () {
        var _this = this;
        var /** @type {?} */ type = this.formlyConfig.getType(this.field.type), /** @type {?} */ wrappers = this.getFieldWrappers(type);
        var /** @type {?} */ fieldComponent = this.fieldComponent;
        wrappers.forEach(function (wrapperName) {
            var /** @type {?} */ wrapperRef = _this.createComponent(fieldComponent, _this.formlyConfig.getWrapper(wrapperName).component);
            fieldComponent = wrapperRef.instance.fieldComponent;
        });
        return this.createComponent(fieldComponent, type.component);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    FormlyField.prototype.getFieldWrappers = function (type) {
        var _this = this;
        var /** @type {?} */ templateManipulators = {
            preWrapper: [],
            postWrapper: [],
        };
        if (this.field.templateOptions) {
            this.mergeTemplateManipulators(templateManipulators, this.field.templateOptions.templateManipulators);
        }
        this.mergeTemplateManipulators(templateManipulators, this.formlyConfig.templateManipulators);
        var /** @type {?} */ preWrappers = templateManipulators.preWrapper.map(function (m) { return m(_this.field); }).filter(function (type) { return type; }), /** @type {?} */ postWrappers = templateManipulators.postWrapper.map(function (m) { return m(_this.field); }).filter(function (type) { return type; });
        if (!this.field.wrappers)
            this.field.wrappers = [];
        if (!type.wrappers)
            type.wrappers = [];
        return preWrappers.concat(this.field.wrappers, postWrappers);
    };
    /**
     * @param {?} source
     * @param {?} target
     * @return {?}
     */
    FormlyField.prototype.mergeTemplateManipulators = function (source, target) {
        target = target || {};
        if (target.preWrapper) {
            source.preWrapper = source.preWrapper.concat(target.preWrapper);
        }
        if (target.postWrapper) {
            source.postWrapper = source.postWrapper.concat(target.postWrapper);
        }
        return source;
    };
    /**
     * @param {?} fieldComponent
     * @param {?} component
     * @return {?}
     */
    FormlyField.prototype.createComponent = function (fieldComponent, component) {
        var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        var /** @type {?} */ ref = (fieldComponent.createComponent(componentFactory));
        Object.assign(ref.instance, {
            model: this.model,
            form: this.form,
            field: this.field,
            options: this.options,
        });
        this.componentRefs.push(ref);
        return ref;
    };
    return FormlyField;
}());
FormlyField.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-field',
                template: "\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"field.template && !field.fieldGroup\" [innerHtml]=\"field.template\"></div>\n  ",
                host: {
                    '[style.display]': 'field.hide ? "none":""',
                },
            },] },
];
/**
 * @nocollapse
 */
FormlyField.ctorParameters = function () { return [
    { type: FormlyConfig, },
    { type: core.ComponentFactoryResolver, },
]; };
FormlyField.propDecorators = {
    'model': [{ type: core.Input },],
    'form': [{ type: core.Input },],
    'field': [{ type: core.Input },],
    'options': [{ type: core.Input },],
    'modelChange': [{ type: core.Output },],
    'fieldComponent': [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] },],
};
var FormlyAttributes = /** @class */ (function () {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     */
    function FormlyAttributes(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.attributes = ['id', 'name', 'placeholder', 'tabindex', 'step', 'readonly'];
        this.statements = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];
    }
    /**
     * @return {?}
     */
    FormlyAttributes.prototype.onFocus = function () {
        this.field.focus = true;
    };
    /**
     * @return {?}
     */
    FormlyAttributes.prototype.onBlur = function () {
        this.field.focus = false;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyAttributes.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.field) {
            var /** @type {?} */ fieldChanges_1 = changes.field;
            this.attributes
                .filter(function (attr) { return _this.canApplyRender(fieldChanges_1, attr); })
                .forEach(function (attr) { return _this.renderer.setAttribute(_this.elementRef.nativeElement, attr, _this.getPropValue(_this.field, attr)); });
            if (this.field.templateOptions && this.field.templateOptions.attributes) {
                var /** @type {?} */ attributes_1 = this.field.templateOptions.attributes;
                Object.keys(attributes_1).forEach(function (name) { return _this.renderer.setAttribute(_this.elementRef.nativeElement, name, /** @type {?} */ (attributes_1[name])); });
            }
            this.statements
                .filter(function (statement) { return _this.canApplyRender(fieldChanges_1, statement); })
                .forEach(function (statement) { return _this.renderer.listen(_this.elementRef.nativeElement, statement, _this.getStatementValue(statement)); });
            if ((fieldChanges_1.previousValue || {}).focus !== (fieldChanges_1.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
            }
        }
    };
    /**
     * @param {?} field
     * @param {?} prop
     * @return {?}
     */
    FormlyAttributes.prototype.getPropValue = function (field, prop) {
        field = field || {};
        if (field.templateOptions && field.templateOptions[prop]) {
            return field.templateOptions[prop];
        }
        return ((field))[prop] || '';
    };
    /**
     * @param {?} statement
     * @return {?}
     */
    FormlyAttributes.prototype.getStatementValue = function (statement) {
        var _this = this;
        var /** @type {?} */ fn = this.field.templateOptions[statement];
        if (fn.length === 2) {
            console.warn("FormlyForm: field(" + this.field.key + ") Passing formControl as a second argument for \"" + statement + "\" is deprecated and it will be removed in the 3.0 version, use \"field.formControl\" instead");
        }
        return function (event) { return fn.length !== 2 ? fn(_this.field, event) : fn(_this.field, _this.formControl); };
    };
    /**
     * @param {?} fieldChange
     * @param {?} prop
     * @return {?}
     */
    FormlyAttributes.prototype.canApplyRender = function (fieldChange, prop) {
        var /** @type {?} */ currentValue = this.getPropValue(this.field, prop), /** @type {?} */ previousValue = this.getPropValue(fieldChange.previousValue, prop);
        if (previousValue !== currentValue) {
            if (this.statements.indexOf(prop) !== -1) {
                return typeof currentValue === 'function';
            }
            return true;
        }
        return false;
    };
    return FormlyAttributes;
}());
FormlyAttributes.decorators = [
    { type: core.Directive, args: [{
                selector: '[formlyAttributes]',
            },] },
];
/**
 * @nocollapse
 */
FormlyAttributes.ctorParameters = function () { return [
    { type: core.Renderer2, },
    { type: core.ElementRef, },
]; };
FormlyAttributes.propDecorators = {
    'field': [{ type: core.Input, args: ['formlyAttributes',] },],
    'formControl': [{ type: core.Input },],
    'onFocus': [{ type: core.HostListener, args: ['focus',] },],
    'onBlur': [{ type: core.HostListener, args: ['blur',] },],
};
/**
 * @abstract
 */
var Field = /** @class */ (function () {
    function Field() {
    }
    Object.defineProperty(Field.prototype, "key", {
        /**
         * @return {?}
         */
        get: function () { return this.field.key; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "formControl", {
        /**
         * @return {?}
         */
        get: function () { return this.field.formControl || this.form.get(this.key); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "to", {
        /**
         * @return {?}
         */
        get: function () { return this.field.templateOptions; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "showError", {
        /**
         * @return {?}
         */
        get: function () { return this.options.showError(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "id", {
        /**
         * @return {?}
         */
        get: function () { return this.field.id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "formState", {
        /**
         * @return {?}
         */
        get: function () { return this.options.formState || {}; },
        enumerable: true,
        configurable: true
    });
    return Field;
}());
Field.propDecorators = {
    'form': [{ type: core.Input },],
    'field': [{ type: core.Input },],
    'model': [{ type: core.Input },],
    'options': [{ type: core.Input },],
};
/**
 * @abstract
 */
var FieldType = /** @class */ (function (_super) {
    __extends(FieldType, _super);
    function FieldType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    FieldType.prototype.ngOnInit = function () {
        this.lifeCycleHooks(this.lifecycle.onInit);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FieldType.prototype.ngOnChanges = function (changes) {
        this.lifeCycleHooks(this.lifecycle.onChanges);
    };
    /**
     * @return {?}
     */
    FieldType.prototype.ngDoCheck = function () {
        this.lifeCycleHooks(this.lifecycle.doCheck);
    };
    /**
     * @return {?}
     */
    FieldType.prototype.ngAfterContentInit = function () {
        this.lifeCycleHooks(this.lifecycle.afterContentInit);
    };
    /**
     * @return {?}
     */
    FieldType.prototype.ngAfterContentChecked = function () {
        this.lifeCycleHooks(this.lifecycle.afterContentChecked);
    };
    /**
     * @return {?}
     */
    FieldType.prototype.ngAfterViewInit = function () {
        this.lifeCycleHooks(this.lifecycle.afterViewInit);
    };
    /**
     * @return {?}
     */
    FieldType.prototype.ngAfterViewChecked = function () {
        this.lifeCycleHooks(this.lifecycle.afterViewChecked);
    };
    /**
     * @return {?}
     */
    FieldType.prototype.ngOnDestroy = function () {
        this.lifeCycleHooks(this.lifecycle.onDestroy);
    };
    Object.defineProperty(FieldType.prototype, "lifecycle", {
        /**
         * @return {?}
         */
        get: function () {
            return this.field.lifecycle || {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} callback
     * @return {?}
     */
    FieldType.prototype.lifeCycleHooks = function (callback) {
        if (callback) {
            callback.bind(this)(this.form, this.field, this.model, this.options);
        }
    };
    return FieldType;
}(Field));
/**
 * @abstract
 */
var FieldArrayType = /** @class */ (function (_super) {
    __extends(FieldArrayType, _super);
    /**
     * @param {?} builder
     */
    function FieldArrayType(builder) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        return _this;
    }
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    FieldArrayType.createControl = function (model, field) {
        var /** @type {?} */ form = new forms.FormArray([], field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        field.fieldGroup = [];
        (model || []).forEach(function (m, i) { return field.fieldGroup.push(Object.assign({}, clone(field.fieldArray), { key: "" + i })); });
        return form;
    };
    /**
     * @param {?=} i
     * @param {?=} initialModel
     * @return {?}
     */
    FieldArrayType.prototype.add = function (i, initialModel) {
        i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;
        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);
        this.field.fieldGroup.splice(i, 0, Object.assign({}, clone(this.field.fieldArray)));
        this.field.fieldGroup.forEach(function (field, index) {
            field.key = "" + index;
        });
        this.builder.buildForm(this.formControl, [this.field.fieldGroup[i]], this.model, this.options);
        ((this.options)).resetTrackModelChanges();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    FieldArrayType.prototype.remove = function (i) {
        this.formControl.removeAt(i);
        this.field.fieldGroup.splice(i, 1);
        this.field.fieldGroup.forEach(function (f, index) { return f.key = "" + index; });
        this.model.splice(i, 1);
        ((this.options)).resetTrackModelChanges();
    };
    return FieldArrayType;
}(FieldType));
/**
 * @abstract
 */
var FieldWrapper = /** @class */ (function (_super) {
    __extends(FieldWrapper, _super);
    function FieldWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FieldWrapper;
}(Field));
var FormlyGroup = /** @class */ (function (_super) {
    __extends(FormlyGroup, _super);
    function FormlyGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormlyGroup;
}(FieldType));
FormlyGroup.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-group',
                template: "\n    <formly-form\n      [fields]=\"field.fieldGroup\"\n      [isRoot]=\"false\"\n      [model]=\"model\"\n      [form]=\"field.formControl || form\"\n      [options]=\"options\"\n      [ngClass]=\"field.fieldGroupClassName\">\n      <ng-content></ng-content>\n    </formly-form>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyGroup.ctorParameters = function () { return []; };
var FormlyValidationMessage = /** @class */ (function () {
    /**
     * @param {?} formlyConfig
     */
    function FormlyValidationMessage(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    Object.defineProperty(FormlyValidationMessage.prototype, "errorMessage", {
        /**
         * @return {?}
         */
        get: function () {
            for (var /** @type {?} */ error in this.fieldForm.errors) {
                if (this.fieldForm.errors.hasOwnProperty(error)) {
                    var /** @type {?} */ message = this.formlyConfig.getValidatorMessage(error);
                    if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {
                        message = this.field.validation.messages[error];
                    }
                    if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {
                        message = this.field.validators[error].message;
                    }
                    if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {
                        message = this.field.asyncValidators[error].message;
                    }
                    if (typeof message === 'function') {
                        return message(this.fieldForm.errors[error], this.field);
                    }
                    return message;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return FormlyValidationMessage;
}());
FormlyValidationMessage.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-validation-message',
                template: "{{ errorMessage }}",
            },] },
];
/**
 * @nocollapse
 */
FormlyValidationMessage.ctorParameters = function () { return [
    { type: FormlyConfig, },
]; };
FormlyValidationMessage.propDecorators = {
    'fieldForm': [{ type: core.Input },],
    'field': [{ type: core.Input },],
};
var FormlyModule = /** @class */ (function () {
    function FormlyModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    FormlyModule.forRoot = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: FormlyModule,
            providers: [
                FormlyFormBuilder,
                FormlyFormExpression,
                FormlyConfig,
                { provide: FORMLY_CONFIG_TOKEN, useValue: { types: [{ name: 'formly-group', component: FormlyGroup }] }, multi: true },
                { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },
                { provide: core.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
            ],
        };
    };
    /**
     * @param {?=} config
     * @return {?}
     */
    FormlyModule.forChild = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: FormlyModule,
            providers: [
                { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },
                { provide: core.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
            ],
        };
    };
    return FormlyModule;
}());
FormlyModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],
                entryComponents: [FormlyGroup],
                exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                ],
            },] },
];
/**
 * @nocollapse
 */
FormlyModule.ctorParameters = function () { return []; };

exports.FormlyForm = FormlyForm;
exports.FormlyField = FormlyField;
exports.FormlyAttributes = FormlyAttributes;
exports.FormlyConfig = FormlyConfig;
exports.FormlyFormBuilder = FormlyFormBuilder;
exports.Field = Field;
exports.FieldType = FieldType;
exports.FieldArrayType = FieldArrayType;
exports.FieldWrapper = FieldWrapper;
exports.FormlyModule = FormlyModule;
exports.ɵc = FormlyGroup;
exports.ɵa = FORMLY_CONFIG_TOKEN;
exports.ɵb = FormlyFormExpression;
exports.ɵd = FormlyValidationMessage;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=core.umd.js.map
