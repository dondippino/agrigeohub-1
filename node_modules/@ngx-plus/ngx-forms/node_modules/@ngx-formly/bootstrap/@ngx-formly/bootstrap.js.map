{"version":3,"file":"bootstrap.js","sources":["~/@ngx-formly/bootstrap/bootstrap.ts","~/@ngx-formly/bootstrap/src/ui-bootstrap.module.ts","~/@ngx-formly/bootstrap/src/ui-bootstrap.config.ts","~/@ngx-formly/bootstrap/src/run/addon.ts","~/@ngx-formly/bootstrap/src/run/validation.ts","~/@ngx-formly/bootstrap/src/run/description.ts","~/@ngx-formly/bootstrap/src/wrappers/addons.ts","~/@ngx-formly/bootstrap/src/wrappers/message-validation.ts","~/@ngx-formly/bootstrap/src/wrappers/description.ts","~/@ngx-formly/bootstrap/src/wrappers/label.ts","~/@ngx-formly/bootstrap/src/wrappers/fieldset.ts","~/@ngx-formly/bootstrap/src/types/select.ts","~/@ngx-formly/bootstrap/src/types/textarea.ts","~/@ngx-formly/bootstrap/src/types/radio.ts","~/@ngx-formly/bootstrap/src/types/input.ts","~/@ngx-formly/bootstrap/src/types/multicheckbox.ts","~/@ngx-formly/bootstrap/src/types/checkbox.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {FormlyBootstrapModule,FormlyFieldCheckbox,FormlyFieldMultiCheckbox,FormlyFieldInput,FormlyFieldRadio,FormlyFieldTextArea,FormlyFieldSelect,FormlyWrapperFieldset,FormlyWrapperLabel,FormlyWrapperDescription,FormlyWrapperValidationMessages} from './index';\n\nexport {TemplateAddons as ɵf} from './src/run/addon';\nexport {TemplateDescription as ɵd} from './src/run/description';\nexport {TemplateValidation as ɵe} from './src/run/validation';\nexport {BOOTSTRAP_FORMLY_CONFIG as ɵb,FIELD_TYPE_COMPONENTS as ɵa} from './src/ui-bootstrap.config';\nexport {FormlyWrapperAddons as ɵc} from './src/wrappers/addons';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { BOOTSTRAP_FORMLY_CONFIG, FIELD_TYPE_COMPONENTS } from './ui-bootstrap.config';\nexport class FormlyBootstrapModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: FIELD_TYPE_COMPONENTS,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyModule.forRoot(BOOTSTRAP_FORMLY_CONFIG),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyBootstrapModule_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyBootstrapModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyBootstrapModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ConfigOption } from '@ngx-formly/core';\nimport { FormlyWrapperAddons } from './wrappers/addons';\nimport { TemplateDescription } from './run/description';\nimport { TemplateValidation } from './run/validation';\nimport { TemplateAddons } from './run/addon';\nimport {\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n} from './types/types';\nimport {\n  FormlyWrapperLabel,\n  FormlyWrapperDescription,\n  FormlyWrapperValidationMessages,\n  FormlyWrapperFieldset,\n} from './wrappers/wrappers';\n\nexport const /** @type {?} */ FIELD_TYPE_COMPONENTS = [\n  // types\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n\n  // wrappers\n  FormlyWrapperLabel,\n  FormlyWrapperDescription,\n  FormlyWrapperValidationMessages,\n  FormlyWrapperFieldset,\n  FormlyWrapperAddons,\n];\n\nexport const /** @type {?} */ BOOTSTRAP_FORMLY_CONFIG: ConfigOption = {\n  types: [\n    {\n      name: 'input',\n      component: FormlyFieldInput,\n      wrappers: ['fieldset', 'label'],\n    },\n    {\n      name: 'checkbox',\n      component: FormlyFieldCheckbox,\n      wrappers: ['fieldset'],\n      defaultOptions: {\n        templateOptions: {\n          indeterminate: true,\n        },\n      },\n    },\n    {\n      name: 'radio',\n      component: FormlyFieldRadio,\n      wrappers: ['fieldset', 'label'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n    {\n      name: 'select',\n      component: FormlyFieldSelect,\n      wrappers: ['fieldset', 'label'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n    {\n      name: 'textarea',\n      component: FormlyFieldTextArea,\n      wrappers: ['fieldset', 'label'],\n      defaultOptions: {\n        templateOptions: {\n          cols: 1,\n          rows: 1,\n        },\n      },\n    },\n    {\n      name: 'multicheckbox',\n      component: FormlyFieldMultiCheckbox,\n      wrappers: ['fieldset', 'label'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n  ],\n  wrappers: [\n    {name: 'label', component: FormlyWrapperLabel},\n    {name: 'description', component: FormlyWrapperDescription},\n    {name: 'validation-message', component: FormlyWrapperValidationMessages},\n    {name: 'fieldset', component: FormlyWrapperFieldset},\n    {name: 'addons', component: FormlyWrapperAddons},\n  ],\n  manipulators: [\n    {class: TemplateDescription, method: 'run'},\n    {class: TemplateValidation, method: 'run'},\n    {class: TemplateAddons, method: 'run'},\n  ],\n};\n","import { FormlyConfig } from '@ngx-formly/core';\nexport class TemplateAddons {\n/**\n * @param {?} fc\n * @return {?}\n */\nrun(fc: FormlyConfig) {\n    fc.templateManipulators.postWrapper.push((field) => {\n      if (field && field.templateOptions && (field.templateOptions.addonLeft || field.templateOptions.addonRight)) {\n        return 'addons';\n      }\n    });\n  }\n}\n","import { FormlyFieldConfig, FormlyConfig } from '@ngx-formly/core';\nexport class TemplateValidation {\n/**\n * @param {?} fc\n * @return {?}\n */\nrun(fc: FormlyConfig) {\n    fc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => 'validation-message');\n  }\n}\n","import { FormlyFieldConfig, FormlyConfig } from '@ngx-formly/core';\nexport class TemplateDescription {\n/**\n * @param {?} fc\n * @return {?}\n */\nrun(fc: FormlyConfig) {\n    fc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => 'description');\n  }\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperAddons extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\n/**\n * @param {?} $event\n * @return {?}\n */\naddonRightClick($event: any) {\n    if (this.to.addonRight.onClick) {\n      this.to.addonRight.onClick(this.to, this, $event);\n    }\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\naddonLeftClick($event: any) {\n    if (this.to.addonLeft.onClick) {\n      this.to.addonLeft.onClick(this.to, this, $event);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-addons',\n  template: `\n    <div class=\"input-group\">\n      <div class=\"input-group-addon input-group-prepend\"\n        *ngIf=\"to.addonLeft\"\n        [ngStyle]=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonLeftClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonLeft.class\" *ngIf=\"to.addonLeft.class\"></i>\n        <span *ngIf=\"to.addonLeft.text\" class=\"input-group-text\">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class=\"input-group-addon input-group-append\"\n        *ngIf=\"to.addonRight\"\n        [ngStyle]=\"{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonRightClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonRight.class\" *ngIf=\"to.addonRight.class\"></i>\n        <span *ngIf=\"to.addonRight.text\" class=\"input-group-text\">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  `],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperAddons_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperAddons.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperAddons.ctorParameters;\n/** @type {?} */\nFormlyWrapperAddons.propDecorators;\n/** @type {?} */\nFormlyWrapperAddons.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperValidationMessages extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\n/**\n * @return {?}\n */\nget validationId() {\n    return this.field.id + '-message';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-validation-messages',\n  template: `\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"showError\">\n      <small class=\"text-danger invalid-feedback\" [style.display]=\"'block'\" role=\"alert\" [id]=\"validationId\">\n        <formly-validation-message [fieldForm]=\"formControl\" [field]=\"field\"></formly-validation-message>\n      </small>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperValidationMessages_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperValidationMessages.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperValidationMessages.ctorParameters;\n/** @type {?} */\nFormlyWrapperValidationMessages.propDecorators;\n/** @type {?} */\nFormlyWrapperValidationMessages.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperDescription extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-description',\n  template: `\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"to.description\">\n      <small class=\"text-muted\">{{ to.description }}</small>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperDescription.ctorParameters;\n/** @type {?} */\nFormlyWrapperDescription.propDecorators;\n/** @type {?} */\nFormlyWrapperDescription.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperLabel extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-label',\n  template: `\n    <label [attr.for]=\"id\" class=\"form-control-label control-label\" *ngIf=\"to.label\">\n      {{ to.label }}\n      <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n    </label>\n    <ng-template #fieldComponent></ng-template>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperLabel.ctorParameters;\n/** @type {?} */\nFormlyWrapperLabel.propDecorators;\n/** @type {?} */\nFormlyWrapperLabel.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperFieldset extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-fieldset',\n  template: `\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <ng-template #fieldComponent></ng-template>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperFieldset_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperFieldset.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperFieldset.ctorParameters;\n/** @type {?} */\nFormlyWrapperFieldset.propDecorators;\n/** @type {?} */\nFormlyWrapperFieldset.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nexport class SelectOption {\n  label: string;\n  value?: string;\n  group?: SelectOption[];\n  disabled?: boolean;\n  [key: string]: any;\n/**\n * @param {?} label\n * @param {?=} value\n * @param {?=} children\n */\nconstructor(label: string, value?: string, children?: SelectOption[]) {\n    this.label = label;\n    this.value = value;\n    this.group = children;\n  }\n}\n\nfunction SelectOption_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectOption.prototype.label;\n/** @type {?} */\nSelectOption.prototype.value;\n/** @type {?} */\nSelectOption.prototype.group;\n/** @type {?} */\nSelectOption.prototype.disabled;\n}\n\nexport class FormlyFieldSelect extends FieldType {\n/**\n * @return {?}\n */\nget labelProp(): string { return this.to.labelProp || 'label'; }\n/**\n * @return {?}\n */\nget valueProp(): string { return this.to.valueProp || 'value'; }\n/**\n * @return {?}\n */\nget groupProp(): string { return this.to.groupProp || 'group'; }\n/**\n * @return {?}\n */\nget selectOptions(): Observable<any[]> {\n    if (!(this.to.options instanceof Observable)) {\n      const /** @type {?} */ options: SelectOption[] = [], /** @type {?} */\n        groups: { [key: string]: SelectOption[] } = {};\n\n      this.to.options.map((option: SelectOption) => {\n        if (!option[this.groupProp]) {\n          options.push(option);\n        } else {\n          if (groups[option[this.groupProp]]) {\n            groups[option[this.groupProp]].push(option);\n          } else {\n            groups[option[this.groupProp]] = [option];\n            options.push({\n              label: option[this.groupProp],\n              group: groups[option[this.groupProp]],\n            });\n          }\n        }\n      });\n\n      return of(options);\n    } else {\n      // return observable directly\n      return this.to.options;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-select',\n  template: `\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [multiple]=\"true\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of selectOptions | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child[valueProp]\" [disabled]=\"child.disabled\">\n              {{ child[labelProp] }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item[valueProp]\" [disabled]=\"item.disabled\">{{ item[labelProp] }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" value=\"\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of selectOptions | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child[valueProp]\" [disabled]=\"child.disabled\">\n              {{ child[labelProp] }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item[valueProp]\" [disabled]=\"item.disabled\">{{ item[labelProp] }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldSelect.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nexport class FormlyFieldTextArea extends FieldType {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-textarea',\n  template: `\n    <textarea [name]=\"key\" [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldTextArea_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldTextArea.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldTextArea.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nexport class FormlyFieldRadio extends FieldType {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-radio',\n  template: `\n    <div [formGroup]=\"form\">\n      <div *ngFor=\"let option of to.options; let i = index;\" class=\"radio\">\n        <label class=\"custom-control custom-radio\">\n          <input\n            [name]=\"id\"\n            [id]=\"id + '_' + i\"\n            type=\"radio\"\n            [value]=\"option.key\"\n            [formControl]=\"formControl\"\n            [formlyAttributes]=\"field\" class=\"custom-control-input\">\n\n          <span class=\"custom-control-label\">{{ option.value }}</span>\n          <span class=\"custom-control-indicator\"></span>\n        </label>\n      </div>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldRadio_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldRadio.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldRadio.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nexport class FormlyFieldInput extends FieldType {\n/**\n * @return {?}\n */\nget type() {\n    return this.to.type || 'text';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-input',\n  template: `\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  `,\n  host: {\n    // temporary fix until removing bootstrap 3 support.\n    '[class.d-inline-flex]': 'to.addonLeft || to.addonRight',\n    '[class.custom-file]': 'to.addonLeft || to.addonRight',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldInput_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldInput.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FieldType, FormlyFieldConfig } from '@ngx-formly/core';\nimport { Observable } from 'rxjs/Observable';\nexport class FormlyFieldMultiCheckbox extends FieldType {\n/**\n * @param {?} model\n * @param {?} field\n * @return {?}\n */\nstatic createControl(model: any, field: FormlyFieldConfig): AbstractControl {\n    if (!(field.templateOptions.options instanceof Observable)) {\n      let /** @type {?} */ controlGroupConfig = field.templateOptions.options.reduce((previous, option) => {\n        previous[option.key] = new FormControl(model ? model[option.key] : undefined);\n        return previous;\n      }, {});\n\n      return new FormGroup(\n        controlGroupConfig,\n        field.validators ? field.validators.validation : undefined,\n        field.asyncValidators ? field.asyncValidators.validation : undefined,\n      );\n    } else {\n      throw new Error(`[Formly Error] You cannot pass an Observable to a multicheckbox yet.`);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-multicheckbox',\n  template: `\n    <div *ngFor=\"let option of to.options; let i = index;\" class=\"checkbox\">\n      <label class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\"\n          [value]=\"option.value\"\n          [id]=\"id + '_' + i\"\n          [formControl]=\"formControl.get(option.key)\"\n          [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">{{ option.value }}</span>\n        <span class=\"custom-control-indicator\"></span>\n      </label>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldMultiCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldMultiCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldMultiCheckbox.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nexport class FormlyFieldCheckbox extends FieldType {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-checkbox',\n  template: `\n    <label class=\"custom-control custom-checkbox\">\n      <input type=\"checkbox\" [formControl]=\"formControl\"\n        [attr.invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && model[key] === undefined\"\n        [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">\n          {{ to.label }}\n          <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n        </span>\n        <span class=\"custom-control-indicator\"></span>\n    </label>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldCheckbox.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["of","Observable"],"mappings":"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"}
