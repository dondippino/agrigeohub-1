import { Component, NgModule, ViewChild, ViewContainerRef } from '@angular/core';
import { FieldType, FieldWrapper, FormlyModule } from '@ngx-formly/core';
import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { Observable as Observable$1 } from 'rxjs/Observable';
import { of as of$1 } from 'rxjs/observable/of';
import { CommonModule } from '@angular/common';

class FormlyFieldCheckbox extends FieldType {
}
FormlyFieldCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-checkbox',
                template: `
    <label class="custom-control custom-checkbox">
      <input type="checkbox" [formControl]="formControl"
        [attr.invalid]="showError"
        [indeterminate]="to.indeterminate && model[key] === undefined"
        [formlyAttributes]="field" class="custom-control-input">
        <span class="custom-control-label">
          {{ to.label }}
          <ng-container *ngIf="to.required && to.hideRequiredMarker !== true">*</ng-container>
        </span>
        <span class="custom-control-indicator"></span>
    </label>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldCheckbox.ctorParameters = () => [];

class FormlyFieldMultiCheckbox extends FieldType {
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    static createControl(model, field) {
        if (!(field.templateOptions.options instanceof Observable$1)) {
            let /** @type {?} */ controlGroupConfig = field.templateOptions.options.reduce((previous, option) => {
                previous[option.key] = new FormControl(model ? model[option.key] : undefined);
                return previous;
            }, {});
            return new FormGroup(controlGroupConfig, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        }
        else {
            throw new Error(`[Formly Error] You cannot pass an Observable to a multicheckbox yet.`);
        }
    }
}
FormlyFieldMultiCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-multicheckbox',
                template: `
    <div *ngFor="let option of to.options; let i = index;" class="checkbox">
      <label class="custom-control custom-checkbox">
        <input type="checkbox"
          [value]="option.value"
          [id]="id + '_' + i"
          [formControl]="formControl.get(option.key)"
          [formlyAttributes]="field" class="custom-control-input">
        <span class="custom-control-label">{{ option.value }}</span>
        <span class="custom-control-indicator"></span>
      </label>
    </div>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldMultiCheckbox.ctorParameters = () => [];

class FormlyFieldInput extends FieldType {
    /**
     * @return {?}
     */
    get type() {
        return this.to.type || 'text';
    }
}
FormlyFieldInput.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-input',
                template: `
    <input *ngIf="type !== 'number' else numberTmp" [type]="type" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">
    <ng-template #numberTmp>
      <input type="number" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">
    </ng-template>
  `,
                host: {
                    // temporary fix until removing bootstrap 3 support.
                    '[class.d-inline-flex]': 'to.addonLeft || to.addonRight',
                    '[class.custom-file]': 'to.addonLeft || to.addonRight',
                },
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldInput.ctorParameters = () => [];

class FormlyFieldRadio extends FieldType {
}
FormlyFieldRadio.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-radio',
                template: `
    <div [formGroup]="form">
      <div *ngFor="let option of to.options; let i = index;" class="radio">
        <label class="custom-control custom-radio">
          <input
            [name]="id"
            [id]="id + '_' + i"
            type="radio"
            [value]="option.key"
            [formControl]="formControl"
            [formlyAttributes]="field" class="custom-control-input">

          <span class="custom-control-label">{{ option.value }}</span>
          <span class="custom-control-indicator"></span>
        </label>
      </div>
    </div>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldRadio.ctorParameters = () => [];

class FormlyFieldTextArea extends FieldType {
}
FormlyFieldTextArea.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-textarea',
                template: `
    <textarea [name]="key" [formControl]="formControl" [cols]="to.cols"
      [rows]="to.rows" class="form-control" [class.is-invalid]="showError"
      [formlyAttributes]="field">
    </textarea>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldTextArea.ctorParameters = () => [];

class FormlyFieldSelect extends FieldType {
    /**
     * @return {?}
     */
    get labelProp() { return this.to.labelProp || 'label'; }
    /**
     * @return {?}
     */
    get valueProp() { return this.to.valueProp || 'value'; }
    /**
     * @return {?}
     */
    get groupProp() { return this.to.groupProp || 'group'; }
    /**
     * @return {?}
     */
    get selectOptions() {
        if (!(this.to.options instanceof Observable$1)) {
            const /** @type {?} */ options = [], /** @type {?} */ groups = {};
            this.to.options.map((option) => {
                if (!option[this.groupProp]) {
                    options.push(option);
                }
                else {
                    if (groups[option[this.groupProp]]) {
                        groups[option[this.groupProp]].push(option);
                    }
                    else {
                        groups[option[this.groupProp]] = [option];
                        options.push({
                            label: option[this.groupProp],
                            group: groups[option[this.groupProp]],
                        });
                    }
                }
            });
            return of$1(options);
        }
        else {
            // return observable directly
            return this.to.options;
        }
    }
}
FormlyFieldSelect.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-select',
                template: `
    <select *ngIf="to.multiple; else singleSelect" class="form-control"
      [formControl]="formControl"
      [class.is-invalid]="showError"
      [multiple]="true"
      [formlyAttributes]="field">
        <ng-container *ngFor="let item of selectOptions | async">
         <optgroup *ngIf="item.group" label="{{item.label}}">
            <option *ngFor="let child of item.group" [value]="child[valueProp]" [disabled]="child.disabled">
              {{ child[labelProp] }}
            </option>
          </optgroup>
          <option *ngIf="!item.group" [value]="item[valueProp]" [disabled]="item.disabled">{{ item[labelProp] }}</option>
        </ng-container>
    </select>

    <ng-template #singleSelect>
      <select class="form-control"
        [formControl]="formControl"
        [class.is-invalid]="showError"
        [formlyAttributes]="field">
        <option *ngIf="to.placeholder" value="">{{ to.placeholder }}</option>
        <ng-container *ngFor="let item of selectOptions | async">
          <optgroup *ngIf="item.group" label="{{item.label}}">
            <option *ngFor="let child of item.group" [value]="child[valueProp]" [disabled]="child.disabled">
              {{ child[labelProp] }}
            </option>
          </optgroup>
          <option *ngIf="!item.group" [value]="item[valueProp]" [disabled]="item.disabled">{{ item[labelProp] }}</option>
        </ng-container>
      </select>
    </ng-template>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldSelect.ctorParameters = () => [];

class FormlyWrapperFieldset extends FieldWrapper {
}
FormlyWrapperFieldset.decorators = [
    { type: Component, args: [{
                selector: 'formly-wrapper-fieldset',
                template: `
    <div class="form-group" [class.has-error]="showError">
      <ng-template #fieldComponent></ng-template>
    </div>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperFieldset.ctorParameters = () => [];
FormlyWrapperFieldset.propDecorators = {
    'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] },],
};

class FormlyWrapperLabel extends FieldWrapper {
}
FormlyWrapperLabel.decorators = [
    { type: Component, args: [{
                selector: 'formly-wrapper-label',
                template: `
    <label [attr.for]="id" class="form-control-label control-label" *ngIf="to.label">
      {{ to.label }}
      <ng-container *ngIf="to.required && to.hideRequiredMarker !== true">*</ng-container>
    </label>
    <ng-template #fieldComponent></ng-template>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperLabel.ctorParameters = () => [];
FormlyWrapperLabel.propDecorators = {
    'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] },],
};

class FormlyWrapperDescription extends FieldWrapper {
}
FormlyWrapperDescription.decorators = [
    { type: Component, args: [{
                selector: 'formly-wrapper-description',
                template: `
    <ng-template #fieldComponent></ng-template>
    <div *ngIf="to.description">
      <small class="text-muted">{{ to.description }}</small>
    </div>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperDescription.ctorParameters = () => [];
FormlyWrapperDescription.propDecorators = {
    'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] },],
};

class FormlyWrapperValidationMessages extends FieldWrapper {
    /**
     * @return {?}
     */
    get validationId() {
        return this.field.id + '-message';
    }
}
FormlyWrapperValidationMessages.decorators = [
    { type: Component, args: [{
                selector: 'formly-wrapper-validation-messages',
                template: `
    <ng-template #fieldComponent></ng-template>
    <div *ngIf="showError">
      <small class="text-danger invalid-feedback" [style.display]="'block'" role="alert" [id]="validationId">
        <formly-validation-message [fieldForm]="formControl" [field]="field"></formly-validation-message>
      </small>
    </div>
  `,
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperValidationMessages.ctorParameters = () => [];
FormlyWrapperValidationMessages.propDecorators = {
    'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] },],
};

class FormlyWrapperAddons extends FieldWrapper {
    /**
     * @param {?} $event
     * @return {?}
     */
    addonRightClick($event) {
        if (this.to.addonRight.onClick) {
            this.to.addonRight.onClick(this.to, this, $event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    addonLeftClick($event) {
        if (this.to.addonLeft.onClick) {
            this.to.addonLeft.onClick(this.to, this, $event);
        }
    }
}
FormlyWrapperAddons.decorators = [
    { type: Component, args: [{
                selector: 'formly-wrapper-addons',
                template: `
    <div class="input-group">
      <div class="input-group-addon input-group-prepend"
        *ngIf="to.addonLeft"
        [ngStyle]="{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}"
        (click)="addonLeftClick($event)">
        <i class="input-group-text" [ngClass]="to.addonLeft.class" *ngIf="to.addonLeft.class"></i>
        <span *ngIf="to.addonLeft.text" class="input-group-text">{{ to.addonLeft.text }}</span>
      </div>
      <ng-template #fieldComponent></ng-template>
      <div class="input-group-addon input-group-append"
        *ngIf="to.addonRight"
        [ngStyle]="{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}"
        (click)="addonRightClick($event)">
        <i class="input-group-text" [ngClass]="to.addonRight.class" *ngIf="to.addonRight.class"></i>
        <span *ngIf="to.addonRight.text" class="input-group-text">{{ to.addonRight.text }}</span>
      </div>
    </div>
  `,
                styles: [`
    :host ::ng-deep .input-group>:not(:first-child)> .form-control {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
    :host ::ng-deep .input-group>:not(:last-child)> .form-control {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  `],
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperAddons.ctorParameters = () => [];
FormlyWrapperAddons.propDecorators = {
    'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] },],
};

class TemplateDescription {
    /**
     * @param {?} fc
     * @return {?}
     */
    run(fc) {
        fc.templateManipulators.postWrapper.push((field) => 'description');
    }
}

class TemplateValidation {
    /**
     * @param {?} fc
     * @return {?}
     */
    run(fc) {
        fc.templateManipulators.postWrapper.push((field) => 'validation-message');
    }
}

class TemplateAddons {
    /**
     * @param {?} fc
     * @return {?}
     */
    run(fc) {
        fc.templateManipulators.postWrapper.push((field) => {
            if (field && field.templateOptions && (field.templateOptions.addonLeft || field.templateOptions.addonRight)) {
                return 'addons';
            }
        });
    }
}

const FIELD_TYPE_COMPONENTS = [
    // types
    FormlyFieldInput,
    FormlyFieldCheckbox,
    FormlyFieldRadio,
    FormlyFieldSelect,
    FormlyFieldTextArea,
    FormlyFieldMultiCheckbox,
    // wrappers
    FormlyWrapperLabel,
    FormlyWrapperDescription,
    FormlyWrapperValidationMessages,
    FormlyWrapperFieldset,
    FormlyWrapperAddons,
];
const BOOTSTRAP_FORMLY_CONFIG = {
    types: [
        {
            name: 'input',
            component: FormlyFieldInput,
            wrappers: ['fieldset', 'label'],
        },
        {
            name: 'checkbox',
            component: FormlyFieldCheckbox,
            wrappers: ['fieldset'],
            defaultOptions: {
                templateOptions: {
                    indeterminate: true,
                },
            },
        },
        {
            name: 'radio',
            component: FormlyFieldRadio,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
        {
            name: 'select',
            component: FormlyFieldSelect,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
        {
            name: 'textarea',
            component: FormlyFieldTextArea,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    cols: 1,
                    rows: 1,
                },
            },
        },
        {
            name: 'multicheckbox',
            component: FormlyFieldMultiCheckbox,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
    ],
    wrappers: [
        { name: 'label', component: FormlyWrapperLabel },
        { name: 'description', component: FormlyWrapperDescription },
        { name: 'validation-message', component: FormlyWrapperValidationMessages },
        { name: 'fieldset', component: FormlyWrapperFieldset },
        { name: 'addons', component: FormlyWrapperAddons },
    ],
    manipulators: [
        { class: TemplateDescription, method: 'run' },
        { class: TemplateValidation, method: 'run' },
        { class: TemplateAddons, method: 'run' },
    ],
};

class FormlyBootstrapModule {
}
FormlyBootstrapModule.decorators = [
    { type: NgModule, args: [{
                declarations: FIELD_TYPE_COMPONENTS,
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormlyModule.forRoot(BOOTSTRAP_FORMLY_CONFIG),
                ],
            },] },
];
/**
 * @nocollapse
 */
FormlyBootstrapModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { FormlyBootstrapModule, FormlyFieldCheckbox, FormlyFieldMultiCheckbox, FormlyFieldInput, FormlyFieldRadio, FormlyFieldTextArea, FormlyFieldSelect, FormlyWrapperFieldset, FormlyWrapperLabel, FormlyWrapperDescription, FormlyWrapperValidationMessages, TemplateAddons as ɵf, TemplateDescription as ɵd, TemplateValidation as ɵe, BOOTSTRAP_FORMLY_CONFIG as ɵb, FIELD_TYPE_COMPONENTS as ɵa, FormlyWrapperAddons as ɵc };
//# sourceMappingURL=bootstrap.js.map
