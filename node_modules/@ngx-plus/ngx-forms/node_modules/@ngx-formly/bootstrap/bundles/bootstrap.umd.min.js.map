{"version":3,"file":"bootstrap.umd.min.js","sources":["~/@ngx-formly/bootstrap/src/types/checkbox.ts","~/@ngx-formly/bootstrap/src/types/multicheckbox.ts","~/@ngx-formly/bootstrap/src/types/input.ts","~/@ngx-formly/bootstrap/src/types/radio.ts","~/@ngx-formly/bootstrap/src/types/textarea.ts","~/@ngx-formly/bootstrap/src/types/select.ts","~/@ngx-formly/bootstrap/src/wrappers/fieldset.ts","~/@ngx-formly/bootstrap/src/wrappers/label.ts","~/@ngx-formly/bootstrap/src/wrappers/description.ts","~/@ngx-formly/bootstrap/src/wrappers/message-validation.ts","~/@ngx-formly/bootstrap/src/wrappers/addons.ts","~/@ngx-formly/bootstrap/src/run/description.ts","~/@ngx-formly/bootstrap/src/run/validation.ts","~/@ngx-formly/bootstrap/src/run/addon.ts","~/@ngx-formly/bootstrap/src/ui-bootstrap.config.ts","~/@ngx-formly/bootstrap/src/ui-bootstrap.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nexport class FormlyFieldCheckbox extends FieldType {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-checkbox',\n  template: `\n    <label class=\"custom-control custom-checkbox\">\n      <input type=\"checkbox\" [formControl]=\"formControl\"\n        [attr.invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && model[key] === undefined\"\n        [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">\n          {{ to.label }}\n          <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n        </span>\n        <span class=\"custom-control-indicator\"></span>\n    </label>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldCheckbox.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FieldType, FormlyFieldConfig } from '@ngx-formly/core';\nimport { Observable } from 'rxjs/Observable';\nexport class FormlyFieldMultiCheckbox extends FieldType {\n/**\n * @param {?} model\n * @param {?} field\n * @return {?}\n */\nstatic createControl(model: any, field: FormlyFieldConfig): AbstractControl {\n    if (!(field.templateOptions.options instanceof Observable)) {\n      let /** @type {?} */ controlGroupConfig = field.templateOptions.options.reduce((previous, option) => {\n        previous[option.key] = new FormControl(model ? model[option.key] : undefined);\n        return previous;\n      }, {});\n\n      return new FormGroup(\n        controlGroupConfig,\n        field.validators ? field.validators.validation : undefined,\n        field.asyncValidators ? field.asyncValidators.validation : undefined,\n      );\n    } else {\n      throw new Error(`[Formly Error] You cannot pass an Observable to a multicheckbox yet.`);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-multicheckbox',\n  template: `\n    <div *ngFor=\"let option of to.options; let i = index;\" class=\"checkbox\">\n      <label class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\"\n          [value]=\"option.value\"\n          [id]=\"id + '_' + i\"\n          [formControl]=\"formControl.get(option.key)\"\n          [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">{{ option.value }}</span>\n        <span class=\"custom-control-indicator\"></span>\n      </label>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldMultiCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldMultiCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldMultiCheckbox.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nexport class FormlyFieldInput extends FieldType {\n/**\n * @return {?}\n */\nget type() {\n    return this.to.type || 'text';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-input',\n  template: `\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  `,\n  host: {\n    // temporary fix until removing bootstrap 3 support.\n    '[class.d-inline-flex]': 'to.addonLeft || to.addonRight',\n    '[class.custom-file]': 'to.addonLeft || to.addonRight',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldInput_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldInput.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nexport class FormlyFieldRadio extends FieldType {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-radio',\n  template: `\n    <div [formGroup]=\"form\">\n      <div *ngFor=\"let option of to.options; let i = index;\" class=\"radio\">\n        <label class=\"custom-control custom-radio\">\n          <input\n            [name]=\"id\"\n            [id]=\"id + '_' + i\"\n            type=\"radio\"\n            [value]=\"option.key\"\n            [formControl]=\"formControl\"\n            [formlyAttributes]=\"field\" class=\"custom-control-input\">\n\n          <span class=\"custom-control-label\">{{ option.value }}</span>\n          <span class=\"custom-control-indicator\"></span>\n        </label>\n      </div>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldRadio_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldRadio.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldRadio.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nexport class FormlyFieldTextArea extends FieldType {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-textarea',\n  template: `\n    <textarea [name]=\"key\" [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldTextArea_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldTextArea.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldTextArea.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nexport class SelectOption {\n  label: string;\n  value?: string;\n  group?: SelectOption[];\n  disabled?: boolean;\n  [key: string]: any;\n/**\n * @param {?} label\n * @param {?=} value\n * @param {?=} children\n */\nconstructor(label: string, value?: string, children?: SelectOption[]) {\n    this.label = label;\n    this.value = value;\n    this.group = children;\n  }\n}\n\nfunction SelectOption_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectOption.prototype.label;\n/** @type {?} */\nSelectOption.prototype.value;\n/** @type {?} */\nSelectOption.prototype.group;\n/** @type {?} */\nSelectOption.prototype.disabled;\n}\n\nexport class FormlyFieldSelect extends FieldType {\n/**\n * @return {?}\n */\nget labelProp(): string { return this.to.labelProp || 'label'; }\n/**\n * @return {?}\n */\nget valueProp(): string { return this.to.valueProp || 'value'; }\n/**\n * @return {?}\n */\nget groupProp(): string { return this.to.groupProp || 'group'; }\n/**\n * @return {?}\n */\nget selectOptions(): Observable<any[]> {\n    if (!(this.to.options instanceof Observable)) {\n      const /** @type {?} */ options: SelectOption[] = [], /** @type {?} */\n        groups: { [key: string]: SelectOption[] } = {};\n\n      this.to.options.map((option: SelectOption) => {\n        if (!option[this.groupProp]) {\n          options.push(option);\n        } else {\n          if (groups[option[this.groupProp]]) {\n            groups[option[this.groupProp]].push(option);\n          } else {\n            groups[option[this.groupProp]] = [option];\n            options.push({\n              label: option[this.groupProp],\n              group: groups[option[this.groupProp]],\n            });\n          }\n        }\n      });\n\n      return of(options);\n    } else {\n      // return observable directly\n      return this.to.options;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-field-select',\n  template: `\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [multiple]=\"true\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of selectOptions | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child[valueProp]\" [disabled]=\"child.disabled\">\n              {{ child[labelProp] }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item[valueProp]\" [disabled]=\"item.disabled\">{{ item[labelProp] }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" value=\"\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of selectOptions | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child[valueProp]\" [disabled]=\"child.disabled\">\n              {{ child[labelProp] }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item[valueProp]\" [disabled]=\"item.disabled\">{{ item[labelProp] }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyFieldSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyFieldSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyFieldSelect.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperFieldset extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-fieldset',\n  template: `\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <ng-template #fieldComponent></ng-template>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperFieldset_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperFieldset.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperFieldset.ctorParameters;\n/** @type {?} */\nFormlyWrapperFieldset.propDecorators;\n/** @type {?} */\nFormlyWrapperFieldset.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperLabel extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-label',\n  template: `\n    <label [attr.for]=\"id\" class=\"form-control-label control-label\" *ngIf=\"to.label\">\n      {{ to.label }}\n      <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n    </label>\n    <ng-template #fieldComponent></ng-template>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperLabel.ctorParameters;\n/** @type {?} */\nFormlyWrapperLabel.propDecorators;\n/** @type {?} */\nFormlyWrapperLabel.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperDescription extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-description',\n  template: `\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"to.description\">\n      <small class=\"text-muted\">{{ to.description }}</small>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperDescription.ctorParameters;\n/** @type {?} */\nFormlyWrapperDescription.propDecorators;\n/** @type {?} */\nFormlyWrapperDescription.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperValidationMessages extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\n/**\n * @return {?}\n */\nget validationId() {\n    return this.field.id + '-message';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-validation-messages',\n  template: `\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"showError\">\n      <small class=\"text-danger invalid-feedback\" [style.display]=\"'block'\" role=\"alert\" [id]=\"validationId\">\n        <formly-validation-message [fieldForm]=\"formControl\" [field]=\"field\"></formly-validation-message>\n      </small>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperValidationMessages_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperValidationMessages.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperValidationMessages.ctorParameters;\n/** @type {?} */\nFormlyWrapperValidationMessages.propDecorators;\n/** @type {?} */\nFormlyWrapperValidationMessages.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\nexport class FormlyWrapperAddons extends FieldWrapper {\n   fieldComponent: ViewContainerRef;\n/**\n * @param {?} $event\n * @return {?}\n */\naddonRightClick($event: any) {\n    if (this.to.addonRight.onClick) {\n      this.to.addonRight.onClick(this.to, this, $event);\n    }\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\naddonLeftClick($event: any) {\n    if (this.to.addonLeft.onClick) {\n      this.to.addonLeft.onClick(this.to, this, $event);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'formly-wrapper-addons',\n  template: `\n    <div class=\"input-group\">\n      <div class=\"input-group-addon input-group-prepend\"\n        *ngIf=\"to.addonLeft\"\n        [ngStyle]=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonLeftClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonLeft.class\" *ngIf=\"to.addonLeft.class\"></i>\n        <span *ngIf=\"to.addonLeft.text\" class=\"input-group-text\">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class=\"input-group-addon input-group-append\"\n        *ngIf=\"to.addonRight\"\n        [ngStyle]=\"{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonRightClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonRight.class\" *ngIf=\"to.addonRight.class\"></i>\n        <span *ngIf=\"to.addonRight.text\" class=\"input-group-text\">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  `],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', {read: ViewContainerRef}, ] },],\n};\n}\n\nfunction FormlyWrapperAddons_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyWrapperAddons.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyWrapperAddons.ctorParameters;\n/** @type {?} */\nFormlyWrapperAddons.propDecorators;\n/** @type {?} */\nFormlyWrapperAddons.prototype.fieldComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { FormlyFieldConfig, FormlyConfig } from '@ngx-formly/core';\nexport class TemplateDescription {\n/**\n * @param {?} fc\n * @return {?}\n */\nrun(fc: FormlyConfig) {\n    fc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => 'description');\n  }\n}\n","import { FormlyFieldConfig, FormlyConfig } from '@ngx-formly/core';\nexport class TemplateValidation {\n/**\n * @param {?} fc\n * @return {?}\n */\nrun(fc: FormlyConfig) {\n    fc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => 'validation-message');\n  }\n}\n","import { FormlyConfig } from '@ngx-formly/core';\nexport class TemplateAddons {\n/**\n * @param {?} fc\n * @return {?}\n */\nrun(fc: FormlyConfig) {\n    fc.templateManipulators.postWrapper.push((field) => {\n      if (field && field.templateOptions && (field.templateOptions.addonLeft || field.templateOptions.addonRight)) {\n        return 'addons';\n      }\n    });\n  }\n}\n","import { ConfigOption } from '@ngx-formly/core';\nimport { FormlyWrapperAddons } from './wrappers/addons';\nimport { TemplateDescription } from './run/description';\nimport { TemplateValidation } from './run/validation';\nimport { TemplateAddons } from './run/addon';\nimport {\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n} from './types/types';\nimport {\n  FormlyWrapperLabel,\n  FormlyWrapperDescription,\n  FormlyWrapperValidationMessages,\n  FormlyWrapperFieldset,\n} from './wrappers/wrappers';\n\nexport const /** @type {?} */ FIELD_TYPE_COMPONENTS = [\n  // types\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n\n  // wrappers\n  FormlyWrapperLabel,\n  FormlyWrapperDescription,\n  FormlyWrapperValidationMessages,\n  FormlyWrapperFieldset,\n  FormlyWrapperAddons,\n];\n\nexport const /** @type {?} */ BOOTSTRAP_FORMLY_CONFIG: ConfigOption = {\n  types: [\n    {\n      name: 'input',\n      component: FormlyFieldInput,\n      wrappers: ['fieldset', 'label'],\n    },\n    {\n      name: 'checkbox',\n      component: FormlyFieldCheckbox,\n      wrappers: ['fieldset'],\n      defaultOptions: {\n        templateOptions: {\n          indeterminate: true,\n        },\n      },\n    },\n    {\n      name: 'radio',\n      component: FormlyFieldRadio,\n      wrappers: ['fieldset', 'label'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n    {\n      name: 'select',\n      component: FormlyFieldSelect,\n      wrappers: ['fieldset', 'label'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n    {\n      name: 'textarea',\n      component: FormlyFieldTextArea,\n      wrappers: ['fieldset', 'label'],\n      defaultOptions: {\n        templateOptions: {\n          cols: 1,\n          rows: 1,\n        },\n      },\n    },\n    {\n      name: 'multicheckbox',\n      component: FormlyFieldMultiCheckbox,\n      wrappers: ['fieldset', 'label'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n  ],\n  wrappers: [\n    {name: 'label', component: FormlyWrapperLabel},\n    {name: 'description', component: FormlyWrapperDescription},\n    {name: 'validation-message', component: FormlyWrapperValidationMessages},\n    {name: 'fieldset', component: FormlyWrapperFieldset},\n    {name: 'addons', component: FormlyWrapperAddons},\n  ],\n  manipulators: [\n    {class: TemplateDescription, method: 'run'},\n    {class: TemplateValidation, method: 'run'},\n    {class: TemplateAddons, method: 'run'},\n  ],\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { BOOTSTRAP_FORMLY_CONFIG, FIELD_TYPE_COMPONENTS } from './ui-bootstrap.config';\nexport class FormlyBootstrapModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: FIELD_TYPE_COMPONENTS,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyModule.forRoot(BOOTSTRAP_FORMLY_CONFIG),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormlyBootstrapModule_tsickle_Closure_declarations() {\n/** @type {?} */\nFormlyBootstrapModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormlyBootstrapModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["FormlyFieldCheckbox","_super","__extends","FieldType","decorators","type","Component","args","selector","template","ctorParameters","FormlyFieldMultiCheckbox","createControl","model","field","templateOptions","options","Observable","Error","controlGroupConfig","reduce","previous","option","key","FormControl","undefined","FormGroup","validators","validation","asyncValidators","FormlyFieldInput","Object","defineProperty","prototype","get","this","to","host","[class.d-inline-flex]","[class.custom-file]","FormlyFieldRadio","FormlyFieldTextArea","FormlyFieldSelect","labelProp","valueProp","groupProp","_this","options_1","groups_1","map","push","label","group","of","FormlyWrapperFieldset","FieldWrapper","propDecorators","fieldComponent","ViewChild","read","ViewContainerRef","FormlyWrapperLabel","FormlyWrapperDescription","FormlyWrapperValidationMessages","id","FormlyWrapperAddons","addonRightClick","$event","addonRight","onClick","addonLeftClick","addonLeft","styles","TemplateDescription","run","fc","templateManipulators","postWrapper","TemplateValidation","TemplateAddons","FIELD_TYPE_COMPONENTS","BOOTSTRAP_FORMLY_CONFIG","types","name","component","wrappers","defaultOptions","indeterminate","cols","rows","manipulators","class","method","FormlyBootstrapModule","NgModule","declarations","imports","CommonModule","ReactiveFormsModule","FormlyModule","forRoot"],"mappings":"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"}
