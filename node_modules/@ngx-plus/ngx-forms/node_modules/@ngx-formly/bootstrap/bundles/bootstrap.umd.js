(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngx-formly/core'), require('@angular/forms'), require('rxjs/Observable'), require('rxjs/observable/of'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@ngx-formly/core', '@angular/forms', 'rxjs/Observable', 'rxjs/observable/of', '@angular/common'], factory) :
	(factory((global.bootstrap = {}),global.ng.core,global['@ngx-formly/core'],global.ng.forms,global.Rx,global.Rx.Observable,global.ng.common));
}(this, (function (exports,core,core$1,forms,Observable,of,common) { 'use strict';

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var FormlyFieldCheckbox = /** @class */ (function (_super) {
    __extends(FormlyFieldCheckbox, _super);
    function FormlyFieldCheckbox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormlyFieldCheckbox;
}(core$1.FieldType));
FormlyFieldCheckbox.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-field-checkbox',
                template: "\n    <label class=\"custom-control custom-checkbox\">\n      <input type=\"checkbox\" [formControl]=\"formControl\"\n        [attr.invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && model[key] === undefined\"\n        [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">\n          {{ to.label }}\n          <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n        </span>\n        <span class=\"custom-control-indicator\"></span>\n    </label>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldCheckbox.ctorParameters = function () { return []; };
var FormlyFieldMultiCheckbox = /** @class */ (function (_super) {
    __extends(FormlyFieldMultiCheckbox, _super);
    function FormlyFieldMultiCheckbox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    FormlyFieldMultiCheckbox.createControl = function (model, field) {
        if (!(field.templateOptions.options instanceof Observable.Observable)) {
            var /** @type {?} */ controlGroupConfig = field.templateOptions.options.reduce(function (previous, option) {
                previous[option.key] = new forms.FormControl(model ? model[option.key] : undefined);
                return previous;
            }, {});
            return new forms.FormGroup(controlGroupConfig, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        }
        else {
            throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");
        }
    };
    return FormlyFieldMultiCheckbox;
}(core$1.FieldType));
FormlyFieldMultiCheckbox.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-field-multicheckbox',
                template: "\n    <div *ngFor=\"let option of to.options; let i = index;\" class=\"checkbox\">\n      <label class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\"\n          [value]=\"option.value\"\n          [id]=\"id + '_' + i\"\n          [formControl]=\"formControl.get(option.key)\"\n          [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">{{ option.value }}</span>\n        <span class=\"custom-control-indicator\"></span>\n      </label>\n    </div>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldMultiCheckbox.ctorParameters = function () { return []; };
var FormlyFieldInput = /** @class */ (function (_super) {
    __extends(FormlyFieldInput, _super);
    function FormlyFieldInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormlyFieldInput.prototype, "type", {
        /**
         * @return {?}
         */
        get: function () {
            return this.to.type || 'text';
        },
        enumerable: true,
        configurable: true
    });
    return FormlyFieldInput;
}(core$1.FieldType));
FormlyFieldInput.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-field-input',
                template: "\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  ",
                host: {
                    // temporary fix until removing bootstrap 3 support.
                    '[class.d-inline-flex]': 'to.addonLeft || to.addonRight',
                    '[class.custom-file]': 'to.addonLeft || to.addonRight',
                },
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldInput.ctorParameters = function () { return []; };
var FormlyFieldRadio = /** @class */ (function (_super) {
    __extends(FormlyFieldRadio, _super);
    function FormlyFieldRadio() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormlyFieldRadio;
}(core$1.FieldType));
FormlyFieldRadio.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-field-radio',
                template: "\n    <div [formGroup]=\"form\">\n      <div *ngFor=\"let option of to.options; let i = index;\" class=\"radio\">\n        <label class=\"custom-control custom-radio\">\n          <input\n            [name]=\"id\"\n            [id]=\"id + '_' + i\"\n            type=\"radio\"\n            [value]=\"option.key\"\n            [formControl]=\"formControl\"\n            [formlyAttributes]=\"field\" class=\"custom-control-input\">\n\n          <span class=\"custom-control-label\">{{ option.value }}</span>\n          <span class=\"custom-control-indicator\"></span>\n        </label>\n      </div>\n    </div>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldRadio.ctorParameters = function () { return []; };
var FormlyFieldTextArea = /** @class */ (function (_super) {
    __extends(FormlyFieldTextArea, _super);
    function FormlyFieldTextArea() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormlyFieldTextArea;
}(core$1.FieldType));
FormlyFieldTextArea.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-field-textarea',
                template: "\n    <textarea [name]=\"key\" [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldTextArea.ctorParameters = function () { return []; };
var FormlyFieldSelect = /** @class */ (function (_super) {
    __extends(FormlyFieldSelect, _super);
    function FormlyFieldSelect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormlyFieldSelect.prototype, "labelProp", {
        /**
         * @return {?}
         */
        get: function () { return this.to.labelProp || 'label'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFieldSelect.prototype, "valueProp", {
        /**
         * @return {?}
         */
        get: function () { return this.to.valueProp || 'value'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFieldSelect.prototype, "groupProp", {
        /**
         * @return {?}
         */
        get: function () { return this.to.groupProp || 'group'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFieldSelect.prototype, "selectOptions", {
        /**
         * @return {?}
         */
        get: function () {
            var _this = this;
            if (!(this.to.options instanceof Observable.Observable)) {
                var /** @type {?} */ options_1 = [], /** @type {?} */ groups_1 = {};
                this.to.options.map(function (option) {
                    if (!option[_this.groupProp]) {
                        options_1.push(option);
                    }
                    else {
                        if (groups_1[option[_this.groupProp]]) {
                            groups_1[option[_this.groupProp]].push(option);
                        }
                        else {
                            groups_1[option[_this.groupProp]] = [option];
                            options_1.push({
                                label: option[_this.groupProp],
                                group: groups_1[option[_this.groupProp]],
                            });
                        }
                    }
                });
                return of.of(options_1);
            }
            else {
                // return observable directly
                return this.to.options;
            }
        },
        enumerable: true,
        configurable: true
    });
    return FormlyFieldSelect;
}(core$1.FieldType));
FormlyFieldSelect.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-field-select',
                template: "\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [multiple]=\"true\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of selectOptions | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child[valueProp]\" [disabled]=\"child.disabled\">\n              {{ child[labelProp] }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item[valueProp]\" [disabled]=\"item.disabled\">{{ item[labelProp] }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" value=\"\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of selectOptions | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child[valueProp]\" [disabled]=\"child.disabled\">\n              {{ child[labelProp] }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item[valueProp]\" [disabled]=\"item.disabled\">{{ item[labelProp] }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyFieldSelect.ctorParameters = function () { return []; };
var FormlyWrapperFieldset = /** @class */ (function (_super) {
    __extends(FormlyWrapperFieldset, _super);
    function FormlyWrapperFieldset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormlyWrapperFieldset;
}(core$1.FieldWrapper));
FormlyWrapperFieldset.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-wrapper-fieldset',
                template: "\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <ng-template #fieldComponent></ng-template>\n    </div>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperFieldset.ctorParameters = function () { return []; };
FormlyWrapperFieldset.propDecorators = {
    'fieldComponent': [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] },],
};
var FormlyWrapperLabel = /** @class */ (function (_super) {
    __extends(FormlyWrapperLabel, _super);
    function FormlyWrapperLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormlyWrapperLabel;
}(core$1.FieldWrapper));
FormlyWrapperLabel.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-wrapper-label',
                template: "\n    <label [attr.for]=\"id\" class=\"form-control-label control-label\" *ngIf=\"to.label\">\n      {{ to.label }}\n      <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n    </label>\n    <ng-template #fieldComponent></ng-template>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperLabel.ctorParameters = function () { return []; };
FormlyWrapperLabel.propDecorators = {
    'fieldComponent': [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] },],
};
var FormlyWrapperDescription = /** @class */ (function (_super) {
    __extends(FormlyWrapperDescription, _super);
    function FormlyWrapperDescription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormlyWrapperDescription;
}(core$1.FieldWrapper));
FormlyWrapperDescription.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-wrapper-description',
                template: "\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"to.description\">\n      <small class=\"text-muted\">{{ to.description }}</small>\n    </div>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperDescription.ctorParameters = function () { return []; };
FormlyWrapperDescription.propDecorators = {
    'fieldComponent': [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] },],
};
var FormlyWrapperValidationMessages = /** @class */ (function (_super) {
    __extends(FormlyWrapperValidationMessages, _super);
    function FormlyWrapperValidationMessages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormlyWrapperValidationMessages.prototype, "validationId", {
        /**
         * @return {?}
         */
        get: function () {
            return this.field.id + '-message';
        },
        enumerable: true,
        configurable: true
    });
    return FormlyWrapperValidationMessages;
}(core$1.FieldWrapper));
FormlyWrapperValidationMessages.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-wrapper-validation-messages',
                template: "\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"showError\">\n      <small class=\"text-danger invalid-feedback\" [style.display]=\"'block'\" role=\"alert\" [id]=\"validationId\">\n        <formly-validation-message [fieldForm]=\"formControl\" [field]=\"field\"></formly-validation-message>\n      </small>\n    </div>\n  ",
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperValidationMessages.ctorParameters = function () { return []; };
FormlyWrapperValidationMessages.propDecorators = {
    'fieldComponent': [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] },],
};
var FormlyWrapperAddons = /** @class */ (function (_super) {
    __extends(FormlyWrapperAddons, _super);
    function FormlyWrapperAddons() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyWrapperAddons.prototype.addonRightClick = function ($event) {
        if (this.to.addonRight.onClick) {
            this.to.addonRight.onClick(this.to, this, $event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyWrapperAddons.prototype.addonLeftClick = function ($event) {
        if (this.to.addonLeft.onClick) {
            this.to.addonLeft.onClick(this.to, this, $event);
        }
    };
    return FormlyWrapperAddons;
}(core$1.FieldWrapper));
FormlyWrapperAddons.decorators = [
    { type: core.Component, args: [{
                selector: 'formly-wrapper-addons',
                template: "\n    <div class=\"input-group\">\n      <div class=\"input-group-addon input-group-prepend\"\n        *ngIf=\"to.addonLeft\"\n        [ngStyle]=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonLeftClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonLeft.class\" *ngIf=\"to.addonLeft.class\"></i>\n        <span *ngIf=\"to.addonLeft.text\" class=\"input-group-text\">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class=\"input-group-addon input-group-append\"\n        *ngIf=\"to.addonRight\"\n        [ngStyle]=\"{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonRightClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonRight.class\" *ngIf=\"to.addonRight.class\"></i>\n        <span *ngIf=\"to.addonRight.text\" class=\"input-group-text\">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  ",
                styles: ["\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  "],
            },] },
];
/**
 * @nocollapse
 */
FormlyWrapperAddons.ctorParameters = function () { return []; };
FormlyWrapperAddons.propDecorators = {
    'fieldComponent': [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] },],
};
var TemplateDescription = /** @class */ (function () {
    function TemplateDescription() {
    }
    /**
     * @param {?} fc
     * @return {?}
     */
    TemplateDescription.prototype.run = function (fc) {
        fc.templateManipulators.postWrapper.push(function (field) { return 'description'; });
    };
    return TemplateDescription;
}());
var TemplateValidation = /** @class */ (function () {
    function TemplateValidation() {
    }
    /**
     * @param {?} fc
     * @return {?}
     */
    TemplateValidation.prototype.run = function (fc) {
        fc.templateManipulators.postWrapper.push(function (field) { return 'validation-message'; });
    };
    return TemplateValidation;
}());
var TemplateAddons = /** @class */ (function () {
    function TemplateAddons() {
    }
    /**
     * @param {?} fc
     * @return {?}
     */
    TemplateAddons.prototype.run = function (fc) {
        fc.templateManipulators.postWrapper.push(function (field) {
            if (field && field.templateOptions && (field.templateOptions.addonLeft || field.templateOptions.addonRight)) {
                return 'addons';
            }
        });
    };
    return TemplateAddons;
}());
var FIELD_TYPE_COMPONENTS = [
    // types
    FormlyFieldInput,
    FormlyFieldCheckbox,
    FormlyFieldRadio,
    FormlyFieldSelect,
    FormlyFieldTextArea,
    FormlyFieldMultiCheckbox,
    // wrappers
    FormlyWrapperLabel,
    FormlyWrapperDescription,
    FormlyWrapperValidationMessages,
    FormlyWrapperFieldset,
    FormlyWrapperAddons,
];
var BOOTSTRAP_FORMLY_CONFIG = {
    types: [
        {
            name: 'input',
            component: FormlyFieldInput,
            wrappers: ['fieldset', 'label'],
        },
        {
            name: 'checkbox',
            component: FormlyFieldCheckbox,
            wrappers: ['fieldset'],
            defaultOptions: {
                templateOptions: {
                    indeterminate: true,
                },
            },
        },
        {
            name: 'radio',
            component: FormlyFieldRadio,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
        {
            name: 'select',
            component: FormlyFieldSelect,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
        {
            name: 'textarea',
            component: FormlyFieldTextArea,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    cols: 1,
                    rows: 1,
                },
            },
        },
        {
            name: 'multicheckbox',
            component: FormlyFieldMultiCheckbox,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
    ],
    wrappers: [
        { name: 'label', component: FormlyWrapperLabel },
        { name: 'description', component: FormlyWrapperDescription },
        { name: 'validation-message', component: FormlyWrapperValidationMessages },
        { name: 'fieldset', component: FormlyWrapperFieldset },
        { name: 'addons', component: FormlyWrapperAddons },
    ],
    manipulators: [
        { class: TemplateDescription, method: 'run' },
        { class: TemplateValidation, method: 'run' },
        { class: TemplateAddons, method: 'run' },
    ],
};
var FormlyBootstrapModule = /** @class */ (function () {
    function FormlyBootstrapModule() {
    }
    return FormlyBootstrapModule;
}());
FormlyBootstrapModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: FIELD_TYPE_COMPONENTS,
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    core$1.FormlyModule.forRoot(BOOTSTRAP_FORMLY_CONFIG),
                ],
            },] },
];
/**
 * @nocollapse
 */
FormlyBootstrapModule.ctorParameters = function () { return []; };

exports.FormlyBootstrapModule = FormlyBootstrapModule;
exports.FormlyFieldCheckbox = FormlyFieldCheckbox;
exports.FormlyFieldMultiCheckbox = FormlyFieldMultiCheckbox;
exports.FormlyFieldInput = FormlyFieldInput;
exports.FormlyFieldRadio = FormlyFieldRadio;
exports.FormlyFieldTextArea = FormlyFieldTextArea;
exports.FormlyFieldSelect = FormlyFieldSelect;
exports.FormlyWrapperFieldset = FormlyWrapperFieldset;
exports.FormlyWrapperLabel = FormlyWrapperLabel;
exports.FormlyWrapperDescription = FormlyWrapperDescription;
exports.FormlyWrapperValidationMessages = FormlyWrapperValidationMessages;
exports.ɵf = TemplateAddons;
exports.ɵd = TemplateDescription;
exports.ɵe = TemplateValidation;
exports.ɵb = BOOTSTRAP_FORMLY_CONFIG;
exports.ɵa = FIELD_TYPE_COMPONENTS;
exports.ɵc = FormlyWrapperAddons;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bootstrap.umd.js.map
